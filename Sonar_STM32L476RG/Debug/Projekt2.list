
Projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009834  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080099c0  080099c0  000199c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d08  08009d08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d08  08009d08  00019d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d10  08009d10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a274  20000074  08009d8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a2e8  08009d8c  0002a2e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179a0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e0  00000000  00000000  00037a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029568  00000000  00000000  0003d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e3d  00000000  00000000  000669b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8324  00000000  00000000  000807ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005628  00000000  00000000  00178b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080099a4 	.word	0x080099a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080099a4 	.word	0x080099a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_DMA_Init+0x38>)
 8000e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <MX_DMA_Init+0x38>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_DMA_Init+0x38>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f001 fa27 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	f001 fa40 	bl	8002342 <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f640 0104 	movw	r1, #2052	; 0x804
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f36:	f001 fdc1 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f42:	f001 fdbb 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f5c:	f001 fc04 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000f60:	f641 0304 	movw	r3, #6148	; 0x1804
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f7a:	f001 fbf5 	bl	8002768 <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	48000800 	.word	0x48000800

08000f94 <hagl_hal_init>:
#include "hagl/backend.h"
#include "hagl_hal.h"

void hagl_hal_init(hagl_backend_t *backend)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    backend->width = DISPLAY_WIDTH;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	22a0      	movs	r2, #160	; 0xa0
 8000fa0:	801a      	strh	r2, [r3, #0]
    backend->height = DISPLAY_HEIGHT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	805a      	strh	r2, [r3, #2]
    backend->depth = DISPLAY_DEPTH;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2210      	movs	r2, #16
 8000fac:	711a      	strb	r2, [r3, #4]
    backend->put_pixel = lcd_put_pixel;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <hagl_hal_init+0x2c>)
 8000fb2:	611a      	str	r2, [r3, #16]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	08001191 	.word	0x08001191

08000fc4 <lcd_cmd>:
#define ST7735S_VMCTR1			0xc5
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

static void lcd_cmd(uint8_t cmd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <lcd_cmd+0x44>)
 8000fd6:	f001 fd71 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <lcd_cmd+0x44>)
 8000fe2:	f001 fd6b 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000fe6:	1df9      	adds	r1, r7, #7
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	2201      	movs	r2, #1
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <lcd_cmd+0x48>)
 8000ff0:	f003 f93f 	bl	8004272 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <lcd_cmd+0x44>)
 8000ffc:	f001 fd5e 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	48000400 	.word	0x48000400
 800100c:	2000a094 	.word	0x2000a094

08001010 <lcd_data>:

static void lcd_data(uint8_t data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <lcd_data+0x44>)
 8001022:	f001 fd4b 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <lcd_data+0x44>)
 800102e:	f001 fd45 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001032:	1df9      	adds	r1, r7, #7
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	2201      	movs	r2, #1
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <lcd_data+0x48>)
 800103c:	f003 f919 	bl	8004272 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <lcd_data+0x44>)
 8001048:	f001 fd38 	bl	8002abc <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	48000400 	.word	0x48000400
 8001058:	2000a094 	.word	0x2000a094

0800105c <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <lcd_send+0x20>
		lcd_cmd(value);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa5 	bl	8000fc4 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800107a:	e004      	b.n	8001086 <lcd_send+0x2a>
		lcd_data(value);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffc5 	bl	8001010 <lcd_data>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <lcd_data16>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_data16(uint16_t value)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29b      	uxth	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffb5 	bl	8001010 <lcd_data>
	lcd_data(value);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffb0 	bl	8001010 <lcd_data>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80010c6:	202a      	movs	r0, #42	; 0x2a
 80010c8:	f7ff ff7c 	bl	8000fc4 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffda 	bl	800108e <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffd1 	bl	800108e <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80010ec:	202b      	movs	r0, #43	; 0x2b
 80010ee:	f7ff ff69 	bl	8000fc4 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3302      	adds	r3, #2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffc7 	bl	800108e <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffbc 	bl	800108e <lcd_data16>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <lcd_init+0x68>)
 800112c:	f001 fcc6 	bl	8002abc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f000 ffeb 	bl	800210c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2104      	movs	r1, #4
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <lcd_init+0x68>)
 800113c:	f001 fcbe 	bl	8002abc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 ffe3 	bl	800210c <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e009      	b.n	8001160 <lcd_init+0x40>
    lcd_send(init_table[i]);
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <lcd_init+0x6c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff81 	bl	800105c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b4b      	cmp	r3, #75	; 0x4b
 8001164:	d9f2      	bls.n	800114c <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001166:	20c8      	movs	r0, #200	; 0xc8
 8001168:	f000 ffd0 	bl	800210c <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 800116c:	2011      	movs	r0, #17
 800116e:	f7ff ff29 	bl	8000fc4 <lcd_cmd>
  HAL_Delay(120);
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f000 ffca 	bl	800210c <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001178:	2029      	movs	r0, #41	; 0x29
 800117a:	f7ff ff23 	bl	8000fc4 <lcd_cmd>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400
 800118c:	080099c0 	.word	0x080099c0

08001190 <lcd_put_pixel>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_put_pixel(void *_surface, int16_t x, int16_t y, uint16_t color)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	817b      	strh	r3, [r7, #10]
 80011a2:	460b      	mov	r3, r1
 80011a4:	813b      	strh	r3, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x+y*LCD_WIDTH] = color;
 80011aa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80011ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	015b      	lsls	r3, r3, #5
 80011ba:	440b      	add	r3, r1
 80011bc:	4904      	ldr	r1, [pc, #16]	; (80011d0 <lcd_put_pixel+0x40>)
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000090 	.word	0x20000090

080011d4 <lcd_copy>:

void lcd_copy(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	22a0      	movs	r2, #160	; 0xa0
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff6a 	bl	80010b8 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80011e4:	202c      	movs	r0, #44	; 0x2c
 80011e6:	f7ff feed 	bl	8000fc4 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <lcd_copy+0x40>)
 80011f2:	f001 fc63 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <lcd_copy+0x40>)
 80011fe:	f001 fc5d 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001202:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001206:	4904      	ldr	r1, [pc, #16]	; (8001218 <lcd_copy+0x44>)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <lcd_copy+0x48>)
 800120a:	f003 f9a1 	bl	8004550 <HAL_SPI_Transmit_DMA>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	48000400 	.word	0x48000400
 8001218:	20000090 	.word	0x20000090
 800121c:	2000a094 	.word	0x2000a094

08001220 <lcd_transfer_done>:

void lcd_transfer_done(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <lcd_transfer_done+0x14>)
 800122c:	f001 fc46 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000400 	.word	0x48000400

08001238 <lcd_is_busy>:

bool lcd_is_busy(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY)
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <lcd_is_busy+0x1c>)
 800123e:	f003 fa8f 	bl	8004760 <HAL_SPI_GetState>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d001      	beq.n	800124c <lcd_is_busy+0x14>
		return true;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <lcd_is_busy+0x16>
	else
		return false;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000a094 	.word	0x2000a094

08001258 <calc_disp_coordinates_math>:



void calc_disp_coordinates_math(uint8_t angle, uint8_t distance, uint8_t *x, uint8_t *y, uint8_t current_position){
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	60ba      	str	r2, [r7, #8]
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	460b      	mov	r3, r1
 8001268:	73bb      	strb	r3, [r7, #14]
	float rad=angle/57.2957795;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f8fd 	bl	800046c <__aeabi_i2d>
 8001272:	a34e      	add	r3, pc, #312	; (adr r3, 80013ac <calc_disp_coordinates_math+0x154>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff fa8c 	bl	8000794 <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc34 	bl	8000af0 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	61fb      	str	r3, [r7, #28]
	float y1=sin(rad)*distance;
 800128c:	69f8      	ldr	r0, [r7, #28]
 800128e:	f7ff f8ff 	bl	8000490 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ec43 2b10 	vmov	d0, r2, r3
 800129a:	f006 fc7d 	bl	8007b98 <sin>
 800129e:	ec55 4b10 	vmov	r4, r5, d0
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8e1 	bl	800046c <__aeabi_i2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f945 	bl	8000540 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fc17 	bl	8000af0 <__aeabi_d2f>
 80012c2:	4603      	mov	r3, r0
 80012c4:	61bb      	str	r3, [r7, #24]
	float x1=sqrt(pow(distance,2)-pow(y1,2))*(LCD_WIDTH/MAX_RANGE/2);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8bf 	bl	800044c <__aeabi_ui2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	ed9f 1b33 	vldr	d1, [pc, #204]	; 80013a0 <calc_disp_coordinates_math+0x148>
 80012d6:	ec43 2b10 	vmov	d0, r2, r3
 80012da:	f006 fcb5 	bl	8007c48 <pow>
 80012de:	ec55 4b10 	vmov	r4, r5, d0
 80012e2:	69b8      	ldr	r0, [r7, #24]
 80012e4:	f7ff f8d4 	bl	8000490 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80013a0 <calc_disp_coordinates_math+0x148>
 80012f0:	ec43 2b10 	vmov	d0, r2, r3
 80012f4:	f006 fca8 	bl	8007c48 <pow>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7fe ff66 	bl	80001d0 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	ec43 2b17 	vmov	d7, r2, r3
 800130c:	eeb0 0a47 	vmov.f32	s0, s14
 8001310:	eef0 0a67 	vmov.f32	s1, s15
 8001314:	f006 fd08 	bl	8007d28 <sqrt>
 8001318:	ec51 0b10 	vmov	r0, r1, d0
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	f7fe ff58 	bl	80001d4 <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fbe0 	bl	8000af0 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	617b      	str	r3, [r7, #20]
	if(current_position<9){
 8001334:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001338:	2b08      	cmp	r3, #8
 800133a:	d80e      	bhi.n	800135a <calc_disp_coordinates_math+0x102>
		*x=LCD_WIDTH/2-x1;
 800133c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013a8 <calc_disp_coordinates_math+0x150>
 8001340:	edd7 7a05 	vldr	s15, [r7, #20]
 8001344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134c:	edc7 7a00 	vstr	s15, [r7]
 8001350:	783b      	ldrb	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e00d      	b.n	8001376 <calc_disp_coordinates_math+0x11e>
	}
	else{
		*x=LCD_WIDTH/2+x1;
 800135a:	edd7 7a05 	vldr	s15, [r7, #20]
 800135e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013a8 <calc_disp_coordinates_math+0x150>
 8001362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	edc7 7a00 	vstr	s15, [r7]
 800136e:	783b      	ldrb	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	701a      	strb	r2, [r3, #0]
	}
	*y=abs(y1*(LCD_WIDTH/MAX_RANGE/2));
 8001376:	edd7 7a06 	vldr	s15, [r7, #24]
 800137a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfb8      	it	lt
 800138a:	425b      	neglt	r3, r3
 800138c:	b2da      	uxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	701a      	strb	r2, [r3, #0]

}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40000000 	.word	0x40000000
 80013a8:	42a00000 	.word	0x42a00000
 80013ac:	1a47a9e3 	.word	0x1a47a9e3
 80013b0:	404ca5dc 	.word	0x404ca5dc

080013b4 <hagl_fill_rectangle>:
 * @param y1
 * @param color
 */
static void inline
hagl_fill_rectangle(void const *surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	817b      	strh	r3, [r7, #10]
 80013c6:	460b      	mov	r3, r1
 80013c8:	813b      	strh	r3, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
    hagl_fill_rectangle_xyxy(surface, x0, y0, x1, y1, color);
 80013ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4603      	mov	r3, r0
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f006 faef 	bl	80079ca <hagl_fill_rectangle_xyxy>
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_SPI_TxCpltCallback>:
volatile uint8_t current_position;
volatile int pulse_width=699;
volatile uint8_t distance;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_SPI_TxCpltCallback+0x1c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 8001404:	f7ff ff0c 	bl	8001220 <lcd_transfer_done>
	}
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000a094 	.word	0x2000a094

08001414 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	 if (htim == &htim6) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d11a      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x46>
		 is_max_angle_180( STEP, pulse_width, &state);
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800142a:	4619      	mov	r1, r3
 800142c:	2064      	movs	r0, #100	; 0x64
 800142e:	f000 f953 	bl	80016d8 <is_max_angle_180>
		 adjust_rotation_direction(STEP, &pulse_width, state);
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4917      	ldr	r1, [pc, #92]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800143c:	2064      	movs	r0, #100	; 0x64
 800143e:	f000 f970 	bl	8001722 <adjust_rotation_direction>
		 calc_current_position(pulse_width, &current_position);
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4916      	ldr	r1, [pc, #88]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f991 	bl	8001770 <calc_current_position>
		 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse_width);
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
	 else if(htim==&htim4){
		 uint32_t start = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
		 uint32_t stop = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
		 distance=(stop-start)/58;
	 }
}
 8001458:	e017      	b.n	800148a <HAL_TIM_PeriodElapsedCallback+0x76>
	 else if(htim==&htim4){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d113      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x76>
		 uint32_t start = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001462:	2100      	movs	r1, #0
 8001464:	4810      	ldr	r0, [pc, #64]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001466:	f004 fa97 	bl	8005998 <HAL_TIM_ReadCapturedValue>
 800146a:	60f8      	str	r0, [r7, #12]
		 uint32_t stop = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800146c:	2104      	movs	r1, #4
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001470:	f004 fa92 	bl	8005998 <HAL_TIM_ReadCapturedValue>
 8001474:	60b8      	str	r0, [r7, #8]
		 distance=(stop-start)/58;
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001488:	701a      	strb	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000a1d8 	.word	0x2000a1d8
 8001498:	20000000 	.word	0x20000000
 800149c:	2000a090 	.word	0x2000a090
 80014a0:	2000a091 	.word	0x2000a091
 80014a4:	2000a140 	.word	0x2000a140
 80014a8:	2000a18c 	.word	0x2000a18c
 80014ac:	8d3dcb09 	.word	0x8d3dcb09
 80014b0:	2000a092 	.word	0x2000a092

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ba:	f000 fdab 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014be:	f000 f8b5 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c2:	f7ff fd05 	bl	8000ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014c6:	f7ff fce5 	bl	8000e94 <MX_DMA_Init>
  MX_SPI2_Init();
 80014ca:	f000 f96b 	bl	80017a4 <MX_SPI2_Init>
  MX_TIM3_Init();
 80014ce:	f000 fab5 	bl	8001a3c <MX_TIM3_Init>
  MX_TIM6_Init();
 80014d2:	f000 fbd7 	bl	8001c84 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80014d6:	f000 fce7 	bl	8001ea8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80014da:	f000 fb27 	bl	8001b2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80014de:	f7ff fe1f 	bl	8001120 <lcd_init>
  hagl_backend_t *display=hagl_init();
 80014e2:	f005 fd75 	bl	8006fd0 <hagl_init>
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014e8:	2104      	movs	r1, #4
 80014ea:	484b      	ldr	r0, [pc, #300]	; (8001618 <main+0x164>)
 80014ec:	f003 fc56 	bl	8004d9c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80014f0:	484a      	ldr	r0, [pc, #296]	; (800161c <main+0x168>)
 80014f2:	f003 fb81 	bl	8004bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80014f6:	484a      	ldr	r0, [pc, #296]	; (8001620 <main+0x16c>)
 80014f8:	f003 fb7e 	bl	8004bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4848      	ldr	r0, [pc, #288]	; (8001620 <main+0x16c>)
 8001500:	f003 fdb4 	bl	800506c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8001504:	2104      	movs	r1, #4
 8001506:	4846      	ldr	r0, [pc, #280]	; (8001620 <main+0x16c>)
 8001508:	f003 fdb0 	bl	800506c <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800150c:	2108      	movs	r1, #8
 800150e:	4844      	ldr	r0, [pc, #272]	; (8001620 <main+0x16c>)
 8001510:	f003 fc44 	bl	8004d9c <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8001514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001518:	f000 fdf8 	bl	800210c <HAL_Delay>


  hagl_fill_rectangle(display, 0, 0, 160, 128, BLACK);
 800151c:	2300      	movs	r3, #0
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	23a0      	movs	r3, #160	; 0xa0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff42 	bl	80013b4 <hagl_fill_rectangle>
  hagl_draw_circle(display,80 ,0, 64, RED);
 8001530:	23f8      	movs	r3, #248	; 0xf8
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2340      	movs	r3, #64	; 0x40
 8001536:	2200      	movs	r2, #0
 8001538:	2150      	movs	r1, #80	; 0x50
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f005 fd88 	bl	8007050 <hagl_draw_circle>
  hagl_draw_circle(display,80 ,0, 120, RED);
 8001540:	23f8      	movs	r3, #248	; 0xf8
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2378      	movs	r3, #120	; 0x78
 8001546:	2200      	movs	r2, #0
 8001548:	2150      	movs	r1, #80	; 0x50
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f005 fd80 	bl	8007050 <hagl_draw_circle>
  lcd_copy();
 8001550:	f7ff fe40 	bl	80011d4 <lcd_copy>
  HAL_Delay(300);
 8001554:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001558:	f000 fdd8 	bl	800210c <HAL_Delay>
  uint8_t y;

  while (1)
  {

	  if(distance>0 && distance<MAX_RANGE){
 800155c:	4b31      	ldr	r3, [pc, #196]	; (8001624 <main+0x170>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02b      	beq.n	80015be <main+0x10a>
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <main+0x170>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b1d      	cmp	r3, #29
 800156e:	d826      	bhi.n	80015be <main+0x10a>
		  calc_disp_coordinates_math(current_position*10,distance, &x, &y, current_position);
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <main+0x174>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4413      	add	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	b2d8      	uxtb	r0, r3
 8001580:	4b28      	ldr	r3, [pc, #160]	; (8001624 <main+0x170>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2d9      	uxtb	r1, r3
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <main+0x174>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	1cbc      	adds	r4, r7, #2
 800158e:	1cfa      	adds	r2, r7, #3
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	f7ff fe60 	bl	8001258 <calc_disp_coordinates_math>
		  hagl_fill_circle(display,x ,y, 2, GREEN);
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	b219      	sxth	r1, r3
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	f24e 0307 	movw	r3, #57351	; 0xe007
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2302      	movs	r3, #2
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 fe84 	bl	80072b6 <hagl_fill_circle>

		  lcd_copy();
 80015ae:	f7ff fe11 	bl	80011d4 <lcd_copy>
		  while (lcd_is_busy()) {}
 80015b2:	bf00      	nop
 80015b4:	f7ff fe40 	bl	8001238 <lcd_is_busy>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1fa      	bne.n	80015b4 <main+0x100>
	  }
	  if((current_position==18)||(current_position==0)){
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <main+0x174>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d004      	beq.n	80015d2 <main+0x11e>
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <main+0x174>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1c4      	bne.n	800155c <main+0xa8>
	  	  hagl_fill_rectangle(display, 0, 0, 160, 128, BLACK);
 80015d2:	2300      	movs	r3, #0
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fee7 	bl	80013b4 <hagl_fill_rectangle>
	  	  hagl_draw_circle(display,80 ,0, 64, RED);
 80015e6:	23f8      	movs	r3, #248	; 0xf8
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	2150      	movs	r1, #80	; 0x50
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f005 fd2d 	bl	8007050 <hagl_draw_circle>
	  	  hagl_draw_circle(display,80 ,0, 128, RED);
 80015f6:	23f8      	movs	r3, #248	; 0xf8
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	2200      	movs	r2, #0
 80015fe:	2150      	movs	r1, #80	; 0x50
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f005 fd25 	bl	8007050 <hagl_draw_circle>

	  	  lcd_copy();
 8001606:	f7ff fde5 	bl	80011d4 <lcd_copy>
	  	  while (lcd_is_busy()) {}
 800160a:	bf00      	nop
 800160c:	f7ff fe14 	bl	8001238 <lcd_is_busy>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1fa      	bne.n	800160c <main+0x158>
	  if(distance>0 && distance<MAX_RANGE){
 8001616:	e7a1      	b.n	800155c <main+0xa8>
 8001618:	2000a140 	.word	0x2000a140
 800161c:	2000a1d8 	.word	0x2000a1d8
 8001620:	2000a18c 	.word	0x2000a18c
 8001624:	2000a092 	.word	0x2000a092
 8001628:	2000a091 	.word	0x2000a091

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b096      	sub	sp, #88	; 0x58
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	2244      	movs	r2, #68	; 0x44
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f006 faa4 	bl	8007b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800164e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001652:	f001 fa59 	bl	8002b08 <HAL_PWREx_ControlVoltageScaling>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800165c:	f000 f837 	bl	80016ce <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800166a:	2310      	movs	r3, #16
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001672:	2302      	movs	r3, #2
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800167a:	230a      	movs	r3, #10
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800167e:	2307      	movs	r3, #7
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4618      	mov	r0, r3
 8001690:	f001 fa90 	bl	8002bb4 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800169a:	f000 f818 	bl	80016ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	230f      	movs	r3, #15
 80016a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2303      	movs	r3, #3
 80016a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	2104      	movs	r1, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fe58 	bl	800336c <HAL_RCC_ClockConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016c2:	f000 f804 	bl	80016ce <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3758      	adds	r7, #88	; 0x58
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d2:	b672      	cpsid	i
}
 80016d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <Error_Handler+0x8>

080016d8 <is_max_angle_180>:

#include "servo.h"


bool is_max_angle_180(uint8_t i, volatile int pulse_width, volatile bool *state){
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	73fb      	strb	r3, [r7, #15]
	if(pulse_width>2400){
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80016ec:	dd04      	ble.n	80016f8 <is_max_angle_180+0x20>
		i=20;
 80016ee:	2314      	movs	r3, #20
 80016f0:	73fb      	strb	r3, [r7, #15]
		*state=true;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
	}
	if(pulse_width<700){
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80016fe:	da04      	bge.n	800170a <is_max_angle_180+0x32>
		i=20;
 8001700:	2314      	movs	r3, #20
 8001702:	73fb      	strb	r3, [r7, #15]
		*state=false;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	}
	return state;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <adjust_rotation_direction>:

void adjust_rotation_direction(uint8_t i, volatile int *pulse_width, volatile bool state){
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	6039      	str	r1, [r7, #0]
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4613      	mov	r3, r2
 8001730:	71bb      	strb	r3, [r7, #6]
	if(state){
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <adjust_rotation_direction+0x26>
		*pulse_width-=i;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]
	}
	else if(!state){
		*pulse_width+=i;
	}
}
 8001746:	e00c      	b.n	8001762 <adjust_rotation_direction+0x40>
	else if(!state){
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <adjust_rotation_direction+0x40>
		*pulse_width+=i;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	441a      	add	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <calc_current_position>:

void calc_current_position(volatile int pulse_width, volatile uint8_t *current_position){
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	*current_position=(pulse_width-699)/100;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f2a3 23bb 	subw	r3, r3, #699	; 0x2bb
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <calc_current_position+0x30>)
 8001782:	fb82 1203 	smull	r1, r2, r2, r3
 8001786:	1152      	asrs	r2, r2, #5
 8001788:	17db      	asrs	r3, r3, #31
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b2da      	uxtb	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	51eb851f 	.word	0x51eb851f

080017a4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_SPI2_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <MX_SPI2_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_SPI2_Init+0x74>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_SPI2_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI2_Init+0x74>)
 80017be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_SPI2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI2_Init+0x74>)
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI2_Init+0x74>)
 80017da:	2210      	movs	r2, #16
 80017dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_SPI2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI2_Init+0x74>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_SPI2_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI2_Init+0x74>)
 80017fe:	2208      	movs	r2, #8
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_SPI2_Init+0x74>)
 8001804:	f002 fc92 	bl	800412c <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800180e:	f7ff ff5e 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000a094 	.word	0x2000a094
 800181c:	40003800 	.word	0x40003800

08001820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3a      	ldr	r2, [pc, #232]	; (8001928 <HAL_SPI_MspInit+0x108>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d16d      	bne.n	800191e <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_SPI_MspInit+0x10c>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a2d      	ldr	r2, [pc, #180]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_SPI_MspInit+0x10c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800188a:	2308      	movs	r3, #8
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800189a:	2305      	movs	r3, #5
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4822      	ldr	r0, [pc, #136]	; (8001930 <HAL_SPI_MspInit+0x110>)
 80018a6:	f000 ff5f 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018bc:	2305      	movs	r3, #5
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	481b      	ldr	r0, [pc, #108]	; (8001934 <HAL_SPI_MspInit+0x114>)
 80018c8:	f000 ff4e 	bl	8002768 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018ce:	4a1b      	ldr	r2, [pc, #108]	; (800193c <HAL_SPI_MspInit+0x11c>)
 80018d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018da:	2210      	movs	r2, #16
 80018dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_SPI_MspInit+0x118>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <HAL_SPI_MspInit+0x118>)
 8001904:	f000 fd38 	bl	8002378 <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 800190e:	f7ff fede 	bl	80016ce <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_SPI_MspInit+0x118>)
 8001916:	655a      	str	r2, [r3, #84]	; 0x54
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_SPI_MspInit+0x118>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40003800 	.word	0x40003800
 800192c:	40021000 	.word	0x40021000
 8001930:	48000800 	.word	0x48000800
 8001934:	48000400 	.word	0x48000400
 8001938:	2000a0f8 	.word	0x2000a0f8
 800193c:	40020058 	.word	0x40020058

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 fb7a 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA1_Channel5_IRQHandler+0x10>)
 80019e2:	f000 fde1 	bl	80025a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000a0f8 	.word	0x2000a0f8

080019f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM4_IRQHandler+0x10>)
 80019f6:	f003 fc35 	bl	8005264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000a18c 	.word	0x2000a18c

08001a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM6_DAC_IRQHandler+0x10>)
 8001a0a:	f003 fc2b 	bl	8005264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000a1d8 	.word	0x2000a1d8

08001a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	; 0x38
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a70:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <MX_TIM3_Init+0xec>)
 8001a72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a76:	224f      	movs	r2, #79	; 0x4f
 8001a78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a82:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a94:	4823      	ldr	r0, [pc, #140]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001a96:	f003 f857 	bl	8004b48 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001aa0:	f7ff fe15 	bl	80016ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481c      	ldr	r0, [pc, #112]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001ab2:	f003 fea7 	bl	8005804 <HAL_TIM_ConfigClockSource>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001abc:	f7ff fe07 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ac0:	4818      	ldr	r0, [pc, #96]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001ac2:	f003 f909 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001acc:	f7ff fdff 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4811      	ldr	r0, [pc, #68]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001ae0:	f004 fd1a 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aea:	f7ff fdf0 	bl	80016ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aee:	2360      	movs	r3, #96	; 0x60
 8001af0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	2204      	movs	r2, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001b08:	f003 fd68 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001b12:	f7ff fddc 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM3_Init+0xe8>)
 8001b18:	f000 f968 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001b1c:	bf00      	nop
 8001b1e:	3738      	adds	r7, #56	; 0x38
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000a140 	.word	0x2000a140
 8001b28:	40000400 	.word	0x40000400

08001b2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b092      	sub	sp, #72	; 0x48
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	615a      	str	r2, [r3, #20]
 8001b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b6c:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b6e:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <MX_TIM4_Init+0x154>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b74:	224f      	movs	r2, #79	; 0x4f
 8001b76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b80:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b92:	483a      	ldr	r0, [pc, #232]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001b94:	f002 ffd8 	bl	8004b48 <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001b9e:	f7ff fd96 	bl	80016ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bac:	4619      	mov	r1, r3
 8001bae:	4833      	ldr	r0, [pc, #204]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001bb0:	f003 fe28 	bl	8005804 <HAL_TIM_ConfigClockSource>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bba:	f7ff fd88 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bbe:	482f      	ldr	r0, [pc, #188]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001bc0:	f003 f9f2 	bl	8004fa8 <HAL_TIM_IC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001bca:	f7ff fd80 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bce:	482b      	ldr	r0, [pc, #172]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001bd0:	f003 f882 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001bda:	f7ff fd78 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	4823      	ldr	r0, [pc, #140]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001bee:	f004 fc93 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001bf8:	f7ff fd69 	bl	80016ce <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 15;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2200      	movs	r2, #0
 8001c12:	4619      	mov	r1, r3
 8001c14:	4819      	ldr	r0, [pc, #100]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001c16:	f003 fc44 	bl	80054a2 <HAL_TIM_IC_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8001c20:	f7ff fd55 	bl	80016ce <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICFilter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	2204      	movs	r2, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4810      	ldr	r0, [pc, #64]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001c3a:	f003 fc32 	bl	80054a2 <HAL_TIM_IC_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001c44:	f7ff fd43 	bl	80016ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c48:	2360      	movs	r3, #96	; 0x60
 8001c4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001c60:	f003 fcbc 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM4_Init+0x142>
  {
    Error_Handler();
 8001c6a:	f7ff fd30 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c6e:	4803      	ldr	r0, [pc, #12]	; (8001c7c <MX_TIM4_Init+0x150>)
 8001c70:	f000 f8bc 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001c74:	bf00      	nop
 8001c76:	3748      	adds	r7, #72	; 0x48
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000a18c 	.word	0x2000a18c
 8001c80:	40000800 	.word	0x40000800

08001c84 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_TIM6_Init+0x68>)
 8001c96:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <MX_TIM6_Init+0x6c>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_TIM6_Init+0x68>)
 8001c9c:	f240 321f 	movw	r2, #799	; 0x31f
 8001ca0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_TIM6_Init+0x68>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_TIM6_Init+0x68>)
 8001caa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_TIM6_Init+0x68>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_TIM6_Init+0x68>)
 8001cb8:	f002 ff46 	bl	8004b48 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001cc2:	f7ff fd04 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <MX_TIM6_Init+0x68>)
 8001cd4:	f004 fc20 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001cde:	f7ff fcf6 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000a1d8 	.word	0x2000a1d8
 8001cf0:	40001000 	.word	0x40001000

08001cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <HAL_TIM_Base_MspInit+0xe4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10c      	bne.n	8001d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d2e:	e04e      	b.n	8001dce <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_TIM_Base_MspInit+0xec>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d130      	bne.n	8001d9c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d6a:	2340      	movs	r3, #64	; 0x40
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4817      	ldr	r0, [pc, #92]	; (8001de4 <HAL_TIM_Base_MspInit+0xf0>)
 8001d86:	f000 fcef 	bl	8002768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 10, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	210a      	movs	r1, #10
 8001d8e:	201e      	movs	r0, #30
 8001d90:	f000 fabb 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d94:	201e      	movs	r0, #30
 8001d96:	f000 fad4 	bl	8002342 <HAL_NVIC_EnableIRQ>
}
 8001d9a:	e018      	b.n	8001dce <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM6)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_TIM_Base_MspInit+0xf4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d113      	bne.n	8001dce <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	6593      	str	r3, [r2, #88]	; 0x58
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_Base_MspInit+0xe8>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 9, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2109      	movs	r1, #9
 8001dc2:	2036      	movs	r0, #54	; 0x36
 8001dc4:	f000 faa1 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc8:	2036      	movs	r0, #54	; 0x36
 8001dca:	f000 faba 	bl	8002342 <HAL_NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3730      	adds	r7, #48	; 0x30
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40000800 	.word	0x40000800
 8001de4:	48000400 	.word	0x48000400
 8001de8:	40001000 	.word	0x40001000

08001dec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_TIM_MspPostInit+0xac>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11d      	bne.n	8001e4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e36:	2302      	movs	r3, #2
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e44:	f000 fc90 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e48:	e021      	b.n	8001e8e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_TIM_MspPostInit+0xb4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d11c      	bne.n	8001e8e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <HAL_TIM_MspPostInit+0xb8>)
 8001e8a:	f000 fc6d 	bl	8002768 <HAL_GPIO_Init>
}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <MX_USART2_UART_Init+0x5c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eec:	f004 fbba 	bl	8006664 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f7ff fbea 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000a224 	.word	0x2000a224
 8001f04:	40004400 	.word	0x40004400

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0ac      	sub	sp, #176	; 0xb0
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2288      	movs	r2, #136	; 0x88
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 fe2d 	bl	8007b88 <memset>
  if(uartHandle->Instance==USART2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_UART_MspInit+0xb0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d13b      	bne.n	8001fb0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fc35 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f50:	f7ff fbbd 	bl	80016ce <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_UART_MspInit+0xb4>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_UART_MspInit+0xb4>)
 8001f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_UART_MspInit+0xb4>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_UART_MspInit+0xb4>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_UART_MspInit+0xb4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_UART_MspInit+0xb4>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f84:	230c      	movs	r3, #12
 8001f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f000 fbdc 	bl	8002768 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	37b0      	adds	r7, #176	; 0xb0
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40004400 	.word	0x40004400
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc4:	f7ff fd28 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <LoopForever+0xe>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	; (800200c <LoopForever+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f005 fda7 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ff2:	f7ff fa5f 	bl	80014b4 <main>

08001ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ff6:	e7fe      	b.n	8001ff6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002004:	08009d18 	.word	0x08009d18
  ldr r2, =_sbss
 8002008:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800200c:	2000a2e8 	.word	0x2000a2e8

08002010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC1_2_IRQHandler>
	...

08002014 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_Init+0x3c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <HAL_Init+0x3c>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202a:	2003      	movs	r0, #3
 800202c:	f000 f962 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f80f 	bl	8002054 <HAL_InitTick>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	e001      	b.n	8002046 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002042:	f7ff fc7d 	bl	8001940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002046:	79fb      	ldrb	r3, [r7, #7]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40022000 	.word	0x40022000

08002054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_InitTick+0x6c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_InitTick+0x70>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_InitTick+0x6c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	fbb3 f3f1 	udiv	r3, r3, r1
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f96d 	bl	800235e <HAL_SYSTICK_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d809      	bhi.n	80020a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f937 	bl	800230a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_InitTick+0x74>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e007      	b.n	80020b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e004      	b.n	80020b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e001      	b.n	80020b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000004 	.word	0x20000004
 80020c8:	20000008 	.word	0x20000008

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000000c 	.word	0x2000000c
 80020f0:	2000a2a8 	.word	0x2000a2a8

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000a2a8 	.word	0x2000a2a8

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000000c 	.word	0x2000000c

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e098      	b.n	80024bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_DMA_Init+0x150>)
 8002392:	429a      	cmp	r2, r3
 8002394:	d80f      	bhi.n	80023b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_DMA_Init+0x154>)
 800239e:	4413      	add	r3, r2
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_DMA_Init+0x158>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	009a      	lsls	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <HAL_DMA_Init+0x15c>)
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
 80023b4:	e00e      	b.n	80023d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_DMA_Init+0x160>)
 80023be:	4413      	add	r3, r2
 80023c0:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <HAL_DMA_Init+0x158>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_DMA_Init+0x164>)
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800242e:	d039      	beq.n	80024a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_DMA_Init+0x15c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11a      	bne.n	8002470 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <HAL_DMA_Init+0x168>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f003 031c 	and.w	r3, r3, #28
 8002446:	210f      	movs	r1, #15
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	4924      	ldr	r1, [pc, #144]	; (80024e0 <HAL_DMA_Init+0x168>)
 8002450:	4013      	ands	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002454:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <HAL_DMA_Init+0x168>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 031c 	and.w	r3, r3, #28
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	491d      	ldr	r1, [pc, #116]	; (80024e0 <HAL_DMA_Init+0x168>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
 800246e:	e019      	b.n	80024a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_DMA_Init+0x16c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f003 031c 	and.w	r3, r3, #28
 800247c:	210f      	movs	r1, #15
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	4917      	ldr	r1, [pc, #92]	; (80024e4 <HAL_DMA_Init+0x16c>)
 8002486:	4013      	ands	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_DMA_Init+0x16c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 031c 	and.w	r3, r3, #28
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	4911      	ldr	r1, [pc, #68]	; (80024e4 <HAL_DMA_Init+0x16c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40020407 	.word	0x40020407
 80024cc:	bffdfff8 	.word	0xbffdfff8
 80024d0:	cccccccd 	.word	0xcccccccd
 80024d4:	40020000 	.word	0x40020000
 80024d8:	bffdfbf8 	.word	0xbffdfbf8
 80024dc:	40020400 	.word	0x40020400
 80024e0:	400200a8 	.word	0x400200a8
 80024e4:	400204a8 	.word	0x400204a8

080024e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_DMA_Start_IT+0x20>
 8002504:	2302      	movs	r3, #2
 8002506:	e04b      	b.n	80025a0 <HAL_DMA_Start_IT+0xb8>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d13a      	bne.n	8002592 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f8e0 	bl	8002706 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 020e 	orr.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e00f      	b.n	8002580 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 020a 	orr.w	r2, r2, #10
 800257e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e005      	b.n	800259e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800259e:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f003 031c 	and.w	r3, r3, #28
 80025c8:	2204      	movs	r2, #4
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d026      	beq.n	8002622 <HAL_DMA_IRQHandler+0x7a>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d021      	beq.n	8002622 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f003 021c 	and.w	r2, r3, #28
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2104      	movs	r1, #4
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	2b00      	cmp	r3, #0
 8002616:	d071      	beq.n	80026fc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002620:	e06c      	b.n	80026fc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f003 031c 	and.w	r3, r3, #28
 800262a:	2202      	movs	r2, #2
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d02e      	beq.n	8002694 <HAL_DMA_IRQHandler+0xec>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d029      	beq.n	8002694 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 020a 	bic.w	r2, r2, #10
 800265c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 021c 	and.w	r2, r3, #28
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2102      	movs	r1, #2
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d038      	beq.n	80026fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002692:	e033      	b.n	80026fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f003 031c 	and.w	r3, r3, #28
 800269c:	2208      	movs	r2, #8
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d02a      	beq.n	80026fe <HAL_DMA_IRQHandler+0x156>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d025      	beq.n	80026fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 020e 	bic.w	r2, r2, #14
 80026c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f003 021c 	and.w	r2, r3, #28
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
}
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f003 021c 	and.w	r2, r3, #28
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b10      	cmp	r3, #16
 8002736:	d108      	bne.n	800274a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002748:	e007      	b.n	800275a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	60da      	str	r2, [r3, #12]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	e17f      	b.n	8002a78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	4013      	ands	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8171 	beq.w	8002a72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d005      	beq.n	80027a8 <HAL_GPIO_Init+0x40>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d130      	bne.n	800280a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027de:	2201      	movs	r2, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0201 	and.w	r2, r3, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b03      	cmp	r3, #3
 8002814:	d118      	bne.n	8002848 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d017      	beq.n	8002884 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	6939      	ldr	r1, [r7, #16]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80ac 	beq.w	8002a72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_GPIO_Init+0x330>)
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <HAL_GPIO_Init+0x330>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6613      	str	r3, [r2, #96]	; 0x60
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_GPIO_Init+0x330>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002932:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <HAL_GPIO_Init+0x334>)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800295c:	d025      	beq.n	80029aa <HAL_GPIO_Init+0x242>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4f      	ldr	r2, [pc, #316]	; (8002aa0 <HAL_GPIO_Init+0x338>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <HAL_GPIO_Init+0x23e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4e      	ldr	r2, [pc, #312]	; (8002aa4 <HAL_GPIO_Init+0x33c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x23a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4d      	ldr	r2, [pc, #308]	; (8002aa8 <HAL_GPIO_Init+0x340>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x236>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4c      	ldr	r2, [pc, #304]	; (8002aac <HAL_GPIO_Init+0x344>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x232>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4b      	ldr	r2, [pc, #300]	; (8002ab0 <HAL_GPIO_Init+0x348>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x22e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4a      	ldr	r2, [pc, #296]	; (8002ab4 <HAL_GPIO_Init+0x34c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x22a>
 800298e:	2306      	movs	r3, #6
 8002990:	e00c      	b.n	80029ac <HAL_GPIO_Init+0x244>
 8002992:	2307      	movs	r3, #7
 8002994:	e00a      	b.n	80029ac <HAL_GPIO_Init+0x244>
 8002996:	2305      	movs	r3, #5
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x244>
 800299a:	2304      	movs	r3, #4
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x244>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x244>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x244>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x244>
 80029aa:	2300      	movs	r3, #0
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029bc:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_GPIO_Init+0x334>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029ee:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a42:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a6c:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <HAL_GPIO_Init+0x350>)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f47f ae78 	bne.w	8002778 <HAL_GPIO_Init+0x10>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	48000400 	.word	0x48000400
 8002aa4:	48000800 	.word	0x48000800
 8002aa8:	48000c00 	.word	0x48000c00
 8002aac:	48001000 	.word	0x48001000
 8002ab0:	48001400 	.word	0x48001400
 8002ab4:	48001800 	.word	0x48001800
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad8:	e002      	b.n	8002ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_PWREx_GetVoltageRange+0x18>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40007000 	.word	0x40007000

08002b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b16:	d130      	bne.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b24:	d038      	beq.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2232      	movs	r2, #50	; 0x32
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b4c:	e002      	b.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b60:	d102      	bne.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f2      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b74:	d110      	bne.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e00f      	b.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d007      	beq.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b90:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	431bde83 	.word	0x431bde83

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e3ca      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	4b97      	ldr	r3, [pc, #604]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80e4 	beq.w	8002db0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4a>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	f040 808b 	bne.w	8002d0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 8087 	bne.w	8002d0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e3a2      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_RCC_OscConfig+0x7c>
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_OscConfig+0x88>
 8002c30:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d223      	bcs.n	8002c88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fd55 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e383      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c54:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a72      	ldr	r2, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	496d      	ldr	r1, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c72:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	4968      	ldr	r1, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
 8002c86:	e025      	b.n	8002cd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c88:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a65      	ldr	r2, [pc, #404]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4960      	ldr	r1, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca6:	4b5f      	ldr	r3, [pc, #380]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	495b      	ldr	r1, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fd15 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e343      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd4:	f000 fc4a 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4950      	ldr	r1, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	4a4e      	ldr	r2, [pc, #312]	; (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f9ab 	bl	8002054 <HAL_InitTick>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d052      	beq.n	8002dae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	e327      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d032      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f9e8 	bl	80020f4 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d28:	f7ff f9e4 	bl	80020f4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e310      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4931      	ldr	r1, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	492c      	ldr	r1, [pc, #176]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e01a      	b.n	8002db0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d86:	f7ff f9b5 	bl	80020f4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8e:	f7ff f9b1 	bl	80020f4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e2dd      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x1da>
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d074      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d005      	beq.n	8002dce <HAL_RCC_OscConfig+0x21a>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d10e      	bne.n	8002de6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d064      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d160      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e2ba      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x24a>
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e026      	b.n	8002e4c <HAL_RCC_OscConfig+0x298>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e06:	d115      	bne.n	8002e34 <HAL_RCC_OscConfig+0x280>
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e014      	b.n	8002e4c <HAL_RCC_OscConfig+0x298>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08009a58 	.word	0x08009a58
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	20000008 	.word	0x20000008
 8002e34:	4ba0      	ldr	r3, [pc, #640]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a9f      	ldr	r2, [pc, #636]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b9d      	ldr	r3, [pc, #628]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a9c      	ldr	r2, [pc, #624]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7ff f94e 	bl	80020f4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7ff f94a 	bl	80020f4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e276      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6e:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2a8>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f93a 	bl	80020f4 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7ff f936 	bl	80020f4 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e262      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d0>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d060      	beq.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x310>
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d119      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d116      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec4:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_OscConfig+0x328>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e23f      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	4973      	ldr	r1, [pc, #460]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef0:	e040      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efa:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7ff f8f5 	bl	80020f4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7ff f8f1 	bl	80020f4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e21d      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f20:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	495f      	ldr	r1, [pc, #380]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	e018      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7ff f8d1 	bl	80020f4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f56:	f7ff f8cd 	bl	80020f4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1f9      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7ff f8ac 	bl	80020f4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7ff f8a8 	bl	80020f4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1d4      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x3ec>
 8002fc0:	e01b      	b.n	8002ffa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7ff f88f 	bl	80020f4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fda:	f7ff f88b 	bl	80020f4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1b7      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ef      	bne.n	8002fda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a6 	beq.w	8003154 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10d      	bne.n	8003034 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003030:	2301      	movs	r3, #1
 8003032:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d118      	bne.n	8003072 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304c:	f7ff f852 	bl	80020f4 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7ff f84e 	bl	80020f4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e17a      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <HAL_RCC_OscConfig+0x4d8>
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308a:	e029      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d115      	bne.n	80030c0 <HAL_RCC_OscConfig+0x50c>
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
 80030c0:	4b9c      	ldr	r3, [pc, #624]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	4a9b      	ldr	r2, [pc, #620]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d0:	4b98      	ldr	r3, [pc, #608]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	4a97      	ldr	r2, [pc, #604]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7ff f804 	bl	80020f4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7ff f800 	bl	80020f4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e12a      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ed      	beq.n	80030f0 <HAL_RCC_OscConfig+0x53c>
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7fe ffed 	bl	80020f4 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe ffe9 	bl	80020f4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e113      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003134:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ed      	bne.n	800311e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b7a      	ldr	r3, [pc, #488]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a79      	ldr	r2, [pc, #484]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800314e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80fe 	beq.w	800335a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	2b02      	cmp	r3, #2
 8003164:	f040 80d0 	bne.w	8003308 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003168:	4b72      	ldr	r3, [pc, #456]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	429a      	cmp	r2, r3
 800317a:	d130      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	3b01      	subs	r3, #1
 8003188:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d127      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d11f      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a8:	2a07      	cmp	r2, #7
 80031aa:	bf14      	ite	ne
 80031ac:	2201      	movne	r2, #1
 80031ae:	2200      	moveq	r2, #0
 80031b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d109      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d06e      	beq.n	80032bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d069      	beq.n	80032b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ad      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800320c:	f7fe ff72 	bl	80020f4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe ff6e 	bl	80020f4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e09a      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_RCC_OscConfig+0x784>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003242:	3a01      	subs	r2, #1
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800324c:	0212      	lsls	r2, r2, #8
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0552      	lsls	r2, r2, #21
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003260:	0852      	lsrs	r2, r2, #1
 8003262:	3a01      	subs	r2, #1
 8003264:	0652      	lsls	r2, r2, #25
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326c:	0912      	lsrs	r2, r2, #4
 800326e:	0452      	lsls	r2, r2, #17
 8003270:	430a      	orrs	r2, r1
 8003272:	4930      	ldr	r1, [pc, #192]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003278:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003284:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003290:	f7fe ff30 	bl	80020f4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe ff2c 	bl	80020f4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e058      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032b6:	e050      	b.n	800335a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04f      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d148      	bne.n	800335a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e0:	f7fe ff08 	bl	80020f4 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe ff04 	bl	80020f4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e030      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x734>
 8003306:	e028      	b.n	800335a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d023      	beq.n	8003356 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe feeb 	bl	80020f4 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	e00c      	b.n	800333c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe fee7 	bl	80020f4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d905      	bls.n	800333c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e013      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
 8003334:	40021000 	.word	0x40021000
 8003338:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_OscConfig+0x7b0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ec      	bne.n	8003322 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_RCC_OscConfig+0x7b0>)
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	4905      	ldr	r1, [pc, #20]	; (8003364 <HAL_RCC_OscConfig+0x7b0>)
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x7b4>)
 8003350:	4013      	ands	r3, r2
 8003352:	60cb      	str	r3, [r1, #12]
 8003354:	e001      	b.n	800335a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	feeefffc 	.word	0xfeeefffc

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0e7      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b75      	ldr	r3, [pc, #468]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d910      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b72      	ldr	r3, [pc, #456]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4970      	ldr	r1, [pc, #448]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b6e      	ldr	r3, [pc, #440]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cf      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d908      	bls.n	80033de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4960      	ldr	r1, [pc, #384]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04c      	beq.n	8003484 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d121      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0a6      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e09a      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003422:	4b4e      	ldr	r3, [pc, #312]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e08e      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e086      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4943      	ldr	r1, [pc, #268]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003454:	f7fe fe4e 	bl	80020f4 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe fe4a 	bl	80020f4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e06e      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d010      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349c:	429a      	cmp	r2, r3
 800349e:	d208      	bcs.n	80034b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d210      	bcs.n	80034e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 0207 	bic.w	r2, r3, #7
 80034c8:	4923      	ldr	r1, [pc, #140]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e036      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4918      	ldr	r1, [pc, #96]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4910      	ldr	r1, [pc, #64]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003520:	f000 f824 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	490b      	ldr	r1, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1f4>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1f8>)
 800353e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1fc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fd85 	bl	8002054 <HAL_InitTick>
 800354a:	4603      	mov	r3, r0
 800354c:	72fb      	strb	r3, [r7, #11]

  return status;
 800354e:	7afb      	ldrb	r3, [r7, #11]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	08009a58 	.word	0x08009a58
 8003564:	20000004 	.word	0x20000004
 8003568:	20000008 	.word	0x20000008

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357a:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d121      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11e      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e005      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d102      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_GetSysClockFreq+0x110>)
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e004      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_RCC_GetSysClockFreq+0x114>)
 80035f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d134      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0xa6>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d003      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xac>
 8003610:	e005      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_GetSysClockFreq+0x110>)
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	e005      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_GetSysClockFreq+0x114>)
 800361a:	617b      	str	r3, [r7, #20]
      break;
 800361c:	e002      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	617b      	str	r3, [r7, #20]
      break;
 8003622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	0e5b      	lsrs	r3, r3, #25
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	3301      	adds	r3, #1
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003664:	69bb      	ldr	r3, [r7, #24]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	08009a70 	.word	0x08009a70
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08009a68 	.word	0x08009a68

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036cc:	f7ff ffda 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0adb      	lsrs	r3, r3, #11
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08009a68 	.word	0x08009a68

080036f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800370c:	f7ff f9ee 	bl	8002aec <HAL_PWREx_GetVoltageRange>
 8003710:	6178      	str	r0, [r7, #20]
 8003712:	e014      	b.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800372c:	f7ff f9de 	bl	8002aec <HAL_PWREx_GetVoltageRange>
 8003730:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d10b      	bne.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d919      	bls.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2ba0      	cmp	r3, #160	; 0xa0
 8003750:	d902      	bls.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003752:	2302      	movs	r3, #2
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e013      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003758:	2301      	movs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e010      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d902      	bls.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003764:	2303      	movs	r3, #3
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e00a      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d102      	bne.n	8003776 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003770:	2302      	movs	r3, #2
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	e004      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b70      	cmp	r3, #112	; 0x70
 800377a:	d101      	bne.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800377c:	2301      	movs	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4909      	ldr	r1, [pc, #36]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40022000 	.word	0x40022000

080037b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037bc:	2300      	movs	r3, #0
 80037be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c0:	2300      	movs	r3, #0
 80037c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d041      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d8:	d02a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037de:	d824      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ea:	d81e      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f4:	d010      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037f6:	e018      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f8:	4b86      	ldr	r3, [pc, #536]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a85      	ldr	r2, [pc, #532]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003802:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003804:	e015      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fabb 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003816:	e00c      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fba6 	bl	8003f70 <RCCEx_PLLSAI2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	74fb      	strb	r3, [r7, #19]
      break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003838:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	4973      	ldr	r1, [pc, #460]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800384e:	e001      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d041      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003868:	d02a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800386a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800386e:	d824      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387a:	d81e      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d010      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003886:	e018      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003888:	4b62      	ldr	r3, [pc, #392]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a61      	ldr	r2, [pc, #388]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003894:	e015      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fa73 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a6:	e00c      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3320      	adds	r3, #32
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fb5e 	bl	8003f70 <RCCEx_PLLSAI2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b8:	e003      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	74fb      	strb	r3, [r7, #19]
      break;
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d6:	494f      	ldr	r1, [pc, #316]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038de:	e001      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a0 	beq.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	6593      	str	r3, [r2, #88]	; 0x58
 8003918:	4b3e      	ldr	r3, [pc, #248]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003924:	2301      	movs	r3, #1
 8003926:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003934:	f7fe fbde 	bl	80020f4 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800393a:	e009      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393c:	f7fe fbda 	bl	80020f4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	74fb      	strb	r3, [r7, #19]
        break;
 800394e:	e005      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ef      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d15c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01f      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	d019      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe fb99 	bl	80020f4 <HAL_GetTick>
 80039c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c4:	e00b      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fe fb95 	bl	80020f4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d902      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	74fb      	strb	r3, [r7, #19]
            break;
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ec      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	4904      	ldr	r1, [pc, #16]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a0a:	e009      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a20:	7c7b      	ldrb	r3, [r7, #17]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	4a9d      	ldr	r2, [pc, #628]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a3e:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 0203 	bic.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	4994      	ldr	r1, [pc, #592]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a60:	4b8f      	ldr	r3, [pc, #572]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 020c 	bic.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	498c      	ldr	r1, [pc, #560]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a82:	4b87      	ldr	r3, [pc, #540]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	4983      	ldr	r1, [pc, #524]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aa4:	4b7e      	ldr	r3, [pc, #504]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	497b      	ldr	r1, [pc, #492]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	4972      	ldr	r1, [pc, #456]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ae8:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	496a      	ldr	r1, [pc, #424]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	4961      	ldr	r1, [pc, #388]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	4959      	ldr	r1, [pc, #356]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4e:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	4950      	ldr	r1, [pc, #320]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b70:	4b4b      	ldr	r3, [pc, #300]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	4948      	ldr	r1, [pc, #288]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	493f      	ldr	r1, [pc, #252]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d028      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	4937      	ldr	r1, [pc, #220]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bde:	60d3      	str	r3, [r2, #12]
 8003be0:	e011      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f8c8 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d028      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c30:	d106      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3c:	60d3      	str	r3, [r2, #12]
 8003c3e:	e011      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f899 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d02b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8e:	d109      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a02      	ldr	r2, [pc, #8]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9a:	60d3      	str	r3, [r2, #12]
 8003c9c:	e014      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f867 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02f      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce2:	4928      	ldr	r1, [pc, #160]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f844 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	74bb      	strb	r3, [r7, #18]
 8003d0e:	e011      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3320      	adds	r3, #32
 8003d1e:	2102      	movs	r1, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 f925 	bl	8003f70 <RCCEx_PLLSAI2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d30:	7cfb      	ldrb	r3, [r7, #19]
 8003d32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4e:	490d      	ldr	r1, [pc, #52]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	4904      	ldr	r1, [pc, #16]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000

08003d88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d96:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003da2:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d10d      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
       ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d047      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e044      	b.n	8003e5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d018      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x86>
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d825      	bhi.n	8003e2c <RCCEx_PLLSAI1_Config+0xa4>
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d002      	beq.n	8003dea <RCCEx_PLLSAI1_Config+0x62>
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d009      	beq.n	8003dfc <RCCEx_PLLSAI1_Config+0x74>
 8003de8:	e020      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dea:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11d      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e01a      	b.n	8003e32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0c:	e013      	b.n	8003e36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e2a:	e006      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e004      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	430b      	orrs	r3, r1
 8003e58:	4944      	ldr	r1, [pc, #272]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d17d      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e70:	f7fe f940 	bl	80020f4 <HAL_GetTick>
 8003e74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e76:	e009      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e78:	f7fe f93c 	bl	80020f4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d902      	bls.n	8003e8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	73fb      	strb	r3, [r7, #15]
        break;
 8003e8a:	e005      	b.n	8003e98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ef      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d160      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea4:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6892      	ldr	r2, [r2, #8]
 8003eb4:	0211      	lsls	r1, r2, #8
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68d2      	ldr	r2, [r2, #12]
 8003eba:	0912      	lsrs	r2, r2, #4
 8003ebc:	0452      	lsls	r2, r2, #17
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	492a      	ldr	r1, [pc, #168]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
 8003ec6:	e027      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d112      	bne.n	8003ef4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ed6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6892      	ldr	r2, [r2, #8]
 8003ede:	0211      	lsls	r1, r2, #8
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6912      	ldr	r2, [r2, #16]
 8003ee4:	0852      	lsrs	r2, r2, #1
 8003ee6:	3a01      	subs	r2, #1
 8003ee8:	0552      	lsls	r2, r2, #21
 8003eea:	430a      	orrs	r2, r1
 8003eec:	491f      	ldr	r1, [pc, #124]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	610b      	str	r3, [r1, #16]
 8003ef2:	e011      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003efc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6892      	ldr	r2, [r2, #8]
 8003f04:	0211      	lsls	r1, r2, #8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6952      	ldr	r2, [r2, #20]
 8003f0a:	0852      	lsrs	r2, r2, #1
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	0652      	lsls	r2, r2, #25
 8003f10:	430a      	orrs	r2, r1
 8003f12:	4916      	ldr	r1, [pc, #88]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe f8e6 	bl	80020f4 <HAL_GetTick>
 8003f28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f2a:	e009      	b.n	8003f40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f2c:	f7fe f8e2 	bl	80020f4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d902      	bls.n	8003f40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f3e:	e005      	b.n	8003f4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ef      	beq.n	8003f2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000

08003f70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f7e:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f8a:	4b67      	ldr	r3, [pc, #412]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0203 	and.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d10d      	bne.n	8003fb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fa2:	4b61      	ldr	r3, [pc, #388]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d047      	beq.n	8004046 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
 8003fba:	e044      	b.n	8004046 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d018      	beq.n	8003ff6 <RCCEx_PLLSAI2_Config+0x86>
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d825      	bhi.n	8004014 <RCCEx_PLLSAI2_Config+0xa4>
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d002      	beq.n	8003fd2 <RCCEx_PLLSAI2_Config+0x62>
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d009      	beq.n	8003fe4 <RCCEx_PLLSAI2_Config+0x74>
 8003fd0:	e020      	b.n	8004014 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fd2:	4b55      	ldr	r3, [pc, #340]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11d      	bne.n	800401a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe2:	e01a      	b.n	800401a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe4:	4b50      	ldr	r3, [pc, #320]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d116      	bne.n	800401e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e013      	b.n	800401e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ff6:	4b4c      	ldr	r3, [pc, #304]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004012:	e006      	b.n	8004022 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e004      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004022:	bf00      	nop
    }

    if(status == HAL_OK)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800402a:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	430b      	orrs	r3, r1
 8004040:	4939      	ldr	r1, [pc, #228]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d167      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a35      	ldr	r2, [pc, #212]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004058:	f7fe f84c 	bl	80020f4 <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800405e:	e009      	b.n	8004074 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004060:	f7fe f848 	bl	80020f4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d902      	bls.n	8004074 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	73fb      	strb	r3, [r7, #15]
        break;
 8004072:	e005      	b.n	8004080 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ef      	bne.n	8004060 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d14a      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	0211      	lsls	r1, r2, #8
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	0912      	lsrs	r2, r2, #4
 80040a4:	0452      	lsls	r2, r2, #17
 80040a6:	430a      	orrs	r2, r1
 80040a8:	491f      	ldr	r1, [pc, #124]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	614b      	str	r3, [r1, #20]
 80040ae:	e011      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6892      	ldr	r2, [r2, #8]
 80040c0:	0211      	lsls	r1, r2, #8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6912      	ldr	r2, [r2, #16]
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0652      	lsls	r2, r2, #25
 80040cc:	430a      	orrs	r2, r1
 80040ce:	4916      	ldr	r1, [pc, #88]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fe f808 	bl	80020f4 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040e6:	e009      	b.n	80040fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e8:	f7fe f804 	bl	80020f4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	73fb      	strb	r3, [r7, #15]
          break;
 80040fa:	e005      	b.n	8004108 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4904      	ldr	r1, [pc, #16]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004118:	4313      	orrs	r3, r2
 800411a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e095      	b.n	800426a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414e:	d009      	beq.n	8004164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	61da      	str	r2, [r3, #28]
 8004156:	e005      	b.n	8004164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fb4e 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a4:	d902      	bls.n	80041ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e002      	b.n	80041b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041ba:	d007      	beq.n	80041cc <HAL_SPI_Init+0xa0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	ea42 0103 	orr.w	r1, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f003 0204 	and.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004248:	ea42 0103 	orr.w	r1, r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b088      	sub	sp, #32
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_SPI_Transmit+0x22>
 8004290:	2302      	movs	r3, #2
 8004292:	e158      	b.n	8004546 <HAL_SPI_Transmit+0x2d4>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429c:	f7fd ff2a 	bl	80020f4 <HAL_GetTick>
 80042a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b6:	e13d      	b.n	8004534 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x52>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c8:	e134      	b.n	8004534 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2203      	movs	r2, #3
 80042ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004314:	d10f      	bne.n	8004336 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004324:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004334:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d007      	beq.n	8004354 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800435c:	d94b      	bls.n	80043f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Transmit+0xfa>
 8004366:	8afb      	ldrh	r3, [r7, #22]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d13e      	bne.n	80043ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004390:	e02b      	b.n	80043ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d112      	bne.n	80043c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	1c9a      	adds	r2, r3, #2
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c4:	e011      	b.n	80043ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c6:	f7fd fe95 	bl	80020f4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d803      	bhi.n	80043de <HAL_SPI_Transmit+0x16c>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d102      	bne.n	80043e4 <HAL_SPI_Transmit+0x172>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e8:	e0a4      	b.n	8004534 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ce      	bne.n	8004392 <HAL_SPI_Transmit+0x120>
 80043f4:	e07c      	b.n	80044f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_SPI_Transmit+0x192>
 80043fe:	8afb      	ldrh	r3, [r7, #22]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d170      	bne.n	80044e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d912      	bls.n	8004434 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b02      	subs	r3, #2
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004432:	e058      	b.n	80044e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	7812      	ldrb	r2, [r2, #0]
 8004440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800445a:	e044      	b.n	80044e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d12b      	bne.n	80044c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d912      	bls.n	800449a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b02      	subs	r3, #2
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004498:	e025      	b.n	80044e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044c0:	e011      	b.n	80044e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c2:	f7fd fe17 	bl	80020f4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d803      	bhi.n	80044da <HAL_SPI_Transmit+0x268>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d102      	bne.n	80044e0 <HAL_SPI_Transmit+0x26e>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044e4:	e026      	b.n	8004534 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1b5      	bne.n	800445c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fae1 	bl	8004abc <SPI_EndRxTxTransaction>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e000      	b.n	8004534 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004544:	7ffb      	ldrb	r3, [r7, #31]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_SPI_Transmit_DMA+0x20>
 800456c:	2302      	movs	r3, #2
 800456e:	e0d8      	b.n	8004722 <HAL_SPI_Transmit_DMA+0x1d2>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004584:	2302      	movs	r3, #2
 8004586:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004588:	e0c6      	b.n	8004718 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_SPI_Transmit_DMA+0x46>
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800459a:	e0bd      	b.n	8004718 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2203      	movs	r2, #3
 80045a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	88fa      	ldrh	r2, [r7, #6]
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e6:	d10f      	bne.n	8004608 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004606:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	4a47      	ldr	r2, [pc, #284]	; (800472c <HAL_SPI_Transmit_DMA+0x1dc>)
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	4a46      	ldr	r2, [pc, #280]	; (8004730 <HAL_SPI_Transmit_DMA+0x1e0>)
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	4a45      	ldr	r2, [pc, #276]	; (8004734 <HAL_SPI_Transmit_DMA+0x1e4>)
 800461e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	2200      	movs	r2, #0
 8004626:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004636:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004640:	d82d      	bhi.n	800469e <HAL_SPI_Transmit_DMA+0x14e>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464c:	d127      	bne.n	800469e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10f      	bne.n	800467c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800466a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004670:	b29b      	uxth	r3, r3
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	87da      	strh	r2, [r3, #62]	; 0x3e
 800467a:	e010      	b.n	800469e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800468a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	b29b      	uxth	r3, r3
 8004696:	3301      	adds	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	4619      	mov	r1, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046b6:	f7fd ff17 	bl	80024e8 <HAL_DMA_Start_IT>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c4:	f043 0210 	orr.w	r2, r3, #16
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80046d8:	e01e      	b.n	8004718 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d007      	beq.n	80046f8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0220 	orr.w	r2, r2, #32
 8004706:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0202 	orr.w	r2, r2, #2
 8004716:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	08004823 	.word	0x08004823
 8004730:	0800477d 	.word	0x0800477d
 8004734:	0800483f 	.word	0x0800483f

08004738 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800476e:	b2db      	uxtb	r3, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478a:	f7fd fcb3 	bl	80020f4 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d03b      	beq.n	8004816 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0220 	bic.w	r2, r2, #32
 80047ac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0202 	bic.w	r2, r2, #2
 80047bc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	2164      	movs	r1, #100	; 0x64
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f000 f97a 	bl	8004abc <SPI_EndRxTxTransaction>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2200      	movs	r2, #0
 80047fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f7ff ff9c 	bl	800474c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004814:	e002      	b.n	800481c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7fc fdec 	bl	80013f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ff81 	bl	8004738 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0203 	bic.w	r2, r2, #3
 800485a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	f043 0210 	orr.w	r2, r3, #16
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff ff6b 	bl	800474c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004890:	f7fd fc30 	bl	80020f4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	4413      	add	r3, r2
 800489e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048a0:	f7fd fc28 	bl	80020f4 <HAL_GetTick>
 80048a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048a6:	4b39      	ldr	r3, [pc, #228]	; (800498c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	015b      	lsls	r3, r3, #5
 80048ac:	0d1b      	lsrs	r3, r3, #20
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b6:	e054      	b.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d050      	beq.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048c0:	f7fd fc18 	bl	80020f4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d902      	bls.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d13d      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d111      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d004      	beq.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d107      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d10f      	bne.n	800493e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e017      	b.n	8004982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3b01      	subs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	429a      	cmp	r2, r3
 800497e:	d19b      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000004 	.word	0x20000004

08004990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	; 0x28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049a2:	f7fd fba7 	bl	80020f4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	4413      	add	r3, r2
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80049b2:	f7fd fb9f 	bl	80020f4 <HAL_GetTick>
 80049b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049c0:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00da      	lsls	r2, r3, #3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	0d1b      	lsrs	r3, r3, #20
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049d8:	e060      	b.n	8004a9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049e0:	d107      	bne.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d050      	beq.n	8004a9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049fa:	f7fd fb7b 	bl	80020f4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d902      	bls.n	8004a10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d13d      	bne.n	8004a8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a28:	d111      	bne.n	8004a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a32:	d004      	beq.n	8004a3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3c:	d107      	bne.n	8004a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a56:	d10f      	bne.n	8004a78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e010      	b.n	8004aae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d196      	bne.n	80049da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3728      	adds	r7, #40	; 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000004 	.word	0x20000004

08004abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff5b 	bl	8004990 <SPI_WaitFifoStateUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e027      	b.n	8004b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2180      	movs	r1, #128	; 0x80
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fec0 	bl	8004880 <SPI_WaitFlagStateUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e014      	b.n	8004b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff ff34 	bl	8004990 <SPI_WaitFifoStateUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e000      	b.n	8004b40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e049      	b.n	8004bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd f8c0 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f000 ff72 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d001      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e04f      	b.n	8004cb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01d      	beq.n	8004c6e <HAL_TIM_Base_Start_IT+0x76>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d018      	beq.n	8004c6e <HAL_TIM_Base_Start_IT+0x76>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_TIM_Base_Start_IT+0x76>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIM_Base_Start_IT+0x76>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_TIM_Base_Start_IT+0x76>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIM_Base_Start_IT+0x76>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d115      	bne.n	8004c9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	d015      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0xb4>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c86:	d011      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	e008      	b.n	8004cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e000      	b.n	8004cae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	00010007 	.word	0x00010007

08004cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e049      	b.n	8004d7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f841 	bl	8004d86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 feaa 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0x24>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e03c      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d109      	bne.n	8004dda <HAL_TIM_PWM_Start+0x3e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e02f      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x58>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e022      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d109      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x72>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e015      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x8c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e008      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e09c      	b.n	8004f7c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Start+0xb6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e50:	e023      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xc6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	e01b      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xd6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e70:	e013      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0xe6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e80:	e00b      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xf6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	e003      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fb12 	bl	80064cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <HAL_TIM_PWM_Start+0x1e8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <HAL_TIM_PWM_Start+0x1ec>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a32      	ldr	r2, [pc, #200]	; (8004f8c <HAL_TIM_PWM_Start+0x1f0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a31      	ldr	r2, [pc, #196]	; (8004f90 <HAL_TIM_PWM_Start+0x1f4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <HAL_TIM_PWM_Start+0x1f8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_TIM_PWM_Start+0x142>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_PWM_Start+0x144>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <HAL_TIM_PWM_Start+0x1e8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x19e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d018      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x19e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <HAL_TIM_PWM_Start+0x1fc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x19e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <HAL_TIM_PWM_Start+0x200>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x19e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <HAL_TIM_PWM_Start+0x204>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x19e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <HAL_TIM_PWM_Start+0x1ec>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x19e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_TIM_PWM_Start+0x1f0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d115      	bne.n	8004f66 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <HAL_TIM_PWM_Start+0x208>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b06      	cmp	r3, #6
 8004f4a:	d015      	beq.n	8004f78 <HAL_TIM_PWM_Start+0x1dc>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f52:	d011      	beq.n	8004f78 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f64:	e008      	b.n	8004f78 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e000      	b.n	8004f7a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40013400 	.word	0x40013400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	00010007 	.word	0x00010007

08004fa8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e049      	b.n	800504e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f841 	bl	8005056 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f000 fd42 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_TIM_IC_Start+0x1a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e023      	b.n	80050ce <HAL_TIM_IC_Start+0x62>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d104      	bne.n	8005096 <HAL_TIM_IC_Start+0x2a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e01b      	b.n	80050ce <HAL_TIM_IC_Start+0x62>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_IC_Start+0x3a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e013      	b.n	80050ce <HAL_TIM_IC_Start+0x62>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_IC_Start+0x4a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e00b      	b.n	80050ce <HAL_TIM_IC_Start+0x62>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_IC_Start+0x5a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e003      	b.n	80050ce <HAL_TIM_IC_Start+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_TIM_IC_Start+0x74>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e013      	b.n	8005108 <HAL_TIM_IC_Start+0x9c>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d104      	bne.n	80050f0 <HAL_TIM_IC_Start+0x84>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e00b      	b.n	8005108 <HAL_TIM_IC_Start+0x9c>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d104      	bne.n	8005100 <HAL_TIM_IC_Start+0x94>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e003      	b.n	8005108 <HAL_TIM_IC_Start+0x9c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005106:	b2db      	uxtb	r3, r3
 8005108:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d102      	bne.n	8005116 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d001      	beq.n	800511a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e092      	b.n	8005240 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <HAL_TIM_IC_Start+0xbe>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005128:	e023      	b.n	8005172 <HAL_TIM_IC_Start+0x106>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d104      	bne.n	800513a <HAL_TIM_IC_Start+0xce>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005138:	e01b      	b.n	8005172 <HAL_TIM_IC_Start+0x106>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d104      	bne.n	800514a <HAL_TIM_IC_Start+0xde>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005148:	e013      	b.n	8005172 <HAL_TIM_IC_Start+0x106>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b0c      	cmp	r3, #12
 800514e:	d104      	bne.n	800515a <HAL_TIM_IC_Start+0xee>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005158:	e00b      	b.n	8005172 <HAL_TIM_IC_Start+0x106>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b10      	cmp	r3, #16
 800515e:	d104      	bne.n	800516a <HAL_TIM_IC_Start+0xfe>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005168:	e003      	b.n	8005172 <HAL_TIM_IC_Start+0x106>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_TIM_IC_Start+0x116>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	e013      	b.n	80051aa <HAL_TIM_IC_Start+0x13e>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d104      	bne.n	8005192 <HAL_TIM_IC_Start+0x126>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005190:	e00b      	b.n	80051aa <HAL_TIM_IC_Start+0x13e>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_IC_Start+0x136>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051a0:	e003      	b.n	80051aa <HAL_TIM_IC_Start+0x13e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f98a 	bl	80064cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <HAL_TIM_IC_Start+0x1dc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01d      	beq.n	80051fe <HAL_TIM_IC_Start+0x192>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d018      	beq.n	80051fe <HAL_TIM_IC_Start+0x192>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	; (800524c <HAL_TIM_IC_Start+0x1e0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_TIM_IC_Start+0x192>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <HAL_TIM_IC_Start+0x1e4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIM_IC_Start+0x192>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <HAL_TIM_IC_Start+0x1e8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_TIM_IC_Start+0x192>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1a      	ldr	r2, [pc, #104]	; (8005258 <HAL_TIM_IC_Start+0x1ec>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIM_IC_Start+0x192>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a18      	ldr	r2, [pc, #96]	; (800525c <HAL_TIM_IC_Start+0x1f0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d115      	bne.n	800522a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	4b16      	ldr	r3, [pc, #88]	; (8005260 <HAL_TIM_IC_Start+0x1f4>)
 8005206:	4013      	ands	r3, r2
 8005208:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b06      	cmp	r3, #6
 800520e:	d015      	beq.n	800523c <HAL_TIM_IC_Start+0x1d0>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005216:	d011      	beq.n	800523c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	e008      	b.n	800523c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e000      	b.n	800523e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40014000 	.word	0x40014000
 8005260:	00010007 	.word	0x00010007

08005264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0202 	mvn.w	r2, #2
 8005290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fbc4 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fbb6 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fbc7 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0204 	mvn.w	r2, #4
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb9a 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fb8c 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fb9d 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b08      	cmp	r3, #8
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0208 	mvn.w	r2, #8
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fb70 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fb62 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fb73 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b10      	cmp	r3, #16
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0210 	mvn.w	r2, #16
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2208      	movs	r2, #8
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb46 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fb38 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fb49 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0201 	mvn.w	r2, #1
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fc f816 	bl	8001414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d107      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 f914 	bl	800663c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	d10e      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d107      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800543a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 f907 	bl	8006650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d10e      	bne.n	800546e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d107      	bne.n	800546e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 faf7 	bl	8005a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b20      	cmp	r3, #32
 800547a:	d10e      	bne.n	800549a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b20      	cmp	r3, #32
 8005488:	d107      	bne.n	800549a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0220 	mvn.w	r2, #32
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f8c7 	bl	8006628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054bc:	2302      	movs	r3, #2
 80054be:	e088      	b.n	80055d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11b      	bne.n	8005506 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f000 fe37 	bl	8006150 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 020c 	bic.w	r2, r2, #12
 80054f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6999      	ldr	r1, [r3, #24]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	619a      	str	r2, [r3, #24]
 8005504:	e060      	b.n	80055c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d11c      	bne.n	8005546 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f000 feb5 	bl	800628a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800552e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6999      	ldr	r1, [r3, #24]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	619a      	str	r2, [r3, #24]
 8005544:	e040      	b.n	80055c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b08      	cmp	r3, #8
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f000 ff02 	bl	8006364 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 020c 	bic.w	r2, r2, #12
 800556e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69d9      	ldr	r1, [r3, #28]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	61da      	str	r2, [r3, #28]
 8005582:	e021      	b.n	80055c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d11c      	bne.n	80055c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6819      	ldr	r1, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f000 ff1f 	bl	80063dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
 80055c2:	e001      	b.n	80055c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0ff      	b.n	80057fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b14      	cmp	r3, #20
 8005606:	f200 80f0 	bhi.w	80057ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005665 	.word	0x08005665
 8005614:	080057eb 	.word	0x080057eb
 8005618:	080057eb 	.word	0x080057eb
 800561c:	080057eb 	.word	0x080057eb
 8005620:	080056a5 	.word	0x080056a5
 8005624:	080057eb 	.word	0x080057eb
 8005628:	080057eb 	.word	0x080057eb
 800562c:	080057eb 	.word	0x080057eb
 8005630:	080056e7 	.word	0x080056e7
 8005634:	080057eb 	.word	0x080057eb
 8005638:	080057eb 	.word	0x080057eb
 800563c:	080057eb 	.word	0x080057eb
 8005640:	08005727 	.word	0x08005727
 8005644:	080057eb 	.word	0x080057eb
 8005648:	080057eb 	.word	0x080057eb
 800564c:	080057eb 	.word	0x080057eb
 8005650:	08005769 	.word	0x08005769
 8005654:	080057eb 	.word	0x080057eb
 8005658:	080057eb 	.word	0x080057eb
 800565c:	080057eb 	.word	0x080057eb
 8005660:	080057a9 	.word	0x080057a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa9a 	bl	8005ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	619a      	str	r2, [r3, #24]
      break;
 80056a2:	e0a5      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fb0a 	bl	8005cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	619a      	str	r2, [r3, #24]
      break;
 80056e4:	e084      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fb73 	bl	8005dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0208 	orr.w	r2, r2, #8
 8005700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0204 	bic.w	r2, r2, #4
 8005710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69d9      	ldr	r1, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	61da      	str	r2, [r3, #28]
      break;
 8005724:	e064      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fbdb 	bl	8005ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	61da      	str	r2, [r3, #28]
      break;
 8005766:	e043      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fc24 	bl	8005fbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057a6:	e023      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc68 	bl	8006084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e8:	e002      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
      break;
 80057ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop

08005804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_TIM_ConfigClockSource+0x1c>
 800581c:	2302      	movs	r3, #2
 800581e:	e0b6      	b.n	800598e <HAL_TIM_ConfigClockSource+0x18a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585c:	d03e      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xd8>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005862:	f200 8087 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x170>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586a:	f000 8086 	beq.w	800597a <HAL_TIM_ConfigClockSource+0x176>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	d87f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 8005874:	2b70      	cmp	r3, #112	; 0x70
 8005876:	d01a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xaa>
 8005878:	2b70      	cmp	r3, #112	; 0x70
 800587a:	d87b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 800587c:	2b60      	cmp	r3, #96	; 0x60
 800587e:	d050      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x11e>
 8005880:	2b60      	cmp	r3, #96	; 0x60
 8005882:	d877      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 8005884:	2b50      	cmp	r3, #80	; 0x50
 8005886:	d03c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0xfe>
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d873      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d058      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x13e>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d86f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 8005894:	2b30      	cmp	r3, #48	; 0x30
 8005896:	d064      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15e>
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d86b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d060      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15e>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d867      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15e>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d05a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15e>
 80058ac:	e062      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f000 fde5 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	609a      	str	r2, [r3, #8]
      break;
 80058da:	e04f      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6899      	ldr	r1, [r3, #8]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f000 fdce 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fe:	609a      	str	r2, [r3, #8]
      break;
 8005900:	e03c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fc8c 	bl	800622c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2150      	movs	r1, #80	; 0x50
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fd9b 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005920:	e02c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fce8 	bl	8006304 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2160      	movs	r1, #96	; 0x60
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fd8b 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005940:	e01c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fc6c 	bl	800622c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fd7b 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005960:	e00c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 fd72 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8005972:	e003      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	e000      	b.n	800597c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800597a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b0c      	cmp	r3, #12
 80059aa:	d831      	bhi.n	8005a10 <HAL_TIM_ReadCapturedValue+0x78>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059e9 	.word	0x080059e9
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a11 	.word	0x08005a11
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005a11 	.word	0x08005a11
 80059e4:	08005a07 	.word	0x08005a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	60fb      	str	r3, [r7, #12]

      break;
 80059f0:	e00f      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	60fb      	str	r3, [r7, #12]

      break;
 80059fa:	e00a      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	60fb      	str	r3, [r7, #12]

      break;
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	60fb      	str	r3, [r7, #12]

      break;
 8005a0e:	e000      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a10:	bf00      	nop
  }

  return tmpreg;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3d      	ldr	r2, [pc, #244]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3c      	ldr	r2, [pc, #240]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3b      	ldr	r2, [pc, #236]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01f      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d01b      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d017      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00f      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 0302 	bic.w	r3, r3, #2
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2c      	ldr	r2, [pc, #176]	; (8005cb0 <TIM_OC1_SetConfig+0x10c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_OC1_SetConfig+0x80>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2b      	ldr	r2, [pc, #172]	; (8005cb4 <TIM_OC1_SetConfig+0x110>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC1_SetConfig+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <TIM_OC1_SetConfig+0x114>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC1_SetConfig+0x80>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <TIM_OC1_SetConfig+0x118>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC1_SetConfig+0x80>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <TIM_OC1_SetConfig+0x11c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10c      	bne.n	8005c3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0308 	bic.w	r3, r3, #8
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <TIM_OC1_SetConfig+0x10c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00f      	beq.n	8005c66 <TIM_OC1_SetConfig+0xc2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <TIM_OC1_SetConfig+0x110>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00b      	beq.n	8005c66 <TIM_OC1_SetConfig+0xc2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <TIM_OC1_SetConfig+0x114>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <TIM_OC1_SetConfig+0xc2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <TIM_OC1_SetConfig+0x118>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_OC1_SetConfig+0xc2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <TIM_OC1_SetConfig+0x11c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d111      	bne.n	8005c8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40013400 	.word	0x40013400
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400
 8005cc0:	40014800 	.word	0x40014800

08005cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0210 	bic.w	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a28      	ldr	r2, [pc, #160]	; (8005dc4 <TIM_OC2_SetConfig+0x100>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_OC2_SetConfig+0x6c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a27      	ldr	r2, [pc, #156]	; (8005dc8 <TIM_OC2_SetConfig+0x104>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10d      	bne.n	8005d4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <TIM_OC2_SetConfig+0x100>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00f      	beq.n	8005d74 <TIM_OC2_SetConfig+0xb0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1c      	ldr	r2, [pc, #112]	; (8005dc8 <TIM_OC2_SetConfig+0x104>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_OC2_SetConfig+0xb0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <TIM_OC2_SetConfig+0x108>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_OC2_SetConfig+0xb0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <TIM_OC2_SetConfig+0x10c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC2_SetConfig+0xb0>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <TIM_OC2_SetConfig+0x110>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d113      	bne.n	8005d9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800

08005dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <TIM_OC3_SetConfig+0xfc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_OC3_SetConfig+0x6a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <TIM_OC3_SetConfig+0x100>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10d      	bne.n	8005e5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <TIM_OC3_SetConfig+0xfc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00f      	beq.n	8005e86 <TIM_OC3_SetConfig+0xae>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <TIM_OC3_SetConfig+0x100>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00b      	beq.n	8005e86 <TIM_OC3_SetConfig+0xae>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <TIM_OC3_SetConfig+0x104>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d007      	beq.n	8005e86 <TIM_OC3_SetConfig+0xae>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <TIM_OC3_SetConfig+0x108>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC3_SetConfig+0xae>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <TIM_OC3_SetConfig+0x10c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d113      	bne.n	8005eae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800

08005ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	031b      	lsls	r3, r3, #12
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <TIM_OC4_SetConfig+0xc0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00f      	beq.n	8005f6c <TIM_OC4_SetConfig+0x84>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	; (8005fac <TIM_OC4_SetConfig+0xc4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_OC4_SetConfig+0x84>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_OC4_SetConfig+0xc8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_OC4_SetConfig+0x84>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_OC4_SetConfig+0xcc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC4_SetConfig+0x84>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <TIM_OC4_SetConfig+0xd0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d109      	bne.n	8005f80 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	019b      	lsls	r3, r3, #6
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006000:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	041b      	lsls	r3, r3, #16
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a17      	ldr	r2, [pc, #92]	; (8006070 <TIM_OC5_SetConfig+0xb4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_OC5_SetConfig+0x7a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a16      	ldr	r2, [pc, #88]	; (8006074 <TIM_OC5_SetConfig+0xb8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_OC5_SetConfig+0x7a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <TIM_OC5_SetConfig+0xbc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_OC5_SetConfig+0x7a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a14      	ldr	r2, [pc, #80]	; (800607c <TIM_OC5_SetConfig+0xc0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC5_SetConfig+0x7a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a13      	ldr	r2, [pc, #76]	; (8006080 <TIM_OC5_SetConfig+0xc4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d109      	bne.n	800604a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800

08006084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	051b      	lsls	r3, r3, #20
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a18      	ldr	r2, [pc, #96]	; (800613c <TIM_OC6_SetConfig+0xb8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00f      	beq.n	8006100 <TIM_OC6_SetConfig+0x7c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a17      	ldr	r2, [pc, #92]	; (8006140 <TIM_OC6_SetConfig+0xbc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_OC6_SetConfig+0x7c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a16      	ldr	r2, [pc, #88]	; (8006144 <TIM_OC6_SetConfig+0xc0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_OC6_SetConfig+0x7c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <TIM_OC6_SetConfig+0xc4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC6_SetConfig+0x7c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a14      	ldr	r2, [pc, #80]	; (800614c <TIM_OC6_SetConfig+0xc8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d109      	bne.n	8006114 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006106:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	029b      	lsls	r3, r3, #10
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40012c00 	.word	0x40012c00
 8006140:	40013400 	.word	0x40013400
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400
 800614c:	40014800 	.word	0x40014800

08006150 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0201 	bic.w	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a26      	ldr	r2, [pc, #152]	; (8006214 <TIM_TI1_SetConfig+0xc4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d017      	beq.n	80061ae <TIM_TI1_SetConfig+0x5e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d013      	beq.n	80061ae <TIM_TI1_SetConfig+0x5e>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a23      	ldr	r2, [pc, #140]	; (8006218 <TIM_TI1_SetConfig+0xc8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <TIM_TI1_SetConfig+0x5e>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a22      	ldr	r2, [pc, #136]	; (800621c <TIM_TI1_SetConfig+0xcc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_TI1_SetConfig+0x5e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <TIM_TI1_SetConfig+0xd0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <TIM_TI1_SetConfig+0x5e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a20      	ldr	r2, [pc, #128]	; (8006224 <TIM_TI1_SetConfig+0xd4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_TI1_SetConfig+0x5e>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <TIM_TI1_SetConfig+0xd8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d101      	bne.n	80061b2 <TIM_TI1_SetConfig+0x62>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <TIM_TI1_SetConfig+0x64>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e003      	b.n	80061d2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f023 030a 	bic.w	r3, r3, #10
 80061ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f003 030a 	and.w	r3, r3, #10
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40014000 	.word	0x40014000

0800622c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f023 0201 	bic.w	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f023 030a 	bic.w	r3, r3, #10
 8006268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800628a:	b480      	push	{r7}
 800628c:	b087      	sub	sp, #28
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 0210 	bic.w	r2, r3, #16
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	031b      	lsls	r3, r3, #12
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f023 0210 	bic.w	r2, r3, #16
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800632e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	031b      	lsls	r3, r3, #12
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	621a      	str	r2, [r3, #32]
}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f023 0303 	bic.w	r3, r3, #3
 8006390:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006408:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800641a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	031b      	lsls	r3, r3, #12
 8006420:	b29b      	uxth	r3, r3
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800642e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	031b      	lsls	r3, r3, #12
 8006434:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 0307 	orr.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2201      	movs	r2, #1
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e068      	b.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2e      	ldr	r2, [pc, #184]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d108      	bne.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800656a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a2:	d018      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1a      	ldr	r2, [pc, #104]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a18      	ldr	r2, [pc, #96]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a13      	ldr	r2, [pc, #76]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10c      	bne.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40013400 	.word	0x40013400
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40014000 	.word	0x40014000

08006628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e040      	b.n	80066f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fb fc3e 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	; 0x24
 8006690:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f82c 	bl	8006700 <UART_SetConfig>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e022      	b.n	80066f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fad8 	bl	8006c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fb5f 	bl	8006db4 <UART_CheckIdleState>
 80066f6:	4603      	mov	r3, r0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006704:	b08a      	sub	sp, #40	; 0x28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	431a      	orrs	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	4313      	orrs	r3, r2
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4ba4      	ldr	r3, [pc, #656]	; (80069c0 <UART_SetConfig+0x2c0>)
 8006730:	4013      	ands	r3, r2
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006738:	430b      	orrs	r3, r1
 800673a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a99      	ldr	r2, [pc, #612]	; (80069c4 <UART_SetConfig+0x2c4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d004      	beq.n	800676c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006768:	4313      	orrs	r3, r2
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a90      	ldr	r2, [pc, #576]	; (80069c8 <UART_SetConfig+0x2c8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d126      	bne.n	80067d8 <UART_SetConfig+0xd8>
 800678a:	4b90      	ldr	r3, [pc, #576]	; (80069cc <UART_SetConfig+0x2cc>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d81b      	bhi.n	80067d0 <UART_SetConfig+0xd0>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0xa0>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e116      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067b8:	2302      	movs	r3, #2
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e112      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c6:	e10e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ce:	e10a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d6:	e106      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a7c      	ldr	r2, [pc, #496]	; (80069d0 <UART_SetConfig+0x2d0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d138      	bne.n	8006854 <UART_SetConfig+0x154>
 80067e2:	4b7a      	ldr	r3, [pc, #488]	; (80069cc <UART_SetConfig+0x2cc>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	2b0c      	cmp	r3, #12
 80067ee:	d82d      	bhi.n	800684c <UART_SetConfig+0x14c>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0xf8>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	0800682d 	.word	0x0800682d
 80067fc:	0800684d 	.word	0x0800684d
 8006800:	0800684d 	.word	0x0800684d
 8006804:	0800684d 	.word	0x0800684d
 8006808:	0800683d 	.word	0x0800683d
 800680c:	0800684d 	.word	0x0800684d
 8006810:	0800684d 	.word	0x0800684d
 8006814:	0800684d 	.word	0x0800684d
 8006818:	08006835 	.word	0x08006835
 800681c:	0800684d 	.word	0x0800684d
 8006820:	0800684d 	.word	0x0800684d
 8006824:	0800684d 	.word	0x0800684d
 8006828:	08006845 	.word	0x08006845
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e0d8      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e0d4      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e0d0      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e0cc      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e0c8      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a5e      	ldr	r2, [pc, #376]	; (80069d4 <UART_SetConfig+0x2d4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d125      	bne.n	80068aa <UART_SetConfig+0x1aa>
 800685e:	4b5b      	ldr	r3, [pc, #364]	; (80069cc <UART_SetConfig+0x2cc>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d016      	beq.n	800689a <UART_SetConfig+0x19a>
 800686c:	2b30      	cmp	r3, #48	; 0x30
 800686e:	d818      	bhi.n	80068a2 <UART_SetConfig+0x1a2>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d00a      	beq.n	800688a <UART_SetConfig+0x18a>
 8006874:	2b20      	cmp	r3, #32
 8006876:	d814      	bhi.n	80068a2 <UART_SetConfig+0x1a2>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <UART_SetConfig+0x182>
 800687c:	2b10      	cmp	r3, #16
 800687e:	d008      	beq.n	8006892 <UART_SetConfig+0x192>
 8006880:	e00f      	b.n	80068a2 <UART_SetConfig+0x1a2>
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006888:	e0ad      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800688a:	2302      	movs	r3, #2
 800688c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006890:	e0a9      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006892:	2304      	movs	r3, #4
 8006894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006898:	e0a5      	b.n	80069e6 <UART_SetConfig+0x2e6>
 800689a:	2308      	movs	r3, #8
 800689c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a0:	e0a1      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068a2:	2310      	movs	r3, #16
 80068a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a8:	e09d      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4a      	ldr	r2, [pc, #296]	; (80069d8 <UART_SetConfig+0x2d8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d125      	bne.n	8006900 <UART_SetConfig+0x200>
 80068b4:	4b45      	ldr	r3, [pc, #276]	; (80069cc <UART_SetConfig+0x2cc>)
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068be:	2bc0      	cmp	r3, #192	; 0xc0
 80068c0:	d016      	beq.n	80068f0 <UART_SetConfig+0x1f0>
 80068c2:	2bc0      	cmp	r3, #192	; 0xc0
 80068c4:	d818      	bhi.n	80068f8 <UART_SetConfig+0x1f8>
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d00a      	beq.n	80068e0 <UART_SetConfig+0x1e0>
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d814      	bhi.n	80068f8 <UART_SetConfig+0x1f8>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <UART_SetConfig+0x1d8>
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d008      	beq.n	80068e8 <UART_SetConfig+0x1e8>
 80068d6:	e00f      	b.n	80068f8 <UART_SetConfig+0x1f8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e082      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068e0:	2302      	movs	r3, #2
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e07e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ee:	e07a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e076      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fe:	e072      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a35      	ldr	r2, [pc, #212]	; (80069dc <UART_SetConfig+0x2dc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d12a      	bne.n	8006960 <UART_SetConfig+0x260>
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <UART_SetConfig+0x2cc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006918:	d01a      	beq.n	8006950 <UART_SetConfig+0x250>
 800691a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691e:	d81b      	bhi.n	8006958 <UART_SetConfig+0x258>
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d00c      	beq.n	8006940 <UART_SetConfig+0x240>
 8006926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692a:	d815      	bhi.n	8006958 <UART_SetConfig+0x258>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <UART_SetConfig+0x238>
 8006930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006934:	d008      	beq.n	8006948 <UART_SetConfig+0x248>
 8006936:	e00f      	b.n	8006958 <UART_SetConfig+0x258>
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e052      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e04e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e04a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e046      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e042      	b.n	80069e6 <UART_SetConfig+0x2e6>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <UART_SetConfig+0x2c4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d13a      	bne.n	80069e0 <UART_SetConfig+0x2e0>
 800696a:	4b18      	ldr	r3, [pc, #96]	; (80069cc <UART_SetConfig+0x2cc>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006978:	d01a      	beq.n	80069b0 <UART_SetConfig+0x2b0>
 800697a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800697e:	d81b      	bhi.n	80069b8 <UART_SetConfig+0x2b8>
 8006980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006984:	d00c      	beq.n	80069a0 <UART_SetConfig+0x2a0>
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d815      	bhi.n	80069b8 <UART_SetConfig+0x2b8>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <UART_SetConfig+0x298>
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006994:	d008      	beq.n	80069a8 <UART_SetConfig+0x2a8>
 8006996:	e00f      	b.n	80069b8 <UART_SetConfig+0x2b8>
 8006998:	2300      	movs	r3, #0
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e022      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e01e      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ae:	e01a      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	e016      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069be:	e012      	b.n	80069e6 <UART_SetConfig+0x2e6>
 80069c0:	efff69f3 	.word	0xefff69f3
 80069c4:	40008000 	.word	0x40008000
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40004400 	.word	0x40004400
 80069d4:	40004800 	.word	0x40004800
 80069d8:	40004c00 	.word	0x40004c00
 80069dc:	40005000 	.word	0x40005000
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a9f      	ldr	r2, [pc, #636]	; (8006c68 <UART_SetConfig+0x568>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d17a      	bne.n	8006ae6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d824      	bhi.n	8006a42 <UART_SetConfig+0x342>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x300>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a43 	.word	0x08006a43
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a43 	.word	0x08006a43
 8006a10:	08006a33 	.word	0x08006a33
 8006a14:	08006a43 	.word	0x08006a43
 8006a18:	08006a43 	.word	0x08006a43
 8006a1c:	08006a43 	.word	0x08006a43
 8006a20:	08006a3b 	.word	0x08006a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fc fe3a 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8006a28:	61f8      	str	r0, [r7, #28]
        break;
 8006a2a:	e010      	b.n	8006a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a2c:	4b8f      	ldr	r3, [pc, #572]	; (8006c6c <UART_SetConfig+0x56c>)
 8006a2e:	61fb      	str	r3, [r7, #28]
        break;
 8006a30:	e00d      	b.n	8006a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a32:	f7fc fd9b 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8006a36:	61f8      	str	r0, [r7, #28]
        break;
 8006a38:	e009      	b.n	8006a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3e:	61fb      	str	r3, [r7, #28]
        break;
 8006a40:	e005      	b.n	8006a4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80fb 	beq.w	8006c4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4413      	add	r3, r2
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d305      	bcc.n	8006a72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a78:	e0e8      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	461c      	mov	r4, r3
 8006a80:	4615      	mov	r5, r2
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	022b      	lsls	r3, r5, #8
 8006a8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a90:	0222      	lsls	r2, r4, #8
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6849      	ldr	r1, [r1, #4]
 8006a96:	0849      	lsrs	r1, r1, #1
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4688      	mov	r8, r1
 8006a9c:	4681      	mov	r9, r0
 8006a9e:	eb12 0a08 	adds.w	sl, r2, r8
 8006aa2:	eb43 0b09 	adc.w	fp, r3, r9
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	4659      	mov	r1, fp
 8006ab8:	f7fa f86a 	bl	8000b90 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d308      	bcc.n	8006ade <UART_SetConfig+0x3de>
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad2:	d204      	bcs.n	8006ade <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	e0b6      	b.n	8006c4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ae4:	e0b2      	b.n	8006c4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aee:	d15e      	bne.n	8006bae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d828      	bhi.n	8006b4a <UART_SetConfig+0x44a>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0x400>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fc fdba 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8006b28:	61f8      	str	r0, [r7, #28]
        break;
 8006b2a:	e014      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fc fdcc 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e010      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b4d      	ldr	r3, [pc, #308]	; (8006c6c <UART_SetConfig+0x56c>)
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e00d      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fc fd17 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8006b3e:	61f8      	str	r0, [r7, #28]
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61fb      	str	r3, [r7, #28]
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d077      	beq.n	8006c4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005a      	lsls	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d916      	bls.n	8006ba6 <UART_SetConfig+0x4a6>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d212      	bcs.n	8006ba6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f023 030f 	bic.w	r3, r3, #15
 8006b88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	8afa      	ldrh	r2, [r7, #22]
 8006ba2:	60da      	str	r2, [r3, #12]
 8006ba4:	e052      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bac:	e04e      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d827      	bhi.n	8006c06 <UART_SetConfig+0x506>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x4bc>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	08006c07 	.word	0x08006c07
 8006bcc:	08006bf7 	.word	0x08006bf7
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
 8006bdc:	08006bff 	.word	0x08006bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fc fd5c 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8006be4:	61f8      	str	r0, [r7, #28]
        break;
 8006be6:	e014      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fc fd6e 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8006bec:	61f8      	str	r0, [r7, #28]
        break;
 8006bee:	e010      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <UART_SetConfig+0x56c>)
 8006bf2:	61fb      	str	r3, [r7, #28]
        break;
 8006bf4:	e00d      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf6:	f7fc fcb9 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8006bfa:	61f8      	str	r0, [r7, #28]
        break;
 8006bfc:	e009      	b.n	8006c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c02:	61fb      	str	r3, [r7, #28]
        break;
 8006c04:	e005      	b.n	8006c12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c10:	bf00      	nop
    }

    if (pclk != 0U)
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d019      	beq.n	8006c4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	085a      	lsrs	r2, r3, #1
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	441a      	add	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b0f      	cmp	r3, #15
 8006c30:	d909      	bls.n	8006c46 <UART_SetConfig+0x546>
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c38:	d205      	bcs.n	8006c46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60da      	str	r2, [r3, #12]
 8006c44:	e002      	b.n	8006c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3728      	adds	r7, #40	; 0x28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c66:	bf00      	nop
 8006c68:	40008000 	.word	0x40008000
 8006c6c:	00f42400 	.word	0x00f42400

08006c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6e:	d10a      	bne.n	8006d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dc4:	f7fb f996 	bl	80020f4 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d10e      	bne.n	8006df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f82d 	bl	8006e46 <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e023      	b.n	8006e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d10e      	bne.n	8006e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f817 	bl	8006e46 <UART_WaitOnFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e00d      	b.n	8006e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b09c      	sub	sp, #112	; 0x70
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	603b      	str	r3, [r7, #0]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e56:	e0a5      	b.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	f000 80a1 	beq.w	8006fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e62:	f7fb f947 	bl	80020f4 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d302      	bcc.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d13e      	bne.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	f023 0301 	bic.w	r3, r3, #1
 8006ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e5      	bne.n	8006eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e067      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d04f      	beq.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f12:	d147      	bne.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e6      	bne.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3308      	adds	r3, #8
 8006f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f70:	623a      	str	r2, [r7, #32]
 8006f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	69f9      	ldr	r1, [r7, #28]
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e5      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e010      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4013      	ands	r3, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2301      	moveq	r3, #1
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	f43f af4a 	beq.w	8006e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3770      	adds	r7, #112	; 0x70
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <hagl_init>:
    hagl_set_clip(surface, x0, y0, x1, y1);
}

hagl_backend_t *
hagl_init(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af02      	add	r7, sp, #8
    static hagl_backend_t backend;
    memset(&backend, 0, sizeof(hagl_backend_t));
 8006fd6:	223c      	movs	r2, #60	; 0x3c
 8006fd8:	2100      	movs	r1, #0
 8006fda:	480e      	ldr	r0, [pc, #56]	; (8007014 <hagl_init+0x44>)
 8006fdc:	f000 fdd4 	bl	8007b88 <memset>

    hagl_hal_init(&backend);
 8006fe0:	480c      	ldr	r0, [pc, #48]	; (8007014 <hagl_init+0x44>)
 8006fe2:	f7f9 ffd7 	bl	8000f94 <hagl_hal_init>
    hagl_set_clip(&backend, 0, 0,  backend.width - 1,  backend.height - 1);
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <hagl_init+0x44>)
 8006fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <hagl_init+0x44>)
 8006ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	2200      	movs	r2, #0
 8007004:	2100      	movs	r1, #0
 8007006:	4803      	ldr	r0, [pc, #12]	; (8007014 <hagl_init+0x44>)
 8007008:	f000 fb49 	bl	800769e <hagl_set_clip>
    return &backend;
 800700c:	4b01      	ldr	r3, [pc, #4]	; (8007014 <hagl_init+0x44>)
};
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	2000a2ac 	.word	0x2000a2ac

08007018 <hagl_draw_hline>:
 * @param color
 */

static inline void
hagl_draw_hline(void const *surface, int16_t x0, int16_t y0, uint16_t width, hagl_color_t color)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4603      	mov	r3, r0
 8007028:	817b      	strh	r3, [r7, #10]
 800702a:	460b      	mov	r3, r1
 800702c:	813b      	strh	r3, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
    hagl_draw_hline_xyw(surface, x0, y0, width, color);
 8007032:	88f8      	ldrh	r0, [r7, #6]
 8007034:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007038:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4603      	mov	r3, r0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fb4c 	bl	80076e0 <hagl_draw_hline_xyw>
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <hagl_draw_circle>:
#include "hagl/pixel.h"
#include "hagl/hline.h"

void
hagl_draw_circle(void const *surface, int16_t xc, int16_t yc, int16_t r, hagl_color_t color)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	461a      	mov	r2, r3
 800705e:	4603      	mov	r3, r0
 8007060:	817b      	strh	r3, [r7, #10]
 8007062:	460b      	mov	r3, r1
 8007064:	813b      	strh	r3, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	82fb      	strh	r3, [r7, #22]
    int16_t y = r;
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	82bb      	strh	r3, [r7, #20]
    int16_t d = 3 - 2 * r;
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b29b      	uxth	r3, r3
 8007078:	f1c3 0303 	rsb	r3, r3, #3
 800707c:	b29b      	uxth	r3, r3
 800707e:	827b      	strh	r3, [r7, #18]

    hagl_put_pixel(surface, xc + x, yc + y, color);
 8007080:	897a      	ldrh	r2, [r7, #10]
 8007082:	8afb      	ldrh	r3, [r7, #22]
 8007084:	4413      	add	r3, r2
 8007086:	b29b      	uxth	r3, r3
 8007088:	b219      	sxth	r1, r3
 800708a:	893a      	ldrh	r2, [r7, #8]
 800708c:	8abb      	ldrh	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	b29b      	uxth	r3, r3
 8007092:	b21a      	sxth	r2, r3
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fc47 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc - x, yc + y, color);
 800709c:	897a      	ldrh	r2, [r7, #10]
 800709e:	8afb      	ldrh	r3, [r7, #22]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	b219      	sxth	r1, r3
 80070a6:	893a      	ldrh	r2, [r7, #8]
 80070a8:	8abb      	ldrh	r3, [r7, #20]
 80070aa:	4413      	add	r3, r2
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	b21a      	sxth	r2, r3
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fc39 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc + x, yc - y, color);
 80070b8:	897a      	ldrh	r2, [r7, #10]
 80070ba:	8afb      	ldrh	r3, [r7, #22]
 80070bc:	4413      	add	r3, r2
 80070be:	b29b      	uxth	r3, r3
 80070c0:	b219      	sxth	r1, r3
 80070c2:	893a      	ldrh	r2, [r7, #8]
 80070c4:	8abb      	ldrh	r3, [r7, #20]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	b21a      	sxth	r2, r3
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fc2b 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc - x, yc - y, color);
 80070d4:	897a      	ldrh	r2, [r7, #10]
 80070d6:	8afb      	ldrh	r3, [r7, #22]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	b29b      	uxth	r3, r3
 80070dc:	b219      	sxth	r1, r3
 80070de:	893a      	ldrh	r2, [r7, #8]
 80070e0:	8abb      	ldrh	r3, [r7, #20]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	b21a      	sxth	r2, r3
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 fc1d 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc + y, yc + x, color);
 80070f0:	897a      	ldrh	r2, [r7, #10]
 80070f2:	8abb      	ldrh	r3, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b219      	sxth	r1, r3
 80070fa:	893a      	ldrh	r2, [r7, #8]
 80070fc:	8afb      	ldrh	r3, [r7, #22]
 80070fe:	4413      	add	r3, r2
 8007100:	b29b      	uxth	r3, r3
 8007102:	b21a      	sxth	r2, r3
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fc0f 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc - y, yc + x, color);
 800710c:	897a      	ldrh	r2, [r7, #10]
 800710e:	8abb      	ldrh	r3, [r7, #20]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	b29b      	uxth	r3, r3
 8007114:	b219      	sxth	r1, r3
 8007116:	893a      	ldrh	r2, [r7, #8]
 8007118:	8afb      	ldrh	r3, [r7, #22]
 800711a:	4413      	add	r3, r2
 800711c:	b29b      	uxth	r3, r3
 800711e:	b21a      	sxth	r2, r3
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fc01 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc + y, yc - x, color);
 8007128:	897a      	ldrh	r2, [r7, #10]
 800712a:	8abb      	ldrh	r3, [r7, #20]
 800712c:	4413      	add	r3, r2
 800712e:	b29b      	uxth	r3, r3
 8007130:	b219      	sxth	r1, r3
 8007132:	893a      	ldrh	r2, [r7, #8]
 8007134:	8afb      	ldrh	r3, [r7, #22]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	b29b      	uxth	r3, r3
 800713a:	b21a      	sxth	r2, r3
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fbf3 	bl	800792a <hagl_put_pixel>
    hagl_put_pixel(surface, xc - y, yc - x, color);
 8007144:	897a      	ldrh	r2, [r7, #10]
 8007146:	8abb      	ldrh	r3, [r7, #20]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	b29b      	uxth	r3, r3
 800714c:	b219      	sxth	r1, r3
 800714e:	893a      	ldrh	r2, [r7, #8]
 8007150:	8afb      	ldrh	r3, [r7, #22]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	b29b      	uxth	r3, r3
 8007156:	b21a      	sxth	r2, r3
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fbe5 	bl	800792a <hagl_put_pixel>

    while (y >= x) {
 8007160:	e09d      	b.n	800729e <hagl_draw_circle+0x24e>
        if (d > 0) {
 8007162:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dd1a      	ble.n	80071a0 <hagl_draw_circle+0x150>
            d = d + 4 * (x - y) + 10;
 800716a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800716e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	b29b      	uxth	r3, r3
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	b29a      	uxth	r2, r3
 800717a:	8a7b      	ldrh	r3, [r7, #18]
 800717c:	4413      	add	r3, r2
 800717e:	b29b      	uxth	r3, r3
 8007180:	330a      	adds	r3, #10
 8007182:	b29b      	uxth	r3, r3
 8007184:	827b      	strh	r3, [r7, #18]
            y--;
 8007186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	82bb      	strh	r3, [r7, #20]
            x++;
 8007192:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007196:	b29b      	uxth	r3, r3
 8007198:	3301      	adds	r3, #1
 800719a:	b29b      	uxth	r3, r3
 800719c:	82fb      	strh	r3, [r7, #22]
 800719e:	e00e      	b.n	80071be <hagl_draw_circle+0x16e>
        } else {
            d = d + 4 * x + 6;
 80071a0:	8afb      	ldrh	r3, [r7, #22]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	8a7b      	ldrh	r3, [r7, #18]
 80071a8:	4413      	add	r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3306      	adds	r3, #6
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	827b      	strh	r3, [r7, #18]
            x++;
 80071b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3301      	adds	r3, #1
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	82fb      	strh	r3, [r7, #22]
        }

        hagl_put_pixel(surface, xc + x, yc + y, color);
 80071be:	897a      	ldrh	r2, [r7, #10]
 80071c0:	8afb      	ldrh	r3, [r7, #22]
 80071c2:	4413      	add	r3, r2
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	b219      	sxth	r1, r3
 80071c8:	893a      	ldrh	r2, [r7, #8]
 80071ca:	8abb      	ldrh	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21a      	sxth	r2, r3
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fba8 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc - x, yc + y, color);
 80071da:	897a      	ldrh	r2, [r7, #10]
 80071dc:	8afb      	ldrh	r3, [r7, #22]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b219      	sxth	r1, r3
 80071e4:	893a      	ldrh	r2, [r7, #8]
 80071e6:	8abb      	ldrh	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	b21a      	sxth	r2, r3
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fb9a 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc + x, yc - y, color);
 80071f6:	897a      	ldrh	r2, [r7, #10]
 80071f8:	8afb      	ldrh	r3, [r7, #22]
 80071fa:	4413      	add	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b219      	sxth	r1, r3
 8007200:	893a      	ldrh	r2, [r7, #8]
 8007202:	8abb      	ldrh	r3, [r7, #20]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	b29b      	uxth	r3, r3
 8007208:	b21a      	sxth	r2, r3
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fb8c 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc - x, yc - y, color);
 8007212:	897a      	ldrh	r2, [r7, #10]
 8007214:	8afb      	ldrh	r3, [r7, #22]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	b29b      	uxth	r3, r3
 800721a:	b219      	sxth	r1, r3
 800721c:	893a      	ldrh	r2, [r7, #8]
 800721e:	8abb      	ldrh	r3, [r7, #20]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	b29b      	uxth	r3, r3
 8007224:	b21a      	sxth	r2, r3
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fb7e 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc + y, yc + x, color);
 800722e:	897a      	ldrh	r2, [r7, #10]
 8007230:	8abb      	ldrh	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	b29b      	uxth	r3, r3
 8007236:	b219      	sxth	r1, r3
 8007238:	893a      	ldrh	r2, [r7, #8]
 800723a:	8afb      	ldrh	r3, [r7, #22]
 800723c:	4413      	add	r3, r2
 800723e:	b29b      	uxth	r3, r3
 8007240:	b21a      	sxth	r2, r3
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fb70 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc - y, yc + x, color);
 800724a:	897a      	ldrh	r2, [r7, #10]
 800724c:	8abb      	ldrh	r3, [r7, #20]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	b29b      	uxth	r3, r3
 8007252:	b219      	sxth	r1, r3
 8007254:	893a      	ldrh	r2, [r7, #8]
 8007256:	8afb      	ldrh	r3, [r7, #22]
 8007258:	4413      	add	r3, r2
 800725a:	b29b      	uxth	r3, r3
 800725c:	b21a      	sxth	r2, r3
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fb62 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc + y, yc - x, color);
 8007266:	897a      	ldrh	r2, [r7, #10]
 8007268:	8abb      	ldrh	r3, [r7, #20]
 800726a:	4413      	add	r3, r2
 800726c:	b29b      	uxth	r3, r3
 800726e:	b219      	sxth	r1, r3
 8007270:	893a      	ldrh	r2, [r7, #8]
 8007272:	8afb      	ldrh	r3, [r7, #22]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	b29b      	uxth	r3, r3
 8007278:	b21a      	sxth	r2, r3
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fb54 	bl	800792a <hagl_put_pixel>
        hagl_put_pixel(surface, xc - y, yc - x, color);
 8007282:	897a      	ldrh	r2, [r7, #10]
 8007284:	8abb      	ldrh	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	b219      	sxth	r1, r3
 800728c:	893a      	ldrh	r2, [r7, #8]
 800728e:	8afb      	ldrh	r3, [r7, #22]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	b29b      	uxth	r3, r3
 8007294:	b21a      	sxth	r2, r3
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fb46 	bl	800792a <hagl_put_pixel>
    while (y >= x) {
 800729e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80072a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	f6bf af5b 	bge.w	8007162 <hagl_draw_circle+0x112>
    }
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <hagl_fill_circle>:

void
hagl_fill_circle(void const *surface, int16_t x0, int16_t y0, int16_t r, hagl_color_t color)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b088      	sub	sp, #32
 80072ba:	af02      	add	r7, sp, #8
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	461a      	mov	r2, r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	817b      	strh	r3, [r7, #10]
 80072c8:	460b      	mov	r3, r1
 80072ca:	813b      	strh	r3, [r7, #8]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	82fb      	strh	r3, [r7, #22]
    int16_t y = r;
 80072d4:	88fb      	ldrh	r3, [r7, #6]
 80072d6:	82bb      	strh	r3, [r7, #20]
    int16_t d = 3 - 2 * r;
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f1c3 0303 	rsb	r3, r3, #3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 80072e6:	e079      	b.n	80073dc <hagl_fill_circle+0x126>
        hagl_draw_hline(surface, x0 - x, y0 + y, x * 2, color);
 80072e8:	897a      	ldrh	r2, [r7, #10]
 80072ea:	8afb      	ldrh	r3, [r7, #22]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	b219      	sxth	r1, r3
 80072f2:	893a      	ldrh	r2, [r7, #8]
 80072f4:	8abb      	ldrh	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	b21a      	sxth	r2, r3
 80072fc:	8afb      	ldrh	r3, [r7, #22]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	b298      	uxth	r0, r3
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	4603      	mov	r3, r0
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff fe85 	bl	8007018 <hagl_draw_hline>
        hagl_draw_hline(surface, x0 - x, y0 - y, x * 2, color);
 800730e:	897a      	ldrh	r2, [r7, #10]
 8007310:	8afb      	ldrh	r3, [r7, #22]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	b29b      	uxth	r3, r3
 8007316:	b219      	sxth	r1, r3
 8007318:	893a      	ldrh	r2, [r7, #8]
 800731a:	8abb      	ldrh	r3, [r7, #20]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	b29b      	uxth	r3, r3
 8007320:	b21a      	sxth	r2, r3
 8007322:	8afb      	ldrh	r3, [r7, #22]
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	b298      	uxth	r0, r3
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	4603      	mov	r3, r0
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff fe72 	bl	8007018 <hagl_draw_hline>
        hagl_draw_hline(surface, x0 - y, y0 + x, y * 2, color);
 8007334:	897a      	ldrh	r2, [r7, #10]
 8007336:	8abb      	ldrh	r3, [r7, #20]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	b29b      	uxth	r3, r3
 800733c:	b219      	sxth	r1, r3
 800733e:	893a      	ldrh	r2, [r7, #8]
 8007340:	8afb      	ldrh	r3, [r7, #22]
 8007342:	4413      	add	r3, r2
 8007344:	b29b      	uxth	r3, r3
 8007346:	b21a      	sxth	r2, r3
 8007348:	8abb      	ldrh	r3, [r7, #20]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	b298      	uxth	r0, r3
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4603      	mov	r3, r0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fe5f 	bl	8007018 <hagl_draw_hline>
        hagl_draw_hline(surface, x0 - y, y0 - x, y * 2, color);
 800735a:	897a      	ldrh	r2, [r7, #10]
 800735c:	8abb      	ldrh	r3, [r7, #20]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	b29b      	uxth	r3, r3
 8007362:	b219      	sxth	r1, r3
 8007364:	893a      	ldrh	r2, [r7, #8]
 8007366:	8afb      	ldrh	r3, [r7, #22]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	b29b      	uxth	r3, r3
 800736c:	b21a      	sxth	r2, r3
 800736e:	8abb      	ldrh	r3, [r7, #20]
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	b298      	uxth	r0, r3
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fe4c 	bl	8007018 <hagl_draw_hline>

        if (d <= 0) {
 8007380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dc0f      	bgt.n	80073a8 <hagl_fill_circle+0xf2>
            d = d + 4 * x + 6;
 8007388:	8afb      	ldrh	r3, [r7, #22]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	b29a      	uxth	r2, r3
 800738e:	8a7b      	ldrh	r3, [r7, #18]
 8007390:	4413      	add	r3, r2
 8007392:	b29b      	uxth	r3, r3
 8007394:	3306      	adds	r3, #6
 8007396:	b29b      	uxth	r3, r3
 8007398:	827b      	strh	r3, [r7, #18]
            x++;
 800739a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3301      	adds	r3, #1
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	82fb      	strh	r3, [r7, #22]
 80073a6:	e019      	b.n	80073dc <hagl_fill_circle+0x126>
        } else {
            d = d + 4 * (x - y) + 10;
 80073a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80073ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	8a7b      	ldrh	r3, [r7, #18]
 80073ba:	4413      	add	r3, r2
 80073bc:	b29b      	uxth	r3, r3
 80073be:	330a      	adds	r3, #10
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	827b      	strh	r3, [r7, #18]
            x++;
 80073c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3301      	adds	r3, #1
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	82fb      	strh	r3, [r7, #22]
            y--;
 80073d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	82bb      	strh	r3, [r7, #20]
    while (y >= x) {
 80073dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80073e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	f6bf af7f 	bge.w	80072e8 <hagl_fill_circle+0x32>
        }
    }
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <code>:
static const uint8_t TOP = 0b1000;

static
uint8_t
code(int16_t x0, int16_t y0, hagl_window_t window)
{
 80073f4:	b490      	push	{r4, r7}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	1d39      	adds	r1, r7, #4
 8007400:	e881 000c 	stmia.w	r1, {r2, r3}
 8007404:	4623      	mov	r3, r4
 8007406:	81fb      	strh	r3, [r7, #14]
 8007408:	4603      	mov	r3, r0
 800740a:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8007410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007414:	88ba      	ldrh	r2, [r7, #4]
 8007416:	4293      	cmp	r3, r2
 8007418:	da04      	bge.n	8007424 <code+0x30>
        code |= LEFT;
 800741a:	2201      	movs	r2, #1
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	4313      	orrs	r3, r2
 8007420:	75fb      	strb	r3, [r7, #23]
 8007422:	e008      	b.n	8007436 <code+0x42>
    } else if (x0 > window.x1) {
 8007424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007428:	893a      	ldrh	r2, [r7, #8]
 800742a:	4293      	cmp	r3, r2
 800742c:	dd03      	ble.n	8007436 <code+0x42>
        code |= RIGHT;
 800742e:	2202      	movs	r2, #2
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	4313      	orrs	r3, r2
 8007434:	75fb      	strb	r3, [r7, #23]
    }
    if (y0 < window.y0) {
 8007436:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	4293      	cmp	r3, r2
 800743e:	da04      	bge.n	800744a <code+0x56>
        code |= BOTTOM;
 8007440:	2204      	movs	r2, #4
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	4313      	orrs	r3, r2
 8007446:	75fb      	strb	r3, [r7, #23]
 8007448:	e008      	b.n	800745c <code+0x68>
    } else if (y0 > window.y1) {
 800744a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800744e:	897a      	ldrh	r2, [r7, #10]
 8007450:	4293      	cmp	r3, r2
 8007452:	dd03      	ble.n	800745c <code+0x68>
        code |= TOP;
 8007454:	2208      	movs	r2, #8
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	4313      	orrs	r3, r2
 800745a:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bc90      	pop	{r4, r7}
 8007466:	4770      	bx	lr

08007468 <hagl_clip_line>:

bool
hagl_clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, hagl_window_t window)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f9b3 0000 	ldrsh.w	r0, [r3]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007486:	cb0c      	ldmia	r3, {r2, r3}
 8007488:	f7ff ffb4 	bl	80073f4 <code>
 800748c:	4603      	mov	r3, r0
 800748e:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	f9b3 1000 	ldrsh.w	r1, [r3]
 800749c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074a0:	cb0c      	ldmia	r3, {r2, r3}
 80074a2:	f7ff ffa7 	bl	80073f4 <code>
 80074a6:	4603      	mov	r3, r0
 80074a8:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 80074aa:	2300      	movs	r3, #0
 80074ac:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 80074ae:	7ffa      	ldrb	r2, [r7, #31]
 80074b0:	7fbb      	ldrb	r3, [r7, #30]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <hagl_clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 80074ba:	2301      	movs	r3, #1
 80074bc:	777b      	strb	r3, [r7, #29]
            break;
 80074be:	e0e9      	b.n	8007694 <hagl_clip_line+0x22c>
        } else if (code0 & code1) {
 80074c0:	7ffa      	ldrb	r2, [r7, #31]
 80074c2:	7fbb      	ldrb	r3, [r7, #30]
 80074c4:	4013      	ands	r3, r2
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 80e2 	bne.w	8007692 <hagl_clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 80074d6:	7ffb      	ldrb	r3, [r7, #31]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <hagl_clip_line+0x78>
 80074dc:	7ffb      	ldrb	r3, [r7, #31]
 80074de:	e000      	b.n	80074e2 <hagl_clip_line+0x7a>
 80074e0:	7fbb      	ldrb	r3, [r7, #30]
 80074e2:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 80074e4:	2208      	movs	r2, #8
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	4013      	ands	r3, r2
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d024      	beq.n	800753a <hagl_clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074fe:	4619      	mov	r1, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007506:	1acb      	subs	r3, r1, r3
 8007508:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800750a:	4608      	mov	r0, r1
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007512:	1a41      	subs	r1, r0, r1
 8007514:	fb03 f101 	mul.w	r1, r3, r1
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800751e:	4618      	mov	r0, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007526:	1ac3      	subs	r3, r0, r3
 8007528:	fb91 f3f3 	sdiv	r3, r1, r3
 800752c:	b29b      	uxth	r3, r3
 800752e:	4413      	add	r3, r2
 8007530:	b29b      	uxth	r3, r3
 8007532:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8007534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007536:	833b      	strh	r3, [r7, #24]
 8007538:	e07f      	b.n	800763a <hagl_clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 800753a:	2204      	movs	r2, #4
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	4013      	ands	r3, r2
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d024      	beq.n	8007590 <hagl_clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007554:	4619      	mov	r1, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800755c:	1acb      	subs	r3, r1, r3
 800755e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007560:	4608      	mov	r0, r1
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007568:	1a41      	subs	r1, r0, r1
 800756a:	fb03 f101 	mul.w	r1, r3, r1
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007574:	4618      	mov	r0, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800757c:	1ac3      	subs	r3, r0, r3
 800757e:	fb91 f3f3 	sdiv	r3, r1, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	4413      	add	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800758a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800758c:	833b      	strh	r3, [r7, #24]
 800758e:	e054      	b.n	800763a <hagl_clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8007590:	2202      	movs	r2, #2
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	4013      	ands	r3, r2
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d024      	beq.n	80075e6 <hagl_clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075b2:	1acb      	subs	r3, r1, r3
 80075b4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80075b6:	4608      	mov	r0, r1
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	f9b1 1000 	ldrsh.w	r1, [r1]
 80075be:	1a41      	subs	r1, r0, r1
 80075c0:	fb03 f101 	mul.w	r1, r3, r1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075ca:	4618      	mov	r0, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075d2:	1ac3      	subs	r3, r0, r3
 80075d4:	fb91 f3f3 	sdiv	r3, r1, r3
 80075d8:	b29b      	uxth	r3, r3
 80075da:	4413      	add	r3, r2
 80075dc:	b29b      	uxth	r3, r3
 80075de:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 80075e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80075e2:	837b      	strh	r3, [r7, #26]
 80075e4:	e029      	b.n	800763a <hagl_clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 80075e6:	2201      	movs	r2, #1
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	4013      	ands	r3, r2
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d023      	beq.n	800763a <hagl_clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007600:	4619      	mov	r1, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007608:	1acb      	subs	r3, r1, r3
 800760a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800760c:	4608      	mov	r0, r1
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007614:	1a41      	subs	r1, r0, r1
 8007616:	fb03 f101 	mul.w	r1, r3, r1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007620:	4618      	mov	r0, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007628:	1ac3      	subs	r3, r0, r3
 800762a:	fb91 f3f3 	sdiv	r3, r1, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	4413      	add	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8007636:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007638:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800763a:	7dfa      	ldrb	r2, [r7, #23]
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	429a      	cmp	r2, r3
 8007640:	d113      	bne.n	800766a <hagl_clip_line+0x202>
                *x0 = x;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8b7a      	ldrh	r2, [r7, #26]
 8007646:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	8b3a      	ldrh	r2, [r7, #24]
 800764c:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f9b3 1000 	ldrsh.w	r1, [r3]
 800765a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800765e:	cb0c      	ldmia	r3, {r2, r3}
 8007660:	f7ff fec8 	bl	80073f4 <code>
 8007664:	4603      	mov	r3, r0
 8007666:	77fb      	strb	r3, [r7, #31]
 8007668:	e721      	b.n	80074ae <hagl_clip_line+0x46>
            } else {
                *x1 = x;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8b7a      	ldrh	r2, [r7, #26]
 800766e:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	8b3a      	ldrh	r2, [r7, #24]
 8007674:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f9b3 0000 	ldrsh.w	r0, [r3]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007686:	cb0c      	ldmia	r3, {r2, r3}
 8007688:	f7ff feb4 	bl	80073f4 <code>
 800768c:	4603      	mov	r3, r0
 800768e:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007690:	e70d      	b.n	80074ae <hagl_clip_line+0x46>
            break;
 8007692:	bf00      	nop
            }
        }
    }

    return accept;
 8007694:	7f7b      	ldrb	r3, [r7, #29]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <hagl_set_clip>:

void
hagl_set_clip(void *_surface, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	461a      	mov	r2, r3
 80076ac:	4603      	mov	r3, r0
 80076ae:	817b      	strh	r3, [r7, #10]
 80076b0:	460b      	mov	r3, r1
 80076b2:	813b      	strh	r3, [r7, #8]
 80076b4:	4613      	mov	r3, r2
 80076b6:	80fb      	strh	r3, [r7, #6]
    hagl_surface_t *surface = _surface;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	617b      	str	r3, [r7, #20]

    surface->clip.x0 = x0;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	897a      	ldrh	r2, [r7, #10]
 80076c0:	80da      	strh	r2, [r3, #6]
    surface->clip.y0 = y0;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	893a      	ldrh	r2, [r7, #8]
 80076c6:	811a      	strh	r2, [r3, #8]
    surface->clip.x1 = x1;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	815a      	strh	r2, [r3, #10]
    surface->clip.y1 = y1;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	8c3a      	ldrh	r2, [r7, #32]
 80076d2:	819a      	strh	r2, [r3, #12]
}
 80076d4:	bf00      	nop
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <hagl_draw_hline_xyw>:
#include "hagl/line.h"
#include "hagl/surface.h"

void
hagl_draw_hline_xyw(void const *_surface, int16_t x0, int16_t y0, uint16_t w, hagl_color_t color)
{
 80076e0:	b5b0      	push	{r4, r5, r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	461a      	mov	r2, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	817b      	strh	r3, [r7, #10]
 80076f2:	460b      	mov	r3, r1
 80076f4:	813b      	strh	r3, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	613b      	str	r3, [r7, #16]

    if (surface->hline) {
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d04a      	beq.n	800779c <hagl_draw_hline_xyw+0xbc>
        int16_t width = w;
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	82fb      	strh	r3, [r7, #22]

        /* x0 or y0 is over the edge, nothing to do. */
        if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1) || (y0 < surface->clip.y0))  {
 800770a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	8952      	ldrh	r2, [r2, #10]
 8007712:	4293      	cmp	r3, r2
 8007714:	dc57      	bgt.n	80077c6 <hagl_draw_hline_xyw+0xe6>
 8007716:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	8992      	ldrh	r2, [r2, #12]
 800771e:	4293      	cmp	r3, r2
 8007720:	dc51      	bgt.n	80077c6 <hagl_draw_hline_xyw+0xe6>
 8007722:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	8912      	ldrh	r2, [r2, #8]
 800772a:	4293      	cmp	r3, r2
 800772c:	db4b      	blt.n	80077c6 <hagl_draw_hline_xyw+0xe6>
            return;
        }

        /* x0 is left of clip window, ignore start part. */
        if (x0 < surface->clip.x0) {
 800772e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	88d2      	ldrh	r2, [r2, #6]
 8007736:	4293      	cmp	r3, r2
 8007738:	da07      	bge.n	800774a <hagl_draw_hline_xyw+0x6a>
            width = width + x0;
 800773a:	8afa      	ldrh	r2, [r7, #22]
 800773c:	897b      	ldrh	r3, [r7, #10]
 800773e:	4413      	add	r3, r2
 8007740:	b29b      	uxth	r3, r3
 8007742:	82fb      	strh	r3, [r7, #22]
            x0 = surface->clip.x0;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	88db      	ldrh	r3, [r3, #6]
 8007748:	817b      	strh	r3, [r7, #10]
        }

        /* Everything outside clip window, nothing to do. */
        if (width <= 0)  {
 800774a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800774e:	2b00      	cmp	r3, #0
 8007750:	dd3b      	ble.n	80077ca <hagl_draw_hline_xyw+0xea>
            return;
        }

        /* Cut anything going over right edge of clip window. */
        if (((x0 + width) > surface->clip.x1)) {
 8007752:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007756:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800775a:	4413      	add	r3, r2
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	8952      	ldrh	r2, [r2, #10]
 8007760:	4293      	cmp	r3, r2
 8007762:	dd0d      	ble.n	8007780 <hagl_draw_hline_xyw+0xa0>
            width = width - (x0 + width - 1 - surface->clip.x1);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	895a      	ldrh	r2, [r3, #10]
 8007768:	8979      	ldrh	r1, [r7, #10]
 800776a:	8afb      	ldrh	r3, [r7, #22]
 800776c:	440b      	add	r3, r1
 800776e:	b29b      	uxth	r3, r3
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	b29a      	uxth	r2, r3
 8007774:	8afb      	ldrh	r3, [r7, #22]
 8007776:	4413      	add	r3, r2
 8007778:	b29b      	uxth	r3, r3
 800777a:	3301      	adds	r3, #1
 800777c:	b29b      	uxth	r3, r3
 800777e:	82fb      	strh	r3, [r7, #22]
        }

        surface->hline(&surface, x0, y0, width, color);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007784:	8afd      	ldrh	r5, [r7, #22]
 8007786:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800778a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800778e:	f107 0010 	add.w	r0, r7, #16
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	462b      	mov	r3, r5
 8007798:	47a0      	blx	r4
 800779a:	e017      	b.n	80077cc <hagl_draw_hline_xyw+0xec>
    } else {
        hagl_draw_line(surface, x0, y0, x0 + w - 1, y0, color);
 800779c:	6938      	ldr	r0, [r7, #16]
 800779e:	897a      	ldrh	r2, [r7, #10]
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	4413      	add	r3, r2
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b21c      	sxth	r4, r3
 80077ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80077b0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4623      	mov	r3, r4
 80077c0:	f000 f807 	bl	80077d2 <hagl_draw_line>
 80077c4:	e002      	b.n	80077cc <hagl_draw_hline_xyw+0xec>
            return;
 80077c6:	bf00      	nop
 80077c8:	e000      	b.n	80077cc <hagl_draw_hline_xyw+0xec>
            return;
 80077ca:	bf00      	nop
    }
}
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bdb0      	pop	{r4, r5, r7, pc}

080077d2 <hagl_draw_line>:
#include "hagl/clip.h"
#include "hagl.h"

void
hagl_draw_line(void const *_surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 80077d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d4:	b08d      	sub	sp, #52	; 0x34
 80077d6:	af02      	add	r7, sp, #8
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	461a      	mov	r2, r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	817b      	strh	r3, [r7, #10]
 80077e4:	460b      	mov	r3, r1
 80077e6:	813b      	strh	r3, [r7, #8]
 80077e8:	4613      	mov	r3, r2
 80077ea:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	623b      	str	r3, [r7, #32]

    /* Clip coordinates to fit clip window. */
    if (false == hagl_clip_line(&x0, &y0, &x1, &y1, surface->clip)) {
 80077f0:	1dbe      	adds	r6, r7, #6
 80077f2:	f107 0508 	add.w	r5, r7, #8
 80077f6:	f107 040a 	add.w	r4, r7, #10
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	466b      	mov	r3, sp
 80077fe:	3206      	adds	r2, #6
 8007800:	6810      	ldr	r0, [r2, #0]
 8007802:	6851      	ldr	r1, [r2, #4]
 8007804:	c303      	stmia	r3!, {r0, r1}
 8007806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800780a:	4632      	mov	r2, r6
 800780c:	4629      	mov	r1, r5
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff fe2a 	bl	8007468 <hagl_clip_line>
 8007814:	4603      	mov	r3, r0
 8007816:	f083 0301 	eor.w	r3, r3, #1
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d17e      	bne.n	800791e <hagl_draw_line+0x14c>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007824:	461a      	mov	r2, r3
 8007826:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	bfb8      	it	lt
 8007830:	425b      	neglt	r3, r3
 8007832:	83fb      	strh	r3, [r7, #30]
    sx = x0 < x1 ? 1 : -1;
 8007834:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800783c:	429a      	cmp	r2, r3
 800783e:	da01      	bge.n	8007844 <hagl_draw_line+0x72>
 8007840:	2301      	movs	r3, #1
 8007842:	e001      	b.n	8007848 <hagl_draw_line+0x76>
 8007844:	f04f 33ff 	mov.w	r3, #4294967295
 8007848:	83bb      	strh	r3, [r7, #28]
    dy = ABS(y1 - y0);
 800784a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800784e:	461a      	mov	r2, r3
 8007850:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfb8      	it	lt
 800785a:	425b      	neglt	r3, r3
 800785c:	837b      	strh	r3, [r7, #26]
    sy = y0 < y1 ? 1 : -1;
 800785e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007862:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007866:	429a      	cmp	r2, r3
 8007868:	da01      	bge.n	800786e <hagl_draw_line+0x9c>
 800786a:	2301      	movs	r3, #1
 800786c:	e001      	b.n	8007872 <hagl_draw_line+0xa0>
 800786e:	f04f 33ff 	mov.w	r3, #4294967295
 8007872:	833b      	strh	r3, [r7, #24]
    err = (dx > dy ? dx : -dy) / 2;
 8007874:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007878:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800787c:	429a      	cmp	r2, r3
 800787e:	dd06      	ble.n	800788e <hagl_draw_line+0xbc>
 8007880:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007884:	0fda      	lsrs	r2, r3, #31
 8007886:	4413      	add	r3, r2
 8007888:	105b      	asrs	r3, r3, #1
 800788a:	b21b      	sxth	r3, r3
 800788c:	e006      	b.n	800789c <hagl_draw_line+0xca>
 800788e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007892:	0fda      	lsrs	r2, r3, #31
 8007894:	4413      	add	r3, r2
 8007896:	105b      	asrs	r3, r3, #1
 8007898:	425b      	negs	r3, r3
 800789a:	b21b      	sxth	r3, r3
 800789c:	84fb      	strh	r3, [r7, #38]	; 0x26

    while (1) {
        hagl_put_pixel(surface, x0, y0, color);
 800789e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80078a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80078a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a8:	6a38      	ldr	r0, [r7, #32]
 80078aa:	f000 f83e 	bl	800792a <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80078ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80078b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d105      	bne.n	80078c6 <hagl_draw_line+0xf4>
 80078ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80078be:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d02d      	beq.n	8007922 <hagl_draw_line+0x150>
            break;
        };

        e2 = err + err;
 80078c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	82fb      	strh	r3, [r7, #22]

        if (e2 > -dx) {
 80078ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80078d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80078d6:	425b      	negs	r3, r3
 80078d8:	429a      	cmp	r2, r3
 80078da:	dd0c      	ble.n	80078f6 <hagl_draw_line+0x124>
            err -= dy;
 80078dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80078de:	8b7b      	ldrh	r3, [r7, #26]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	84fb      	strh	r3, [r7, #38]	; 0x26
            x0 += sx;
 80078e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	8bbb      	ldrh	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b21b      	sxth	r3, r3
 80078f4:	817b      	strh	r3, [r7, #10]
        }

        if (e2 < dy) {
 80078f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80078fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80078fe:	429a      	cmp	r2, r3
 8007900:	dacd      	bge.n	800789e <hagl_draw_line+0xcc>
            err += dx;
 8007902:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007904:	8bfb      	ldrh	r3, [r7, #30]
 8007906:	4413      	add	r3, r2
 8007908:	b29b      	uxth	r3, r3
 800790a:	84fb      	strh	r3, [r7, #38]	; 0x26
            y0 += sy;
 800790c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007910:	b29a      	uxth	r2, r3
 8007912:	8b3b      	ldrh	r3, [r7, #24]
 8007914:	4413      	add	r3, r2
 8007916:	b29b      	uxth	r3, r3
 8007918:	b21b      	sxth	r3, r3
 800791a:	813b      	strh	r3, [r7, #8]
        hagl_put_pixel(surface, x0, y0, color);
 800791c:	e7bf      	b.n	800789e <hagl_draw_line+0xcc>
        return;
 800791e:	bf00      	nop
 8007920:	e000      	b.n	8007924 <hagl_draw_line+0x152>
            break;
 8007922:	bf00      	nop
        }
    }
}
 8007924:	372c      	adds	r7, #44	; 0x2c
 8007926:	46bd      	mov	sp, r7
 8007928:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800792a <hagl_put_pixel>:
#include "hagl/color.h"
#include "hagl/surface.h"

void
hagl_put_pixel(void const *_surface, int16_t x0, int16_t y0, hagl_color_t color)
{
 800792a:	b590      	push	{r4, r7, lr}
 800792c:	b087      	sub	sp, #28
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	607b      	str	r3, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	817b      	strh	r3, [r7, #10]
 8007938:	4613      	mov	r3, r2
 800793a:	813b      	strh	r3, [r7, #8]
    const hagl_surface_t *surface = _surface;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	617b      	str	r3, [r7, #20]

    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < surface->clip.x0) || (y0 < surface->clip.y0))  {
 8007940:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	88d2      	ldrh	r2, [r2, #6]
 8007948:	4293      	cmp	r3, r2
 800794a:	db1c      	blt.n	8007986 <hagl_put_pixel+0x5c>
 800794c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	8912      	ldrh	r2, [r2, #8]
 8007954:	4293      	cmp	r3, r2
 8007956:	db16      	blt.n	8007986 <hagl_put_pixel+0x5c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1)) {
 8007958:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	8952      	ldrh	r2, [r2, #10]
 8007960:	4293      	cmp	r3, r2
 8007962:	dc12      	bgt.n	800798a <hagl_put_pixel+0x60>
 8007964:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	8992      	ldrh	r2, [r2, #12]
 800796c:	4293      	cmp	r3, r2
 800796e:	dc0c      	bgt.n	800798a <hagl_put_pixel+0x60>
        return;
    }

    /* If still in bounds set the pixel. */
    surface->put_pixel(&surface, x0, y0, color);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	691c      	ldr	r4, [r3, #16]
 8007974:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007978:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800797c:	f107 0014 	add.w	r0, r7, #20
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	47a0      	blx	r4
 8007984:	e002      	b.n	800798c <hagl_put_pixel+0x62>
        return;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <hagl_put_pixel+0x62>
        return;
 800798a:	bf00      	nop
}
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}

08007992 <hagl_draw_hline>:
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af02      	add	r7, sp, #8
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	817b      	strh	r3, [r7, #10]
 80079a4:	460b      	mov	r3, r1
 80079a6:	813b      	strh	r3, [r7, #8]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80fb      	strh	r3, [r7, #6]
    hagl_draw_hline_xyw(surface, x0, y0, width, color);
 80079ac:	88f8      	ldrh	r0, [r7, #6]
 80079ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80079b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4603      	mov	r3, r0
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7ff fe8f 	bl	80076e0 <hagl_draw_hline_xyw>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <hagl_fill_rectangle_xyxy>:
    hagl_draw_vline(surface, x1, y0, height, color);
}

void
hagl_fill_rectangle_xyxy(void const *_surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 80079ca:	b5b0      	push	{r4, r5, r7, lr}
 80079cc:	b08a      	sub	sp, #40	; 0x28
 80079ce:	af02      	add	r7, sp, #8
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	4608      	mov	r0, r1
 80079d4:	4611      	mov	r1, r2
 80079d6:	461a      	mov	r2, r3
 80079d8:	4603      	mov	r3, r0
 80079da:	817b      	strh	r3, [r7, #10]
 80079dc:	460b      	mov	r3, r1
 80079de:	813b      	strh	r3, [r7, #8]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	617b      	str	r3, [r7, #20]

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80079e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80079ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	dd0e      	ble.n	8007a12 <hagl_fill_rectangle_xyxy+0x48>
        x0 = x0 + x1;
 80079f4:	897a      	ldrh	r2, [r7, #10]
 80079f6:	88fb      	ldrh	r3, [r7, #6]
 80079f8:	4413      	add	r3, r2
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	817b      	strh	r3, [r7, #10]
        x1 = x0 - x1;
 80079fe:	897a      	ldrh	r2, [r7, #10]
 8007a00:	88fb      	ldrh	r3, [r7, #6]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	80fb      	strh	r3, [r7, #6]
        x0 = x0 - x1;
 8007a08:	897a      	ldrh	r2, [r7, #10]
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	817b      	strh	r3, [r7, #10]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007a12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007a16:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	dd0e      	ble.n	8007a3c <hagl_fill_rectangle_xyxy+0x72>
        y0 = y0 + y1;
 8007a1e:	893a      	ldrh	r2, [r7, #8]
 8007a20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a22:	4413      	add	r3, r2
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	813b      	strh	r3, [r7, #8]
        y1 = y0 - y1;
 8007a28:	893a      	ldrh	r2, [r7, #8]
 8007a2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	863b      	strh	r3, [r7, #48]	; 0x30
        y0 = y0 - y1;
 8007a32:	893a      	ldrh	r2, [r7, #8]
 8007a34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	813b      	strh	r3, [r7, #8]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < surface->clip.x0) || (y1 < surface->clip.y0))  {
 8007a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	88d2      	ldrh	r2, [r2, #6]
 8007a44:	4293      	cmp	r3, r2
 8007a46:	db6f      	blt.n	8007b28 <hagl_fill_rectangle_xyxy+0x15e>
 8007a48:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	8912      	ldrh	r2, [r2, #8]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	db69      	blt.n	8007b28 <hagl_fill_rectangle_xyxy+0x15e>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1)) {
 8007a54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	8952      	ldrh	r2, [r2, #10]
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	dc65      	bgt.n	8007b2c <hagl_fill_rectangle_xyxy+0x162>
 8007a60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	8992      	ldrh	r2, [r2, #12]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	dc5f      	bgt.n	8007b2c <hagl_fill_rectangle_xyxy+0x162>
        return;
    }

    x0 = MAX(x0, surface->clip.x0);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	88db      	ldrh	r3, [r3, #6]
 8007a70:	461a      	mov	r2, r3
 8007a72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a76:	4293      	cmp	r3, r2
 8007a78:	bfb8      	it	lt
 8007a7a:	4613      	movlt	r3, r2
 8007a7c:	817b      	strh	r3, [r7, #10]
    y0 = MAX(y0, surface->clip.y0);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	891b      	ldrh	r3, [r3, #8]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	bfb8      	it	lt
 8007a8c:	4613      	movlt	r3, r2
 8007a8e:	813b      	strh	r3, [r7, #8]
    x1 = MIN(x1, surface->clip.x1);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	461a      	mov	r2, r3
 8007a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	bfa8      	it	ge
 8007a9e:	4613      	movge	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
    y1 = MIN(y1, surface->clip.y1);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	899b      	ldrh	r3, [r3, #12]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfa8      	it	ge
 8007ab0:	4613      	movge	r3, r2
 8007ab2:	863b      	strh	r3, [r7, #48]	; 0x30

    uint16_t width = x1 - x0 + 1;
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	897b      	ldrh	r3, [r7, #10]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3301      	adds	r3, #1
 8007abe:	83bb      	strh	r3, [r7, #28]
    uint16_t height = y1 - y0 + 1;
 8007ac0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007ac2:	893b      	ldrh	r3, [r7, #8]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3301      	adds	r3, #1
 8007aca:	837b      	strh	r3, [r7, #26]

    for (uint16_t i = 0; i < height; i++) {
 8007acc:	2300      	movs	r3, #0
 8007ace:	83fb      	strh	r3, [r7, #30]
 8007ad0:	e025      	b.n	8007b1e <hagl_fill_rectangle_xyxy+0x154>
        if (surface->hline) {
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d010      	beq.n	8007afc <hagl_fill_rectangle_xyxy+0x132>
            /* Already clipped so can call HAL directly. */
            surface->hline(&surface, x0, y0 + i, width, color);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007ade:	893a      	ldrh	r2, [r7, #8]
 8007ae0:	8bfb      	ldrh	r3, [r7, #30]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	8bbd      	ldrh	r5, [r7, #28]
 8007aea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007aee:	f107 0014 	add.w	r0, r7, #20
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	462b      	mov	r3, r5
 8007af8:	47a0      	blx	r4
 8007afa:	e00d      	b.n	8007b18 <hagl_fill_rectangle_xyxy+0x14e>
        } else {
            hagl_draw_hline(surface, x0, y0 + i, width, color);
 8007afc:	6978      	ldr	r0, [r7, #20]
 8007afe:	893a      	ldrh	r2, [r7, #8]
 8007b00:	8bfb      	ldrh	r3, [r7, #30]
 8007b02:	4413      	add	r3, r2
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	b21a      	sxth	r2, r3
 8007b08:	8bbc      	ldrh	r4, [r7, #28]
 8007b0a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	4623      	mov	r3, r4
 8007b14:	f7ff ff3d 	bl	8007992 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007b18:	8bfb      	ldrh	r3, [r7, #30]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	83fb      	strh	r3, [r7, #30]
 8007b1e:	8bfa      	ldrh	r2, [r7, #30]
 8007b20:	8b7b      	ldrh	r3, [r7, #26]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3d5      	bcc.n	8007ad2 <hagl_fill_rectangle_xyxy+0x108>
 8007b26:	e002      	b.n	8007b2e <hagl_fill_rectangle_xyxy+0x164>
        return;
 8007b28:	bf00      	nop
 8007b2a:	e000      	b.n	8007b2e <hagl_fill_rectangle_xyxy+0x164>
        return;
 8007b2c:	bf00      	nop
        }
    }
}
 8007b2e:	3720      	adds	r7, #32
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bdb0      	pop	{r4, r5, r7, pc}

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000010 	.word	0x20000010

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4d0d      	ldr	r5, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1b64      	subs	r4, r4, r5
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4d0b      	ldr	r5, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f001 ff26 	bl	80099a4 <_init>
 8007b58:	1b64      	subs	r4, r4, r5
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08009d10 	.word	0x08009d10
 8007b7c:	08009d10 	.word	0x08009d10
 8007b80:	08009d10 	.word	0x08009d10
 8007b84:	08009d14 	.word	0x08009d14

08007b88 <memset>:
 8007b88:	4402      	add	r2, r0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <memset+0xa>
 8007b90:	4770      	bx	lr
 8007b92:	f803 1b01 	strb.w	r1, [r3], #1
 8007b96:	e7f9      	b.n	8007b8c <memset+0x4>

08007b98 <sin>:
 8007b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b9a:	ec53 2b10 	vmov	r2, r3, d0
 8007b9e:	4828      	ldr	r0, [pc, #160]	; (8007c40 <sin+0xa8>)
 8007ba0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ba4:	4281      	cmp	r1, r0
 8007ba6:	dc07      	bgt.n	8007bb8 <sin+0x20>
 8007ba8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007c38 <sin+0xa0>
 8007bac:	2000      	movs	r0, #0
 8007bae:	b005      	add	sp, #20
 8007bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb4:	f001 bcec 	b.w	8009590 <__kernel_sin>
 8007bb8:	4822      	ldr	r0, [pc, #136]	; (8007c44 <sin+0xac>)
 8007bba:	4281      	cmp	r1, r0
 8007bbc:	dd09      	ble.n	8007bd2 <sin+0x3a>
 8007bbe:	ee10 0a10 	vmov	r0, s0
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f7f8 fb04 	bl	80001d0 <__aeabi_dsub>
 8007bc8:	ec41 0b10 	vmov	d0, r0, r1
 8007bcc:	b005      	add	sp, #20
 8007bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bd2:	4668      	mov	r0, sp
 8007bd4:	f000 fe04 	bl	80087e0 <__ieee754_rem_pio2>
 8007bd8:	f000 0003 	and.w	r0, r0, #3
 8007bdc:	2801      	cmp	r0, #1
 8007bde:	d00c      	beq.n	8007bfa <sin+0x62>
 8007be0:	2802      	cmp	r0, #2
 8007be2:	d011      	beq.n	8007c08 <sin+0x70>
 8007be4:	b9f0      	cbnz	r0, 8007c24 <sin+0x8c>
 8007be6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bea:	ed9d 0b00 	vldr	d0, [sp]
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f001 fcce 	bl	8009590 <__kernel_sin>
 8007bf4:	ec51 0b10 	vmov	r0, r1, d0
 8007bf8:	e7e6      	b.n	8007bc8 <sin+0x30>
 8007bfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bfe:	ed9d 0b00 	vldr	d0, [sp]
 8007c02:	f001 f8ad 	bl	8008d60 <__kernel_cos>
 8007c06:	e7f5      	b.n	8007bf4 <sin+0x5c>
 8007c08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c0c:	ed9d 0b00 	vldr	d0, [sp]
 8007c10:	2001      	movs	r0, #1
 8007c12:	f001 fcbd 	bl	8009590 <__kernel_sin>
 8007c16:	ec53 2b10 	vmov	r2, r3, d0
 8007c1a:	ee10 0a10 	vmov	r0, s0
 8007c1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c22:	e7d1      	b.n	8007bc8 <sin+0x30>
 8007c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c28:	ed9d 0b00 	vldr	d0, [sp]
 8007c2c:	f001 f898 	bl	8008d60 <__kernel_cos>
 8007c30:	e7f1      	b.n	8007c16 <sin+0x7e>
 8007c32:	bf00      	nop
 8007c34:	f3af 8000 	nop.w
	...
 8007c40:	3fe921fb 	.word	0x3fe921fb
 8007c44:	7fefffff 	.word	0x7fefffff

08007c48 <pow>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	ed2d 8b02 	vpush	{d8}
 8007c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007c52:	eef0 8a60 	vmov.f32	s17, s1
 8007c56:	ec55 4b11 	vmov	r4, r5, d1
 8007c5a:	f000 f891 	bl	8007d80 <__ieee754_pow>
 8007c5e:	4622      	mov	r2, r4
 8007c60:	462b      	mov	r3, r5
 8007c62:	4620      	mov	r0, r4
 8007c64:	4629      	mov	r1, r5
 8007c66:	ec57 6b10 	vmov	r6, r7, d0
 8007c6a:	f7f8 ff03 	bl	8000a74 <__aeabi_dcmpun>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d13b      	bne.n	8007cea <pow+0xa2>
 8007c72:	ec51 0b18 	vmov	r0, r1, d8
 8007c76:	2200      	movs	r2, #0
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f7f8 fec9 	bl	8000a10 <__aeabi_dcmpeq>
 8007c7e:	b1b8      	cbz	r0, 8007cb0 <pow+0x68>
 8007c80:	2200      	movs	r2, #0
 8007c82:	2300      	movs	r3, #0
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 fec2 	bl	8000a10 <__aeabi_dcmpeq>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d146      	bne.n	8007d1e <pow+0xd6>
 8007c90:	ec45 4b10 	vmov	d0, r4, r5
 8007c94:	f001 fd73 	bl	800977e <finite>
 8007c98:	b338      	cbz	r0, 8007cea <pow+0xa2>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 febf 	bl	8000a24 <__aeabi_dcmplt>
 8007ca6:	b300      	cbz	r0, 8007cea <pow+0xa2>
 8007ca8:	f7ff ff44 	bl	8007b34 <__errno>
 8007cac:	2322      	movs	r3, #34	; 0x22
 8007cae:	e01b      	b.n	8007ce8 <pow+0xa0>
 8007cb0:	ec47 6b10 	vmov	d0, r6, r7
 8007cb4:	f001 fd63 	bl	800977e <finite>
 8007cb8:	b9e0      	cbnz	r0, 8007cf4 <pow+0xac>
 8007cba:	eeb0 0a48 	vmov.f32	s0, s16
 8007cbe:	eef0 0a68 	vmov.f32	s1, s17
 8007cc2:	f001 fd5c 	bl	800977e <finite>
 8007cc6:	b1a8      	cbz	r0, 8007cf4 <pow+0xac>
 8007cc8:	ec45 4b10 	vmov	d0, r4, r5
 8007ccc:	f001 fd57 	bl	800977e <finite>
 8007cd0:	b180      	cbz	r0, 8007cf4 <pow+0xac>
 8007cd2:	4632      	mov	r2, r6
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 fecb 	bl	8000a74 <__aeabi_dcmpun>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0e2      	beq.n	8007ca8 <pow+0x60>
 8007ce2:	f7ff ff27 	bl	8007b34 <__errno>
 8007ce6:	2321      	movs	r3, #33	; 0x21
 8007ce8:	6003      	str	r3, [r0, #0]
 8007cea:	ecbd 8b02 	vpop	{d8}
 8007cee:	ec47 6b10 	vmov	d0, r6, r7
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 fe88 	bl	8000a10 <__aeabi_dcmpeq>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d0f2      	beq.n	8007cea <pow+0xa2>
 8007d04:	eeb0 0a48 	vmov.f32	s0, s16
 8007d08:	eef0 0a68 	vmov.f32	s1, s17
 8007d0c:	f001 fd37 	bl	800977e <finite>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d0ea      	beq.n	8007cea <pow+0xa2>
 8007d14:	ec45 4b10 	vmov	d0, r4, r5
 8007d18:	f001 fd31 	bl	800977e <finite>
 8007d1c:	e7c3      	b.n	8007ca6 <pow+0x5e>
 8007d1e:	4f01      	ldr	r7, [pc, #4]	; (8007d24 <pow+0xdc>)
 8007d20:	2600      	movs	r6, #0
 8007d22:	e7e2      	b.n	8007cea <pow+0xa2>
 8007d24:	3ff00000 	.word	0x3ff00000

08007d28 <sqrt>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	ed2d 8b02 	vpush	{d8}
 8007d2e:	ec55 4b10 	vmov	r4, r5, d0
 8007d32:	f000 ff61 	bl	8008bf8 <__ieee754_sqrt>
 8007d36:	4622      	mov	r2, r4
 8007d38:	462b      	mov	r3, r5
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d42:	eef0 8a60 	vmov.f32	s17, s1
 8007d46:	f7f8 fe95 	bl	8000a74 <__aeabi_dcmpun>
 8007d4a:	b990      	cbnz	r0, 8007d72 <sqrt+0x4a>
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4620      	mov	r0, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	f7f8 fe66 	bl	8000a24 <__aeabi_dcmplt>
 8007d58:	b158      	cbz	r0, 8007d72 <sqrt+0x4a>
 8007d5a:	f7ff feeb 	bl	8007b34 <__errno>
 8007d5e:	2321      	movs	r3, #33	; 0x21
 8007d60:	6003      	str	r3, [r0, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	4610      	mov	r0, r2
 8007d68:	4619      	mov	r1, r3
 8007d6a:	f7f8 fd13 	bl	8000794 <__aeabi_ddiv>
 8007d6e:	ec41 0b18 	vmov	d8, r0, r1
 8007d72:	eeb0 0a48 	vmov.f32	s0, s16
 8007d76:	eef0 0a68 	vmov.f32	s1, s17
 8007d7a:	ecbd 8b02 	vpop	{d8}
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}

08007d80 <__ieee754_pow>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	ed2d 8b06 	vpush	{d8-d10}
 8007d88:	b089      	sub	sp, #36	; 0x24
 8007d8a:	ed8d 1b00 	vstr	d1, [sp]
 8007d8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007d92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007d96:	ea58 0102 	orrs.w	r1, r8, r2
 8007d9a:	ec57 6b10 	vmov	r6, r7, d0
 8007d9e:	d115      	bne.n	8007dcc <__ieee754_pow+0x4c>
 8007da0:	19b3      	adds	r3, r6, r6
 8007da2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007da6:	4152      	adcs	r2, r2
 8007da8:	4299      	cmp	r1, r3
 8007daa:	4b89      	ldr	r3, [pc, #548]	; (8007fd0 <__ieee754_pow+0x250>)
 8007dac:	4193      	sbcs	r3, r2
 8007dae:	f080 84d2 	bcs.w	8008756 <__ieee754_pow+0x9d6>
 8007db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db6:	4630      	mov	r0, r6
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 fa0b 	bl	80001d4 <__adddf3>
 8007dbe:	ec41 0b10 	vmov	d0, r0, r1
 8007dc2:	b009      	add	sp, #36	; 0x24
 8007dc4:	ecbd 8b06 	vpop	{d8-d10}
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	4b81      	ldr	r3, [pc, #516]	; (8007fd4 <__ieee754_pow+0x254>)
 8007dce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	ee10 aa10 	vmov	sl, s0
 8007dd8:	463d      	mov	r5, r7
 8007dda:	dc06      	bgt.n	8007dea <__ieee754_pow+0x6a>
 8007ddc:	d101      	bne.n	8007de2 <__ieee754_pow+0x62>
 8007dde:	2e00      	cmp	r6, #0
 8007de0:	d1e7      	bne.n	8007db2 <__ieee754_pow+0x32>
 8007de2:	4598      	cmp	r8, r3
 8007de4:	dc01      	bgt.n	8007dea <__ieee754_pow+0x6a>
 8007de6:	d10f      	bne.n	8007e08 <__ieee754_pow+0x88>
 8007de8:	b172      	cbz	r2, 8007e08 <__ieee754_pow+0x88>
 8007dea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007dee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007df2:	ea55 050a 	orrs.w	r5, r5, sl
 8007df6:	d1dc      	bne.n	8007db2 <__ieee754_pow+0x32>
 8007df8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dfc:	18db      	adds	r3, r3, r3
 8007dfe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007e02:	4152      	adcs	r2, r2
 8007e04:	429d      	cmp	r5, r3
 8007e06:	e7d0      	b.n	8007daa <__ieee754_pow+0x2a>
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	da3b      	bge.n	8007e84 <__ieee754_pow+0x104>
 8007e0c:	4b72      	ldr	r3, [pc, #456]	; (8007fd8 <__ieee754_pow+0x258>)
 8007e0e:	4598      	cmp	r8, r3
 8007e10:	dc51      	bgt.n	8007eb6 <__ieee754_pow+0x136>
 8007e12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e16:	4598      	cmp	r8, r3
 8007e18:	f340 84ac 	ble.w	8008774 <__ieee754_pow+0x9f4>
 8007e1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e24:	2b14      	cmp	r3, #20
 8007e26:	dd0f      	ble.n	8007e48 <__ieee754_pow+0xc8>
 8007e28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e2c:	fa22 f103 	lsr.w	r1, r2, r3
 8007e30:	fa01 f303 	lsl.w	r3, r1, r3
 8007e34:	4293      	cmp	r3, r2
 8007e36:	f040 849d 	bne.w	8008774 <__ieee754_pow+0x9f4>
 8007e3a:	f001 0101 	and.w	r1, r1, #1
 8007e3e:	f1c1 0302 	rsb	r3, r1, #2
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	b182      	cbz	r2, 8007e68 <__ieee754_pow+0xe8>
 8007e46:	e05f      	b.n	8007f08 <__ieee754_pow+0x188>
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	d15b      	bne.n	8007f04 <__ieee754_pow+0x184>
 8007e4c:	f1c3 0314 	rsb	r3, r3, #20
 8007e50:	fa48 f103 	asr.w	r1, r8, r3
 8007e54:	fa01 f303 	lsl.w	r3, r1, r3
 8007e58:	4543      	cmp	r3, r8
 8007e5a:	f040 8488 	bne.w	800876e <__ieee754_pow+0x9ee>
 8007e5e:	f001 0101 	and.w	r1, r1, #1
 8007e62:	f1c1 0302 	rsb	r3, r1, #2
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	4b5c      	ldr	r3, [pc, #368]	; (8007fdc <__ieee754_pow+0x25c>)
 8007e6a:	4598      	cmp	r8, r3
 8007e6c:	d132      	bne.n	8007ed4 <__ieee754_pow+0x154>
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	f280 8478 	bge.w	8008766 <__ieee754_pow+0x9e6>
 8007e76:	4959      	ldr	r1, [pc, #356]	; (8007fdc <__ieee754_pow+0x25c>)
 8007e78:	4632      	mov	r2, r6
 8007e7a:	463b      	mov	r3, r7
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f7f8 fc89 	bl	8000794 <__aeabi_ddiv>
 8007e82:	e79c      	b.n	8007dbe <__ieee754_pow+0x3e>
 8007e84:	2300      	movs	r3, #0
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	2a00      	cmp	r2, #0
 8007e8a:	d13d      	bne.n	8007f08 <__ieee754_pow+0x188>
 8007e8c:	4b51      	ldr	r3, [pc, #324]	; (8007fd4 <__ieee754_pow+0x254>)
 8007e8e:	4598      	cmp	r8, r3
 8007e90:	d1ea      	bne.n	8007e68 <__ieee754_pow+0xe8>
 8007e92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e9e:	f000 845a 	beq.w	8008756 <__ieee754_pow+0x9d6>
 8007ea2:	4b4f      	ldr	r3, [pc, #316]	; (8007fe0 <__ieee754_pow+0x260>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	dd08      	ble.n	8007eba <__ieee754_pow+0x13a>
 8007ea8:	f1b9 0f00 	cmp.w	r9, #0
 8007eac:	f2c0 8457 	blt.w	800875e <__ieee754_pow+0x9de>
 8007eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eb4:	e783      	b.n	8007dbe <__ieee754_pow+0x3e>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e7e5      	b.n	8007e86 <__ieee754_pow+0x106>
 8007eba:	f1b9 0f00 	cmp.w	r9, #0
 8007ebe:	f04f 0000 	mov.w	r0, #0
 8007ec2:	f04f 0100 	mov.w	r1, #0
 8007ec6:	f6bf af7a 	bge.w	8007dbe <__ieee754_pow+0x3e>
 8007eca:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007ece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ed2:	e774      	b.n	8007dbe <__ieee754_pow+0x3e>
 8007ed4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007ed8:	d106      	bne.n	8007ee8 <__ieee754_pow+0x168>
 8007eda:	4632      	mov	r2, r6
 8007edc:	463b      	mov	r3, r7
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 fb2d 	bl	8000540 <__aeabi_dmul>
 8007ee6:	e76a      	b.n	8007dbe <__ieee754_pow+0x3e>
 8007ee8:	4b3e      	ldr	r3, [pc, #248]	; (8007fe4 <__ieee754_pow+0x264>)
 8007eea:	4599      	cmp	r9, r3
 8007eec:	d10c      	bne.n	8007f08 <__ieee754_pow+0x188>
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	db0a      	blt.n	8007f08 <__ieee754_pow+0x188>
 8007ef2:	ec47 6b10 	vmov	d0, r6, r7
 8007ef6:	b009      	add	sp, #36	; 0x24
 8007ef8:	ecbd 8b06 	vpop	{d8-d10}
 8007efc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	f000 be7a 	b.w	8008bf8 <__ieee754_sqrt>
 8007f04:	2300      	movs	r3, #0
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	ec47 6b10 	vmov	d0, r6, r7
 8007f0c:	f001 fc2e 	bl	800976c <fabs>
 8007f10:	ec51 0b10 	vmov	r0, r1, d0
 8007f14:	f1ba 0f00 	cmp.w	sl, #0
 8007f18:	d129      	bne.n	8007f6e <__ieee754_pow+0x1ee>
 8007f1a:	b124      	cbz	r4, 8007f26 <__ieee754_pow+0x1a6>
 8007f1c:	4b2f      	ldr	r3, [pc, #188]	; (8007fdc <__ieee754_pow+0x25c>)
 8007f1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d123      	bne.n	8007f6e <__ieee754_pow+0x1ee>
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	da05      	bge.n	8007f38 <__ieee754_pow+0x1b8>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	2000      	movs	r0, #0
 8007f32:	492a      	ldr	r1, [pc, #168]	; (8007fdc <__ieee754_pow+0x25c>)
 8007f34:	f7f8 fc2e 	bl	8000794 <__aeabi_ddiv>
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	f6bf af40 	bge.w	8007dbe <__ieee754_pow+0x3e>
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f48:	4323      	orrs	r3, r4
 8007f4a:	d108      	bne.n	8007f5e <__ieee754_pow+0x1de>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4610      	mov	r0, r2
 8007f52:	4619      	mov	r1, r3
 8007f54:	f7f8 f93c 	bl	80001d0 <__aeabi_dsub>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	e78f      	b.n	8007e7e <__ieee754_pow+0xfe>
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	f47f af2c 	bne.w	8007dbe <__ieee754_pow+0x3e>
 8007f66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	e727      	b.n	8007dbe <__ieee754_pow+0x3e>
 8007f6e:	0feb      	lsrs	r3, r5, #31
 8007f70:	3b01      	subs	r3, #1
 8007f72:	9306      	str	r3, [sp, #24]
 8007f74:	9a06      	ldr	r2, [sp, #24]
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d102      	bne.n	8007f82 <__ieee754_pow+0x202>
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	e7e6      	b.n	8007f50 <__ieee754_pow+0x1d0>
 8007f82:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <__ieee754_pow+0x268>)
 8007f84:	4598      	cmp	r8, r3
 8007f86:	f340 80fb 	ble.w	8008180 <__ieee754_pow+0x400>
 8007f8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f8e:	4598      	cmp	r8, r3
 8007f90:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <__ieee754_pow+0x260>)
 8007f92:	dd0c      	ble.n	8007fae <__ieee754_pow+0x22e>
 8007f94:	429c      	cmp	r4, r3
 8007f96:	dc0f      	bgt.n	8007fb8 <__ieee754_pow+0x238>
 8007f98:	f1b9 0f00 	cmp.w	r9, #0
 8007f9c:	da0f      	bge.n	8007fbe <__ieee754_pow+0x23e>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	b009      	add	sp, #36	; 0x24
 8007fa2:	ecbd 8b06 	vpop	{d8-d10}
 8007fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	f001 bbd6 	b.w	800975a <__math_oflow>
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	dbf2      	blt.n	8007f98 <__ieee754_pow+0x218>
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <__ieee754_pow+0x25c>)
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	dd19      	ble.n	8007fec <__ieee754_pow+0x26c>
 8007fb8:	f1b9 0f00 	cmp.w	r9, #0
 8007fbc:	dcef      	bgt.n	8007f9e <__ieee754_pow+0x21e>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	b009      	add	sp, #36	; 0x24
 8007fc2:	ecbd 8b06 	vpop	{d8-d10}
 8007fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f001 bbbd 	b.w	8009748 <__math_uflow>
 8007fce:	bf00      	nop
 8007fd0:	fff00000 	.word	0xfff00000
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	433fffff 	.word	0x433fffff
 8007fdc:	3ff00000 	.word	0x3ff00000
 8007fe0:	3fefffff 	.word	0x3fefffff
 8007fe4:	3fe00000 	.word	0x3fe00000
 8007fe8:	41e00000 	.word	0x41e00000
 8007fec:	4b60      	ldr	r3, [pc, #384]	; (8008170 <__ieee754_pow+0x3f0>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f7f8 f8ee 	bl	80001d0 <__aeabi_dsub>
 8007ff4:	a354      	add	r3, pc, #336	; (adr r3, 8008148 <__ieee754_pow+0x3c8>)
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	460d      	mov	r5, r1
 8007ffe:	f7f8 fa9f 	bl	8000540 <__aeabi_dmul>
 8008002:	a353      	add	r3, pc, #332	; (adr r3, 8008150 <__ieee754_pow+0x3d0>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	4606      	mov	r6, r0
 800800a:	460f      	mov	r7, r1
 800800c:	4620      	mov	r0, r4
 800800e:	4629      	mov	r1, r5
 8008010:	f7f8 fa96 	bl	8000540 <__aeabi_dmul>
 8008014:	4b57      	ldr	r3, [pc, #348]	; (8008174 <__ieee754_pow+0x3f4>)
 8008016:	4682      	mov	sl, r0
 8008018:	468b      	mov	fp, r1
 800801a:	2200      	movs	r2, #0
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 fa8e 	bl	8000540 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	a14b      	add	r1, pc, #300	; (adr r1, 8008158 <__ieee754_pow+0x3d8>)
 800802a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800802e:	f7f8 f8cf 	bl	80001d0 <__aeabi_dsub>
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	f7f8 fa83 	bl	8000540 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	2000      	movs	r0, #0
 8008040:	494d      	ldr	r1, [pc, #308]	; (8008178 <__ieee754_pow+0x3f8>)
 8008042:	f7f8 f8c5 	bl	80001d0 <__aeabi_dsub>
 8008046:	4622      	mov	r2, r4
 8008048:	4680      	mov	r8, r0
 800804a:	4689      	mov	r9, r1
 800804c:	462b      	mov	r3, r5
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 fa75 	bl	8000540 <__aeabi_dmul>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 fa6f 	bl	8000540 <__aeabi_dmul>
 8008062:	a33f      	add	r3, pc, #252	; (adr r3, 8008160 <__ieee754_pow+0x3e0>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 fa6a 	bl	8000540 <__aeabi_dmul>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4650      	mov	r0, sl
 8008072:	4659      	mov	r1, fp
 8008074:	f7f8 f8ac 	bl	80001d0 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f8a6 	bl	80001d4 <__adddf3>
 8008088:	2000      	movs	r0, #0
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	f7f8 f89d 	bl	80001d0 <__aeabi_dsub>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4640      	mov	r0, r8
 800809c:	4649      	mov	r1, r9
 800809e:	f7f8 f897 	bl	80001d0 <__aeabi_dsub>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	9a06      	ldr	r2, [sp, #24]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	4682      	mov	sl, r0
 80080ac:	468b      	mov	fp, r1
 80080ae:	f040 81e7 	bne.w	8008480 <__ieee754_pow+0x700>
 80080b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008168 <__ieee754_pow+0x3e8>
 80080b6:	eeb0 8a47 	vmov.f32	s16, s14
 80080ba:	eef0 8a67 	vmov.f32	s17, s15
 80080be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080c2:	2600      	movs	r6, #0
 80080c4:	4632      	mov	r2, r6
 80080c6:	463b      	mov	r3, r7
 80080c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080cc:	f7f8 f880 	bl	80001d0 <__aeabi_dsub>
 80080d0:	4622      	mov	r2, r4
 80080d2:	462b      	mov	r3, r5
 80080d4:	f7f8 fa34 	bl	8000540 <__aeabi_dmul>
 80080d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080dc:	4680      	mov	r8, r0
 80080de:	4689      	mov	r9, r1
 80080e0:	4650      	mov	r0, sl
 80080e2:	4659      	mov	r1, fp
 80080e4:	f7f8 fa2c 	bl	8000540 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 f870 	bl	80001d4 <__adddf3>
 80080f4:	4632      	mov	r2, r6
 80080f6:	463b      	mov	r3, r7
 80080f8:	4680      	mov	r8, r0
 80080fa:	4689      	mov	r9, r1
 80080fc:	4620      	mov	r0, r4
 80080fe:	4629      	mov	r1, r5
 8008100:	f7f8 fa1e 	bl	8000540 <__aeabi_dmul>
 8008104:	460b      	mov	r3, r1
 8008106:	4604      	mov	r4, r0
 8008108:	460d      	mov	r5, r1
 800810a:	4602      	mov	r2, r0
 800810c:	4649      	mov	r1, r9
 800810e:	4640      	mov	r0, r8
 8008110:	f7f8 f860 	bl	80001d4 <__adddf3>
 8008114:	4b19      	ldr	r3, [pc, #100]	; (800817c <__ieee754_pow+0x3fc>)
 8008116:	4299      	cmp	r1, r3
 8008118:	ec45 4b19 	vmov	d9, r4, r5
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	468b      	mov	fp, r1
 8008122:	f340 82f1 	ble.w	8008708 <__ieee754_pow+0x988>
 8008126:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800812a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800812e:	4303      	orrs	r3, r0
 8008130:	f000 81e4 	beq.w	80084fc <__ieee754_pow+0x77c>
 8008134:	ec51 0b18 	vmov	r0, r1, d8
 8008138:	2200      	movs	r2, #0
 800813a:	2300      	movs	r3, #0
 800813c:	f7f8 fc72 	bl	8000a24 <__aeabi_dcmplt>
 8008140:	3800      	subs	r0, #0
 8008142:	bf18      	it	ne
 8008144:	2001      	movne	r0, #1
 8008146:	e72b      	b.n	8007fa0 <__ieee754_pow+0x220>
 8008148:	60000000 	.word	0x60000000
 800814c:	3ff71547 	.word	0x3ff71547
 8008150:	f85ddf44 	.word	0xf85ddf44
 8008154:	3e54ae0b 	.word	0x3e54ae0b
 8008158:	55555555 	.word	0x55555555
 800815c:	3fd55555 	.word	0x3fd55555
 8008160:	652b82fe 	.word	0x652b82fe
 8008164:	3ff71547 	.word	0x3ff71547
 8008168:	00000000 	.word	0x00000000
 800816c:	bff00000 	.word	0xbff00000
 8008170:	3ff00000 	.word	0x3ff00000
 8008174:	3fd00000 	.word	0x3fd00000
 8008178:	3fe00000 	.word	0x3fe00000
 800817c:	408fffff 	.word	0x408fffff
 8008180:	4bd5      	ldr	r3, [pc, #852]	; (80084d8 <__ieee754_pow+0x758>)
 8008182:	402b      	ands	r3, r5
 8008184:	2200      	movs	r2, #0
 8008186:	b92b      	cbnz	r3, 8008194 <__ieee754_pow+0x414>
 8008188:	4bd4      	ldr	r3, [pc, #848]	; (80084dc <__ieee754_pow+0x75c>)
 800818a:	f7f8 f9d9 	bl	8000540 <__aeabi_dmul>
 800818e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008192:	460c      	mov	r4, r1
 8008194:	1523      	asrs	r3, r4, #20
 8008196:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800819a:	4413      	add	r3, r2
 800819c:	9305      	str	r3, [sp, #20]
 800819e:	4bd0      	ldr	r3, [pc, #832]	; (80084e0 <__ieee754_pow+0x760>)
 80081a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80081a8:	429c      	cmp	r4, r3
 80081aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80081ae:	dd08      	ble.n	80081c2 <__ieee754_pow+0x442>
 80081b0:	4bcc      	ldr	r3, [pc, #816]	; (80084e4 <__ieee754_pow+0x764>)
 80081b2:	429c      	cmp	r4, r3
 80081b4:	f340 8162 	ble.w	800847c <__ieee754_pow+0x6fc>
 80081b8:	9b05      	ldr	r3, [sp, #20]
 80081ba:	3301      	adds	r3, #1
 80081bc:	9305      	str	r3, [sp, #20]
 80081be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081c2:	2400      	movs	r4, #0
 80081c4:	00e3      	lsls	r3, r4, #3
 80081c6:	9307      	str	r3, [sp, #28]
 80081c8:	4bc7      	ldr	r3, [pc, #796]	; (80084e8 <__ieee754_pow+0x768>)
 80081ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081ce:	ed93 7b00 	vldr	d7, [r3]
 80081d2:	4629      	mov	r1, r5
 80081d4:	ec53 2b17 	vmov	r2, r3, d7
 80081d8:	eeb0 9a47 	vmov.f32	s18, s14
 80081dc:	eef0 9a67 	vmov.f32	s19, s15
 80081e0:	4682      	mov	sl, r0
 80081e2:	f7f7 fff5 	bl	80001d0 <__aeabi_dsub>
 80081e6:	4652      	mov	r2, sl
 80081e8:	4606      	mov	r6, r0
 80081ea:	460f      	mov	r7, r1
 80081ec:	462b      	mov	r3, r5
 80081ee:	ec51 0b19 	vmov	r0, r1, d9
 80081f2:	f7f7 ffef 	bl	80001d4 <__adddf3>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	2000      	movs	r0, #0
 80081fc:	49bb      	ldr	r1, [pc, #748]	; (80084ec <__ieee754_pow+0x76c>)
 80081fe:	f7f8 fac9 	bl	8000794 <__aeabi_ddiv>
 8008202:	ec41 0b1a 	vmov	d10, r0, r1
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4630      	mov	r0, r6
 800820c:	4639      	mov	r1, r7
 800820e:	f7f8 f997 	bl	8000540 <__aeabi_dmul>
 8008212:	2300      	movs	r3, #0
 8008214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008218:	9302      	str	r3, [sp, #8]
 800821a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800821e:	46ab      	mov	fp, r5
 8008220:	106d      	asrs	r5, r5, #1
 8008222:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008226:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800822a:	ec41 0b18 	vmov	d8, r0, r1
 800822e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008232:	2200      	movs	r2, #0
 8008234:	4640      	mov	r0, r8
 8008236:	4649      	mov	r1, r9
 8008238:	4614      	mov	r4, r2
 800823a:	461d      	mov	r5, r3
 800823c:	f7f8 f980 	bl	8000540 <__aeabi_dmul>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f7 ffc2 	bl	80001d0 <__aeabi_dsub>
 800824c:	ec53 2b19 	vmov	r2, r3, d9
 8008250:	4606      	mov	r6, r0
 8008252:	460f      	mov	r7, r1
 8008254:	4620      	mov	r0, r4
 8008256:	4629      	mov	r1, r5
 8008258:	f7f7 ffba 	bl	80001d0 <__aeabi_dsub>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4650      	mov	r0, sl
 8008262:	4659      	mov	r1, fp
 8008264:	f7f7 ffb4 	bl	80001d0 <__aeabi_dsub>
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	f7f8 f968 	bl	8000540 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f7f7 ffaa 	bl	80001d0 <__aeabi_dsub>
 800827c:	ec53 2b1a 	vmov	r2, r3, d10
 8008280:	f7f8 f95e 	bl	8000540 <__aeabi_dmul>
 8008284:	ec53 2b18 	vmov	r2, r3, d8
 8008288:	ec41 0b19 	vmov	d9, r0, r1
 800828c:	ec51 0b18 	vmov	r0, r1, d8
 8008290:	f7f8 f956 	bl	8000540 <__aeabi_dmul>
 8008294:	a37c      	add	r3, pc, #496	; (adr r3, 8008488 <__ieee754_pow+0x708>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	4604      	mov	r4, r0
 800829c:	460d      	mov	r5, r1
 800829e:	f7f8 f94f 	bl	8000540 <__aeabi_dmul>
 80082a2:	a37b      	add	r3, pc, #492	; (adr r3, 8008490 <__ieee754_pow+0x710>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 ff94 	bl	80001d4 <__adddf3>
 80082ac:	4622      	mov	r2, r4
 80082ae:	462b      	mov	r3, r5
 80082b0:	f7f8 f946 	bl	8000540 <__aeabi_dmul>
 80082b4:	a378      	add	r3, pc, #480	; (adr r3, 8008498 <__ieee754_pow+0x718>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f7 ff8b 	bl	80001d4 <__adddf3>
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	f7f8 f93d 	bl	8000540 <__aeabi_dmul>
 80082c6:	a376      	add	r3, pc, #472	; (adr r3, 80084a0 <__ieee754_pow+0x720>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f7 ff82 	bl	80001d4 <__adddf3>
 80082d0:	4622      	mov	r2, r4
 80082d2:	462b      	mov	r3, r5
 80082d4:	f7f8 f934 	bl	8000540 <__aeabi_dmul>
 80082d8:	a373      	add	r3, pc, #460	; (adr r3, 80084a8 <__ieee754_pow+0x728>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f7 ff79 	bl	80001d4 <__adddf3>
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	f7f8 f92b 	bl	8000540 <__aeabi_dmul>
 80082ea:	a371      	add	r3, pc, #452	; (adr r3, 80084b0 <__ieee754_pow+0x730>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f7 ff70 	bl	80001d4 <__adddf3>
 80082f4:	4622      	mov	r2, r4
 80082f6:	4606      	mov	r6, r0
 80082f8:	460f      	mov	r7, r1
 80082fa:	462b      	mov	r3, r5
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f8 f91e 	bl	8000540 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4630      	mov	r0, r6
 800830a:	4639      	mov	r1, r7
 800830c:	f7f8 f918 	bl	8000540 <__aeabi_dmul>
 8008310:	4642      	mov	r2, r8
 8008312:	4604      	mov	r4, r0
 8008314:	460d      	mov	r5, r1
 8008316:	464b      	mov	r3, r9
 8008318:	ec51 0b18 	vmov	r0, r1, d8
 800831c:	f7f7 ff5a 	bl	80001d4 <__adddf3>
 8008320:	ec53 2b19 	vmov	r2, r3, d9
 8008324:	f7f8 f90c 	bl	8000540 <__aeabi_dmul>
 8008328:	4622      	mov	r2, r4
 800832a:	462b      	mov	r3, r5
 800832c:	f7f7 ff52 	bl	80001d4 <__adddf3>
 8008330:	4642      	mov	r2, r8
 8008332:	4682      	mov	sl, r0
 8008334:	468b      	mov	fp, r1
 8008336:	464b      	mov	r3, r9
 8008338:	4640      	mov	r0, r8
 800833a:	4649      	mov	r1, r9
 800833c:	f7f8 f900 	bl	8000540 <__aeabi_dmul>
 8008340:	4b6b      	ldr	r3, [pc, #428]	; (80084f0 <__ieee754_pow+0x770>)
 8008342:	2200      	movs	r2, #0
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	f7f7 ff44 	bl	80001d4 <__adddf3>
 800834c:	4652      	mov	r2, sl
 800834e:	465b      	mov	r3, fp
 8008350:	f7f7 ff40 	bl	80001d4 <__adddf3>
 8008354:	2000      	movs	r0, #0
 8008356:	4604      	mov	r4, r0
 8008358:	460d      	mov	r5, r1
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4640      	mov	r0, r8
 8008360:	4649      	mov	r1, r9
 8008362:	f7f8 f8ed 	bl	8000540 <__aeabi_dmul>
 8008366:	4b62      	ldr	r3, [pc, #392]	; (80084f0 <__ieee754_pow+0x770>)
 8008368:	4680      	mov	r8, r0
 800836a:	4689      	mov	r9, r1
 800836c:	2200      	movs	r2, #0
 800836e:	4620      	mov	r0, r4
 8008370:	4629      	mov	r1, r5
 8008372:	f7f7 ff2d 	bl	80001d0 <__aeabi_dsub>
 8008376:	4632      	mov	r2, r6
 8008378:	463b      	mov	r3, r7
 800837a:	f7f7 ff29 	bl	80001d0 <__aeabi_dsub>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4650      	mov	r0, sl
 8008384:	4659      	mov	r1, fp
 8008386:	f7f7 ff23 	bl	80001d0 <__aeabi_dsub>
 800838a:	ec53 2b18 	vmov	r2, r3, d8
 800838e:	f7f8 f8d7 	bl	8000540 <__aeabi_dmul>
 8008392:	4622      	mov	r2, r4
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	462b      	mov	r3, r5
 800839a:	ec51 0b19 	vmov	r0, r1, d9
 800839e:	f7f8 f8cf 	bl	8000540 <__aeabi_dmul>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4630      	mov	r0, r6
 80083a8:	4639      	mov	r1, r7
 80083aa:	f7f7 ff13 	bl	80001d4 <__adddf3>
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	f7f7 ff0b 	bl	80001d4 <__adddf3>
 80083be:	a33e      	add	r3, pc, #248	; (adr r3, 80084b8 <__ieee754_pow+0x738>)
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	2000      	movs	r0, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	460d      	mov	r5, r1
 80083ca:	f7f8 f8b9 	bl	8000540 <__aeabi_dmul>
 80083ce:	4642      	mov	r2, r8
 80083d0:	ec41 0b18 	vmov	d8, r0, r1
 80083d4:	464b      	mov	r3, r9
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f7 fef9 	bl	80001d0 <__aeabi_dsub>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f7 fef3 	bl	80001d0 <__aeabi_dsub>
 80083ea:	a335      	add	r3, pc, #212	; (adr r3, 80084c0 <__ieee754_pow+0x740>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f8 f8a6 	bl	8000540 <__aeabi_dmul>
 80083f4:	a334      	add	r3, pc, #208	; (adr r3, 80084c8 <__ieee754_pow+0x748>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 f89d 	bl	8000540 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f7 fee1 	bl	80001d4 <__adddf3>
 8008412:	9a07      	ldr	r2, [sp, #28]
 8008414:	4b37      	ldr	r3, [pc, #220]	; (80084f4 <__ieee754_pow+0x774>)
 8008416:	4413      	add	r3, r2
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f7 feda 	bl	80001d4 <__adddf3>
 8008420:	4682      	mov	sl, r0
 8008422:	9805      	ldr	r0, [sp, #20]
 8008424:	468b      	mov	fp, r1
 8008426:	f7f8 f821 	bl	800046c <__aeabi_i2d>
 800842a:	9a07      	ldr	r2, [sp, #28]
 800842c:	4b32      	ldr	r3, [pc, #200]	; (80084f8 <__ieee754_pow+0x778>)
 800842e:	4413      	add	r3, r2
 8008430:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	4652      	mov	r2, sl
 800843a:	465b      	mov	r3, fp
 800843c:	ec51 0b18 	vmov	r0, r1, d8
 8008440:	f7f7 fec8 	bl	80001d4 <__adddf3>
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	f7f7 fec4 	bl	80001d4 <__adddf3>
 800844c:	4632      	mov	r2, r6
 800844e:	463b      	mov	r3, r7
 8008450:	f7f7 fec0 	bl	80001d4 <__adddf3>
 8008454:	2000      	movs	r0, #0
 8008456:	4632      	mov	r2, r6
 8008458:	463b      	mov	r3, r7
 800845a:	4604      	mov	r4, r0
 800845c:	460d      	mov	r5, r1
 800845e:	f7f7 feb7 	bl	80001d0 <__aeabi_dsub>
 8008462:	4642      	mov	r2, r8
 8008464:	464b      	mov	r3, r9
 8008466:	f7f7 feb3 	bl	80001d0 <__aeabi_dsub>
 800846a:	ec53 2b18 	vmov	r2, r3, d8
 800846e:	f7f7 feaf 	bl	80001d0 <__aeabi_dsub>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4650      	mov	r0, sl
 8008478:	4659      	mov	r1, fp
 800847a:	e610      	b.n	800809e <__ieee754_pow+0x31e>
 800847c:	2401      	movs	r4, #1
 800847e:	e6a1      	b.n	80081c4 <__ieee754_pow+0x444>
 8008480:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80084d0 <__ieee754_pow+0x750>
 8008484:	e617      	b.n	80080b6 <__ieee754_pow+0x336>
 8008486:	bf00      	nop
 8008488:	4a454eef 	.word	0x4a454eef
 800848c:	3fca7e28 	.word	0x3fca7e28
 8008490:	93c9db65 	.word	0x93c9db65
 8008494:	3fcd864a 	.word	0x3fcd864a
 8008498:	a91d4101 	.word	0xa91d4101
 800849c:	3fd17460 	.word	0x3fd17460
 80084a0:	518f264d 	.word	0x518f264d
 80084a4:	3fd55555 	.word	0x3fd55555
 80084a8:	db6fabff 	.word	0xdb6fabff
 80084ac:	3fdb6db6 	.word	0x3fdb6db6
 80084b0:	33333303 	.word	0x33333303
 80084b4:	3fe33333 	.word	0x3fe33333
 80084b8:	e0000000 	.word	0xe0000000
 80084bc:	3feec709 	.word	0x3feec709
 80084c0:	dc3a03fd 	.word	0xdc3a03fd
 80084c4:	3feec709 	.word	0x3feec709
 80084c8:	145b01f5 	.word	0x145b01f5
 80084cc:	be3e2fe0 	.word	0xbe3e2fe0
 80084d0:	00000000 	.word	0x00000000
 80084d4:	3ff00000 	.word	0x3ff00000
 80084d8:	7ff00000 	.word	0x7ff00000
 80084dc:	43400000 	.word	0x43400000
 80084e0:	0003988e 	.word	0x0003988e
 80084e4:	000bb679 	.word	0x000bb679
 80084e8:	08009b00 	.word	0x08009b00
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40080000 	.word	0x40080000
 80084f4:	08009b20 	.word	0x08009b20
 80084f8:	08009b10 	.word	0x08009b10
 80084fc:	a3b5      	add	r3, pc, #724	; (adr r3, 80087d4 <__ieee754_pow+0xa54>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f7 fe65 	bl	80001d4 <__adddf3>
 800850a:	4622      	mov	r2, r4
 800850c:	ec41 0b1a 	vmov	d10, r0, r1
 8008510:	462b      	mov	r3, r5
 8008512:	4630      	mov	r0, r6
 8008514:	4639      	mov	r1, r7
 8008516:	f7f7 fe5b 	bl	80001d0 <__aeabi_dsub>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	ec51 0b1a 	vmov	r0, r1, d10
 8008522:	f7f8 fa9d 	bl	8000a60 <__aeabi_dcmpgt>
 8008526:	2800      	cmp	r0, #0
 8008528:	f47f ae04 	bne.w	8008134 <__ieee754_pow+0x3b4>
 800852c:	4aa4      	ldr	r2, [pc, #656]	; (80087c0 <__ieee754_pow+0xa40>)
 800852e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008532:	4293      	cmp	r3, r2
 8008534:	f340 8108 	ble.w	8008748 <__ieee754_pow+0x9c8>
 8008538:	151b      	asrs	r3, r3, #20
 800853a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800853e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008542:	fa4a f303 	asr.w	r3, sl, r3
 8008546:	445b      	add	r3, fp
 8008548:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800854c:	4e9d      	ldr	r6, [pc, #628]	; (80087c4 <__ieee754_pow+0xa44>)
 800854e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008552:	4116      	asrs	r6, r2
 8008554:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008558:	2000      	movs	r0, #0
 800855a:	ea23 0106 	bic.w	r1, r3, r6
 800855e:	f1c2 0214 	rsb	r2, r2, #20
 8008562:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008566:	fa4a fa02 	asr.w	sl, sl, r2
 800856a:	f1bb 0f00 	cmp.w	fp, #0
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4620      	mov	r0, r4
 8008574:	4629      	mov	r1, r5
 8008576:	bfb8      	it	lt
 8008578:	f1ca 0a00 	rsblt	sl, sl, #0
 800857c:	f7f7 fe28 	bl	80001d0 <__aeabi_dsub>
 8008580:	ec41 0b19 	vmov	d9, r0, r1
 8008584:	4642      	mov	r2, r8
 8008586:	464b      	mov	r3, r9
 8008588:	ec51 0b19 	vmov	r0, r1, d9
 800858c:	f7f7 fe22 	bl	80001d4 <__adddf3>
 8008590:	a37b      	add	r3, pc, #492	; (adr r3, 8008780 <__ieee754_pow+0xa00>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	2000      	movs	r0, #0
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	f7f7 ffd0 	bl	8000540 <__aeabi_dmul>
 80085a0:	ec53 2b19 	vmov	r2, r3, d9
 80085a4:	4606      	mov	r6, r0
 80085a6:	460f      	mov	r7, r1
 80085a8:	4620      	mov	r0, r4
 80085aa:	4629      	mov	r1, r5
 80085ac:	f7f7 fe10 	bl	80001d0 <__aeabi_dsub>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4640      	mov	r0, r8
 80085b6:	4649      	mov	r1, r9
 80085b8:	f7f7 fe0a 	bl	80001d0 <__aeabi_dsub>
 80085bc:	a372      	add	r3, pc, #456	; (adr r3, 8008788 <__ieee754_pow+0xa08>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 ffbd 	bl	8000540 <__aeabi_dmul>
 80085c6:	a372      	add	r3, pc, #456	; (adr r3, 8008790 <__ieee754_pow+0xa10>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	4680      	mov	r8, r0
 80085ce:	4689      	mov	r9, r1
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	f7f7 ffb4 	bl	8000540 <__aeabi_dmul>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f7 fdf8 	bl	80001d4 <__adddf3>
 80085e4:	4604      	mov	r4, r0
 80085e6:	460d      	mov	r5, r1
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4630      	mov	r0, r6
 80085ee:	4639      	mov	r1, r7
 80085f0:	f7f7 fdf0 	bl	80001d4 <__adddf3>
 80085f4:	4632      	mov	r2, r6
 80085f6:	463b      	mov	r3, r7
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	f7f7 fde8 	bl	80001d0 <__aeabi_dsub>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f7f7 fde2 	bl	80001d0 <__aeabi_dsub>
 800860c:	4642      	mov	r2, r8
 800860e:	4606      	mov	r6, r0
 8008610:	460f      	mov	r7, r1
 8008612:	464b      	mov	r3, r9
 8008614:	4640      	mov	r0, r8
 8008616:	4649      	mov	r1, r9
 8008618:	f7f7 ff92 	bl	8000540 <__aeabi_dmul>
 800861c:	a35e      	add	r3, pc, #376	; (adr r3, 8008798 <__ieee754_pow+0xa18>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	4604      	mov	r4, r0
 8008624:	460d      	mov	r5, r1
 8008626:	f7f7 ff8b 	bl	8000540 <__aeabi_dmul>
 800862a:	a35d      	add	r3, pc, #372	; (adr r3, 80087a0 <__ieee754_pow+0xa20>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fdce 	bl	80001d0 <__aeabi_dsub>
 8008634:	4622      	mov	r2, r4
 8008636:	462b      	mov	r3, r5
 8008638:	f7f7 ff82 	bl	8000540 <__aeabi_dmul>
 800863c:	a35a      	add	r3, pc, #360	; (adr r3, 80087a8 <__ieee754_pow+0xa28>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 fdc7 	bl	80001d4 <__adddf3>
 8008646:	4622      	mov	r2, r4
 8008648:	462b      	mov	r3, r5
 800864a:	f7f7 ff79 	bl	8000540 <__aeabi_dmul>
 800864e:	a358      	add	r3, pc, #352	; (adr r3, 80087b0 <__ieee754_pow+0xa30>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 fdbc 	bl	80001d0 <__aeabi_dsub>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 ff70 	bl	8000540 <__aeabi_dmul>
 8008660:	a355      	add	r3, pc, #340	; (adr r3, 80087b8 <__ieee754_pow+0xa38>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fdb5 	bl	80001d4 <__adddf3>
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	f7f7 ff67 	bl	8000540 <__aeabi_dmul>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4640      	mov	r0, r8
 8008678:	4649      	mov	r1, r9
 800867a:	f7f7 fda9 	bl	80001d0 <__aeabi_dsub>
 800867e:	4604      	mov	r4, r0
 8008680:	460d      	mov	r5, r1
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4640      	mov	r0, r8
 8008688:	4649      	mov	r1, r9
 800868a:	f7f7 ff59 	bl	8000540 <__aeabi_dmul>
 800868e:	2200      	movs	r2, #0
 8008690:	ec41 0b19 	vmov	d9, r0, r1
 8008694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 fd98 	bl	80001d0 <__aeabi_dsub>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	ec51 0b19 	vmov	r0, r1, d9
 80086a8:	f7f8 f874 	bl	8000794 <__aeabi_ddiv>
 80086ac:	4632      	mov	r2, r6
 80086ae:	4604      	mov	r4, r0
 80086b0:	460d      	mov	r5, r1
 80086b2:	463b      	mov	r3, r7
 80086b4:	4640      	mov	r0, r8
 80086b6:	4649      	mov	r1, r9
 80086b8:	f7f7 ff42 	bl	8000540 <__aeabi_dmul>
 80086bc:	4632      	mov	r2, r6
 80086be:	463b      	mov	r3, r7
 80086c0:	f7f7 fd88 	bl	80001d4 <__adddf3>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	f7f7 fd80 	bl	80001d0 <__aeabi_dsub>
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	f7f7 fd7c 	bl	80001d0 <__aeabi_dsub>
 80086d8:	460b      	mov	r3, r1
 80086da:	4602      	mov	r2, r0
 80086dc:	493a      	ldr	r1, [pc, #232]	; (80087c8 <__ieee754_pow+0xa48>)
 80086de:	2000      	movs	r0, #0
 80086e0:	f7f7 fd76 	bl	80001d0 <__aeabi_dsub>
 80086e4:	ec41 0b10 	vmov	d0, r0, r1
 80086e8:	ee10 3a90 	vmov	r3, s1
 80086ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80086f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f4:	da2b      	bge.n	800874e <__ieee754_pow+0x9ce>
 80086f6:	4650      	mov	r0, sl
 80086f8:	f001 f8ce 	bl	8009898 <scalbn>
 80086fc:	ec51 0b10 	vmov	r0, r1, d0
 8008700:	ec53 2b18 	vmov	r2, r3, d8
 8008704:	f7ff bbed 	b.w	8007ee2 <__ieee754_pow+0x162>
 8008708:	4b30      	ldr	r3, [pc, #192]	; (80087cc <__ieee754_pow+0xa4c>)
 800870a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800870e:	429e      	cmp	r6, r3
 8008710:	f77f af0c 	ble.w	800852c <__ieee754_pow+0x7ac>
 8008714:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <__ieee754_pow+0xa50>)
 8008716:	440b      	add	r3, r1
 8008718:	4303      	orrs	r3, r0
 800871a:	d009      	beq.n	8008730 <__ieee754_pow+0x9b0>
 800871c:	ec51 0b18 	vmov	r0, r1, d8
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	f7f8 f97e 	bl	8000a24 <__aeabi_dcmplt>
 8008728:	3800      	subs	r0, #0
 800872a:	bf18      	it	ne
 800872c:	2001      	movne	r0, #1
 800872e:	e447      	b.n	8007fc0 <__ieee754_pow+0x240>
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	f7f7 fd4c 	bl	80001d0 <__aeabi_dsub>
 8008738:	4642      	mov	r2, r8
 800873a:	464b      	mov	r3, r9
 800873c:	f7f8 f986 	bl	8000a4c <__aeabi_dcmpge>
 8008740:	2800      	cmp	r0, #0
 8008742:	f43f aef3 	beq.w	800852c <__ieee754_pow+0x7ac>
 8008746:	e7e9      	b.n	800871c <__ieee754_pow+0x99c>
 8008748:	f04f 0a00 	mov.w	sl, #0
 800874c:	e71a      	b.n	8008584 <__ieee754_pow+0x804>
 800874e:	ec51 0b10 	vmov	r0, r1, d0
 8008752:	4619      	mov	r1, r3
 8008754:	e7d4      	b.n	8008700 <__ieee754_pow+0x980>
 8008756:	491c      	ldr	r1, [pc, #112]	; (80087c8 <__ieee754_pow+0xa48>)
 8008758:	2000      	movs	r0, #0
 800875a:	f7ff bb30 	b.w	8007dbe <__ieee754_pow+0x3e>
 800875e:	2000      	movs	r0, #0
 8008760:	2100      	movs	r1, #0
 8008762:	f7ff bb2c 	b.w	8007dbe <__ieee754_pow+0x3e>
 8008766:	4630      	mov	r0, r6
 8008768:	4639      	mov	r1, r7
 800876a:	f7ff bb28 	b.w	8007dbe <__ieee754_pow+0x3e>
 800876e:	9204      	str	r2, [sp, #16]
 8008770:	f7ff bb7a 	b.w	8007e68 <__ieee754_pow+0xe8>
 8008774:	2300      	movs	r3, #0
 8008776:	f7ff bb64 	b.w	8007e42 <__ieee754_pow+0xc2>
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w
 8008780:	00000000 	.word	0x00000000
 8008784:	3fe62e43 	.word	0x3fe62e43
 8008788:	fefa39ef 	.word	0xfefa39ef
 800878c:	3fe62e42 	.word	0x3fe62e42
 8008790:	0ca86c39 	.word	0x0ca86c39
 8008794:	be205c61 	.word	0xbe205c61
 8008798:	72bea4d0 	.word	0x72bea4d0
 800879c:	3e663769 	.word	0x3e663769
 80087a0:	c5d26bf1 	.word	0xc5d26bf1
 80087a4:	3ebbbd41 	.word	0x3ebbbd41
 80087a8:	af25de2c 	.word	0xaf25de2c
 80087ac:	3f11566a 	.word	0x3f11566a
 80087b0:	16bebd93 	.word	0x16bebd93
 80087b4:	3f66c16c 	.word	0x3f66c16c
 80087b8:	5555553e 	.word	0x5555553e
 80087bc:	3fc55555 	.word	0x3fc55555
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	000fffff 	.word	0x000fffff
 80087c8:	3ff00000 	.word	0x3ff00000
 80087cc:	4090cbff 	.word	0x4090cbff
 80087d0:	3f6f3400 	.word	0x3f6f3400
 80087d4:	652b82fe 	.word	0x652b82fe
 80087d8:	3c971547 	.word	0x3c971547
 80087dc:	00000000 	.word	0x00000000

080087e0 <__ieee754_rem_pio2>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	ed2d 8b02 	vpush	{d8}
 80087e8:	ec55 4b10 	vmov	r4, r5, d0
 80087ec:	4bca      	ldr	r3, [pc, #808]	; (8008b18 <__ieee754_rem_pio2+0x338>)
 80087ee:	b08b      	sub	sp, #44	; 0x2c
 80087f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80087f4:	4598      	cmp	r8, r3
 80087f6:	4682      	mov	sl, r0
 80087f8:	9502      	str	r5, [sp, #8]
 80087fa:	dc08      	bgt.n	800880e <__ieee754_rem_pio2+0x2e>
 80087fc:	2200      	movs	r2, #0
 80087fe:	2300      	movs	r3, #0
 8008800:	ed80 0b00 	vstr	d0, [r0]
 8008804:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008808:	f04f 0b00 	mov.w	fp, #0
 800880c:	e028      	b.n	8008860 <__ieee754_rem_pio2+0x80>
 800880e:	4bc3      	ldr	r3, [pc, #780]	; (8008b1c <__ieee754_rem_pio2+0x33c>)
 8008810:	4598      	cmp	r8, r3
 8008812:	dc78      	bgt.n	8008906 <__ieee754_rem_pio2+0x126>
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	4ec2      	ldr	r6, [pc, #776]	; (8008b20 <__ieee754_rem_pio2+0x340>)
 8008818:	2b00      	cmp	r3, #0
 800881a:	ee10 0a10 	vmov	r0, s0
 800881e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008ae0 <__ieee754_rem_pio2+0x300>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	4629      	mov	r1, r5
 8008826:	dd39      	ble.n	800889c <__ieee754_rem_pio2+0xbc>
 8008828:	f7f7 fcd2 	bl	80001d0 <__aeabi_dsub>
 800882c:	45b0      	cmp	r8, r6
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	d01b      	beq.n	800886c <__ieee754_rem_pio2+0x8c>
 8008834:	a3ac      	add	r3, pc, #688	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x308>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fcc9 	bl	80001d0 <__aeabi_dsub>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	e9ca 2300 	strd	r2, r3, [sl]
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f7 fcc1 	bl	80001d0 <__aeabi_dsub>
 800884e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x308>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fcbc 	bl	80001d0 <__aeabi_dsub>
 8008858:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800885c:	f04f 0b01 	mov.w	fp, #1
 8008860:	4658      	mov	r0, fp
 8008862:	b00b      	add	sp, #44	; 0x2c
 8008864:	ecbd 8b02 	vpop	{d8}
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x310>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fcad 	bl	80001d0 <__aeabi_dsub>
 8008876:	a3a0      	add	r3, pc, #640	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x318>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	4604      	mov	r4, r0
 800887e:	460d      	mov	r5, r1
 8008880:	f7f7 fca6 	bl	80001d0 <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	e9ca 2300 	strd	r2, r3, [sl]
 800888c:	4620      	mov	r0, r4
 800888e:	4629      	mov	r1, r5
 8008890:	f7f7 fc9e 	bl	80001d0 <__aeabi_dsub>
 8008894:	a398      	add	r3, pc, #608	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x318>)
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	e7db      	b.n	8008854 <__ieee754_rem_pio2+0x74>
 800889c:	f7f7 fc9a 	bl	80001d4 <__adddf3>
 80088a0:	45b0      	cmp	r8, r6
 80088a2:	4604      	mov	r4, r0
 80088a4:	460d      	mov	r5, r1
 80088a6:	d016      	beq.n	80088d6 <__ieee754_rem_pio2+0xf6>
 80088a8:	a38f      	add	r3, pc, #572	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x308>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 fc91 	bl	80001d4 <__adddf3>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	e9ca 2300 	strd	r2, r3, [sl]
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f7 fc87 	bl	80001d0 <__aeabi_dsub>
 80088c2:	a389      	add	r3, pc, #548	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x308>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 fc84 	bl	80001d4 <__adddf3>
 80088cc:	f04f 3bff 	mov.w	fp, #4294967295
 80088d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088d4:	e7c4      	b.n	8008860 <__ieee754_rem_pio2+0x80>
 80088d6:	a386      	add	r3, pc, #536	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x310>)
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fc7a 	bl	80001d4 <__adddf3>
 80088e0:	a385      	add	r3, pc, #532	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x318>)
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	4604      	mov	r4, r0
 80088e8:	460d      	mov	r5, r1
 80088ea:	f7f7 fc73 	bl	80001d4 <__adddf3>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	e9ca 2300 	strd	r2, r3, [sl]
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f7 fc69 	bl	80001d0 <__aeabi_dsub>
 80088fe:	a37e      	add	r3, pc, #504	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x318>)
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	e7e0      	b.n	80088c8 <__ieee754_rem_pio2+0xe8>
 8008906:	4b87      	ldr	r3, [pc, #540]	; (8008b24 <__ieee754_rem_pio2+0x344>)
 8008908:	4598      	cmp	r8, r3
 800890a:	f300 80d9 	bgt.w	8008ac0 <__ieee754_rem_pio2+0x2e0>
 800890e:	f000 ff2d 	bl	800976c <fabs>
 8008912:	ec55 4b10 	vmov	r4, r5, d0
 8008916:	ee10 0a10 	vmov	r0, s0
 800891a:	a379      	add	r3, pc, #484	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x320>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fe0d 	bl	8000540 <__aeabi_dmul>
 8008926:	4b80      	ldr	r3, [pc, #512]	; (8008b28 <__ieee754_rem_pio2+0x348>)
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fc53 	bl	80001d4 <__adddf3>
 800892e:	f7f8 f8b7 	bl	8000aa0 <__aeabi_d2iz>
 8008932:	4683      	mov	fp, r0
 8008934:	f7f7 fd9a 	bl	800046c <__aeabi_i2d>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	ec43 2b18 	vmov	d8, r2, r3
 8008940:	a367      	add	r3, pc, #412	; (adr r3, 8008ae0 <__ieee754_rem_pio2+0x300>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fdfb 	bl	8000540 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f7 fc3d 	bl	80001d0 <__aeabi_dsub>
 8008956:	a364      	add	r3, pc, #400	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x308>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	ec51 0b18 	vmov	r0, r1, d8
 8008964:	f7f7 fdec 	bl	8000540 <__aeabi_dmul>
 8008968:	f1bb 0f1f 	cmp.w	fp, #31
 800896c:	4604      	mov	r4, r0
 800896e:	460d      	mov	r5, r1
 8008970:	dc0d      	bgt.n	800898e <__ieee754_rem_pio2+0x1ae>
 8008972:	4b6e      	ldr	r3, [pc, #440]	; (8008b2c <__ieee754_rem_pio2+0x34c>)
 8008974:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	4543      	cmp	r3, r8
 800897e:	d006      	beq.n	800898e <__ieee754_rem_pio2+0x1ae>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	4630      	mov	r0, r6
 8008986:	4639      	mov	r1, r7
 8008988:	f7f7 fc22 	bl	80001d0 <__aeabi_dsub>
 800898c:	e00f      	b.n	80089ae <__ieee754_rem_pio2+0x1ce>
 800898e:	462b      	mov	r3, r5
 8008990:	4622      	mov	r2, r4
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f7 fc1b 	bl	80001d0 <__aeabi_dsub>
 800899a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800899e:	9303      	str	r3, [sp, #12]
 80089a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80089a8:	f1b8 0f10 	cmp.w	r8, #16
 80089ac:	dc02      	bgt.n	80089b4 <__ieee754_rem_pio2+0x1d4>
 80089ae:	e9ca 0100 	strd	r0, r1, [sl]
 80089b2:	e039      	b.n	8008a28 <__ieee754_rem_pio2+0x248>
 80089b4:	a34e      	add	r3, pc, #312	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x310>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	ec51 0b18 	vmov	r0, r1, d8
 80089be:	f7f7 fdbf 	bl	8000540 <__aeabi_dmul>
 80089c2:	4604      	mov	r4, r0
 80089c4:	460d      	mov	r5, r1
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4630      	mov	r0, r6
 80089cc:	4639      	mov	r1, r7
 80089ce:	f7f7 fbff 	bl	80001d0 <__aeabi_dsub>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4680      	mov	r8, r0
 80089d8:	4689      	mov	r9, r1
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	f7f7 fbf7 	bl	80001d0 <__aeabi_dsub>
 80089e2:	4622      	mov	r2, r4
 80089e4:	462b      	mov	r3, r5
 80089e6:	f7f7 fbf3 	bl	80001d0 <__aeabi_dsub>
 80089ea:	a343      	add	r3, pc, #268	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x318>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	ec51 0b18 	vmov	r0, r1, d8
 80089f8:	f7f7 fda2 	bl	8000540 <__aeabi_dmul>
 80089fc:	4622      	mov	r2, r4
 80089fe:	462b      	mov	r3, r5
 8008a00:	f7f7 fbe6 	bl	80001d0 <__aeabi_dsub>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f7 fbde 	bl	80001d0 <__aeabi_dsub>
 8008a14:	9a03      	ldr	r2, [sp, #12]
 8008a16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b31      	cmp	r3, #49	; 0x31
 8008a1e:	dc24      	bgt.n	8008a6a <__ieee754_rem_pio2+0x28a>
 8008a20:	e9ca 0100 	strd	r0, r1, [sl]
 8008a24:	4646      	mov	r6, r8
 8008a26:	464f      	mov	r7, r9
 8008a28:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4642      	mov	r2, r8
 8008a30:	464b      	mov	r3, r9
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f7 fbcc 	bl	80001d0 <__aeabi_dsub>
 8008a38:	462b      	mov	r3, r5
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	f7f7 fbc8 	bl	80001d0 <__aeabi_dsub>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a48:	f6bf af0a 	bge.w	8008860 <__ieee754_rem_pio2+0x80>
 8008a4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a50:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a58:	f8ca 8000 	str.w	r8, [sl]
 8008a5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a60:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a64:	f1cb 0b00 	rsb	fp, fp, #0
 8008a68:	e6fa      	b.n	8008860 <__ieee754_rem_pio2+0x80>
 8008a6a:	a327      	add	r3, pc, #156	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x328>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	ec51 0b18 	vmov	r0, r1, d8
 8008a74:	f7f7 fd64 	bl	8000540 <__aeabi_dmul>
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4640      	mov	r0, r8
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f7 fba4 	bl	80001d0 <__aeabi_dsub>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460f      	mov	r7, r1
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fb9c 	bl	80001d0 <__aeabi_dsub>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	f7f7 fb98 	bl	80001d0 <__aeabi_dsub>
 8008aa0:	a31b      	add	r3, pc, #108	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x330>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	ec51 0b18 	vmov	r0, r1, d8
 8008aae:	f7f7 fd47 	bl	8000540 <__aeabi_dmul>
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	f7f7 fb8b 	bl	80001d0 <__aeabi_dsub>
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
 8008abe:	e75f      	b.n	8008980 <__ieee754_rem_pio2+0x1a0>
 8008ac0:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <__ieee754_rem_pio2+0x350>)
 8008ac2:	4598      	cmp	r8, r3
 8008ac4:	dd36      	ble.n	8008b34 <__ieee754_rem_pio2+0x354>
 8008ac6:	ee10 2a10 	vmov	r2, s0
 8008aca:	462b      	mov	r3, r5
 8008acc:	4620      	mov	r0, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	f7f7 fb7e 	bl	80001d0 <__aeabi_dsub>
 8008ad4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ad8:	e9ca 0100 	strd	r0, r1, [sl]
 8008adc:	e694      	b.n	8008808 <__ieee754_rem_pio2+0x28>
 8008ade:	bf00      	nop
 8008ae0:	54400000 	.word	0x54400000
 8008ae4:	3ff921fb 	.word	0x3ff921fb
 8008ae8:	1a626331 	.word	0x1a626331
 8008aec:	3dd0b461 	.word	0x3dd0b461
 8008af0:	1a600000 	.word	0x1a600000
 8008af4:	3dd0b461 	.word	0x3dd0b461
 8008af8:	2e037073 	.word	0x2e037073
 8008afc:	3ba3198a 	.word	0x3ba3198a
 8008b00:	6dc9c883 	.word	0x6dc9c883
 8008b04:	3fe45f30 	.word	0x3fe45f30
 8008b08:	2e000000 	.word	0x2e000000
 8008b0c:	3ba3198a 	.word	0x3ba3198a
 8008b10:	252049c1 	.word	0x252049c1
 8008b14:	397b839a 	.word	0x397b839a
 8008b18:	3fe921fb 	.word	0x3fe921fb
 8008b1c:	4002d97b 	.word	0x4002d97b
 8008b20:	3ff921fb 	.word	0x3ff921fb
 8008b24:	413921fb 	.word	0x413921fb
 8008b28:	3fe00000 	.word	0x3fe00000
 8008b2c:	08009b30 	.word	0x08009b30
 8008b30:	7fefffff 	.word	0x7fefffff
 8008b34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008b38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008b3c:	ee10 0a10 	vmov	r0, s0
 8008b40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008b44:	ee10 6a10 	vmov	r6, s0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	f7f7 ffa9 	bl	8000aa0 <__aeabi_d2iz>
 8008b4e:	f7f7 fc8d 	bl	800046c <__aeabi_i2d>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b5e:	f7f7 fb37 	bl	80001d0 <__aeabi_dsub>
 8008b62:	4b23      	ldr	r3, [pc, #140]	; (8008bf0 <__ieee754_rem_pio2+0x410>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	f7f7 fceb 	bl	8000540 <__aeabi_dmul>
 8008b6a:	460f      	mov	r7, r1
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	f7f7 ff97 	bl	8000aa0 <__aeabi_d2iz>
 8008b72:	f7f7 fc7b 	bl	800046c <__aeabi_i2d>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b82:	f7f7 fb25 	bl	80001d0 <__aeabi_dsub>
 8008b86:	4b1a      	ldr	r3, [pc, #104]	; (8008bf0 <__ieee754_rem_pio2+0x410>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fcd9 	bl	8000540 <__aeabi_dmul>
 8008b8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b92:	ad04      	add	r5, sp, #16
 8008b94:	f04f 0803 	mov.w	r8, #3
 8008b98:	46a9      	mov	r9, r5
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	2700      	movs	r7, #0
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008ba6:	46c3      	mov	fp, r8
 8008ba8:	3d08      	subs	r5, #8
 8008baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bae:	f7f7 ff2f 	bl	8000a10 <__aeabi_dcmpeq>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d1f3      	bne.n	8008b9e <__ieee754_rem_pio2+0x3be>
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <__ieee754_rem_pio2+0x414>)
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	2302      	movs	r3, #2
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	465b      	mov	r3, fp
 8008bc2:	4651      	mov	r1, sl
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f000 f993 	bl	8008ef0 <__kernel_rem_pio2>
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	4683      	mov	fp, r0
 8008bd0:	f6bf ae46 	bge.w	8008860 <__ieee754_rem_pio2+0x80>
 8008bd4:	e9da 2100 	ldrd	r2, r1, [sl]
 8008bd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bdc:	e9ca 2300 	strd	r2, r3, [sl]
 8008be0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008be8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008bec:	e73a      	b.n	8008a64 <__ieee754_rem_pio2+0x284>
 8008bee:	bf00      	nop
 8008bf0:	41700000 	.word	0x41700000
 8008bf4:	08009bb0 	.word	0x08009bb0

08008bf8 <__ieee754_sqrt>:
 8008bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	ec55 4b10 	vmov	r4, r5, d0
 8008c00:	4e55      	ldr	r6, [pc, #340]	; (8008d58 <__ieee754_sqrt+0x160>)
 8008c02:	43ae      	bics	r6, r5
 8008c04:	ee10 0a10 	vmov	r0, s0
 8008c08:	ee10 3a10 	vmov	r3, s0
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4629      	mov	r1, r5
 8008c10:	d110      	bne.n	8008c34 <__ieee754_sqrt+0x3c>
 8008c12:	ee10 2a10 	vmov	r2, s0
 8008c16:	462b      	mov	r3, r5
 8008c18:	f7f7 fc92 	bl	8000540 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4620      	mov	r0, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7f7 fad6 	bl	80001d4 <__adddf3>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	ec45 4b10 	vmov	d0, r4, r5
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	2d00      	cmp	r5, #0
 8008c36:	dc10      	bgt.n	8008c5a <__ieee754_sqrt+0x62>
 8008c38:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c3c:	4330      	orrs	r0, r6
 8008c3e:	d0f5      	beq.n	8008c2c <__ieee754_sqrt+0x34>
 8008c40:	b15d      	cbz	r5, 8008c5a <__ieee754_sqrt+0x62>
 8008c42:	ee10 2a10 	vmov	r2, s0
 8008c46:	462b      	mov	r3, r5
 8008c48:	ee10 0a10 	vmov	r0, s0
 8008c4c:	f7f7 fac0 	bl	80001d0 <__aeabi_dsub>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	f7f7 fd9e 	bl	8000794 <__aeabi_ddiv>
 8008c58:	e7e6      	b.n	8008c28 <__ieee754_sqrt+0x30>
 8008c5a:	1512      	asrs	r2, r2, #20
 8008c5c:	d074      	beq.n	8008d48 <__ieee754_sqrt+0x150>
 8008c5e:	07d4      	lsls	r4, r2, #31
 8008c60:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008c64:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c6c:	bf5e      	ittt	pl
 8008c6e:	0fda      	lsrpl	r2, r3, #31
 8008c70:	005b      	lslpl	r3, r3, #1
 8008c72:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008c76:	2400      	movs	r4, #0
 8008c78:	0fda      	lsrs	r2, r3, #31
 8008c7a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008c7e:	107f      	asrs	r7, r7, #1
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	2516      	movs	r5, #22
 8008c84:	4620      	mov	r0, r4
 8008c86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008c8a:	1886      	adds	r6, r0, r2
 8008c8c:	428e      	cmp	r6, r1
 8008c8e:	bfde      	ittt	le
 8008c90:	1b89      	suble	r1, r1, r6
 8008c92:	18b0      	addle	r0, r6, r2
 8008c94:	18a4      	addle	r4, r4, r2
 8008c96:	0049      	lsls	r1, r1, #1
 8008c98:	3d01      	subs	r5, #1
 8008c9a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008c9e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008ca2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ca6:	d1f0      	bne.n	8008c8a <__ieee754_sqrt+0x92>
 8008ca8:	462a      	mov	r2, r5
 8008caa:	f04f 0e20 	mov.w	lr, #32
 8008cae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008cb2:	4281      	cmp	r1, r0
 8008cb4:	eb06 0c05 	add.w	ip, r6, r5
 8008cb8:	dc02      	bgt.n	8008cc0 <__ieee754_sqrt+0xc8>
 8008cba:	d113      	bne.n	8008ce4 <__ieee754_sqrt+0xec>
 8008cbc:	459c      	cmp	ip, r3
 8008cbe:	d811      	bhi.n	8008ce4 <__ieee754_sqrt+0xec>
 8008cc0:	f1bc 0f00 	cmp.w	ip, #0
 8008cc4:	eb0c 0506 	add.w	r5, ip, r6
 8008cc8:	da43      	bge.n	8008d52 <__ieee754_sqrt+0x15a>
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	db41      	blt.n	8008d52 <__ieee754_sqrt+0x15a>
 8008cce:	f100 0801 	add.w	r8, r0, #1
 8008cd2:	1a09      	subs	r1, r1, r0
 8008cd4:	459c      	cmp	ip, r3
 8008cd6:	bf88      	it	hi
 8008cd8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008cdc:	eba3 030c 	sub.w	r3, r3, ip
 8008ce0:	4432      	add	r2, r6
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008ce8:	f1be 0e01 	subs.w	lr, lr, #1
 8008cec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cf4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cf8:	d1db      	bne.n	8008cb2 <__ieee754_sqrt+0xba>
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	d006      	beq.n	8008d0c <__ieee754_sqrt+0x114>
 8008cfe:	1c50      	adds	r0, r2, #1
 8008d00:	bf13      	iteet	ne
 8008d02:	3201      	addne	r2, #1
 8008d04:	3401      	addeq	r4, #1
 8008d06:	4672      	moveq	r2, lr
 8008d08:	f022 0201 	bicne.w	r2, r2, #1
 8008d0c:	1063      	asrs	r3, r4, #1
 8008d0e:	0852      	lsrs	r2, r2, #1
 8008d10:	07e1      	lsls	r1, r4, #31
 8008d12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d1a:	bf48      	it	mi
 8008d1c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008d20:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008d24:	4614      	mov	r4, r2
 8008d26:	e781      	b.n	8008c2c <__ieee754_sqrt+0x34>
 8008d28:	0ad9      	lsrs	r1, r3, #11
 8008d2a:	3815      	subs	r0, #21
 8008d2c:	055b      	lsls	r3, r3, #21
 8008d2e:	2900      	cmp	r1, #0
 8008d30:	d0fa      	beq.n	8008d28 <__ieee754_sqrt+0x130>
 8008d32:	02cd      	lsls	r5, r1, #11
 8008d34:	d50a      	bpl.n	8008d4c <__ieee754_sqrt+0x154>
 8008d36:	f1c2 0420 	rsb	r4, r2, #32
 8008d3a:	fa23 f404 	lsr.w	r4, r3, r4
 8008d3e:	1e55      	subs	r5, r2, #1
 8008d40:	4093      	lsls	r3, r2
 8008d42:	4321      	orrs	r1, r4
 8008d44:	1b42      	subs	r2, r0, r5
 8008d46:	e78a      	b.n	8008c5e <__ieee754_sqrt+0x66>
 8008d48:	4610      	mov	r0, r2
 8008d4a:	e7f0      	b.n	8008d2e <__ieee754_sqrt+0x136>
 8008d4c:	0049      	lsls	r1, r1, #1
 8008d4e:	3201      	adds	r2, #1
 8008d50:	e7ef      	b.n	8008d32 <__ieee754_sqrt+0x13a>
 8008d52:	4680      	mov	r8, r0
 8008d54:	e7bd      	b.n	8008cd2 <__ieee754_sqrt+0xda>
 8008d56:	bf00      	nop
 8008d58:	7ff00000 	.word	0x7ff00000
 8008d5c:	00000000 	.word	0x00000000

08008d60 <__kernel_cos>:
 8008d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	ec57 6b10 	vmov	r6, r7, d0
 8008d68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008d6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008d70:	ed8d 1b00 	vstr	d1, [sp]
 8008d74:	da07      	bge.n	8008d86 <__kernel_cos+0x26>
 8008d76:	ee10 0a10 	vmov	r0, s0
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fe90 	bl	8000aa0 <__aeabi_d2iz>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f000 8088 	beq.w	8008e96 <__kernel_cos+0x136>
 8008d86:	4632      	mov	r2, r6
 8008d88:	463b      	mov	r3, r7
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fbd7 	bl	8000540 <__aeabi_dmul>
 8008d92:	4b51      	ldr	r3, [pc, #324]	; (8008ed8 <__kernel_cos+0x178>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	f7f7 fbd1 	bl	8000540 <__aeabi_dmul>
 8008d9e:	a340      	add	r3, pc, #256	; (adr r3, 8008ea0 <__kernel_cos+0x140>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	4682      	mov	sl, r0
 8008da6:	468b      	mov	fp, r1
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	f7f7 fbc8 	bl	8000540 <__aeabi_dmul>
 8008db0:	a33d      	add	r3, pc, #244	; (adr r3, 8008ea8 <__kernel_cos+0x148>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 fa0d 	bl	80001d4 <__adddf3>
 8008dba:	4622      	mov	r2, r4
 8008dbc:	462b      	mov	r3, r5
 8008dbe:	f7f7 fbbf 	bl	8000540 <__aeabi_dmul>
 8008dc2:	a33b      	add	r3, pc, #236	; (adr r3, 8008eb0 <__kernel_cos+0x150>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fa02 	bl	80001d0 <__aeabi_dsub>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	462b      	mov	r3, r5
 8008dd0:	f7f7 fbb6 	bl	8000540 <__aeabi_dmul>
 8008dd4:	a338      	add	r3, pc, #224	; (adr r3, 8008eb8 <__kernel_cos+0x158>)
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f7f7 f9fb 	bl	80001d4 <__adddf3>
 8008dde:	4622      	mov	r2, r4
 8008de0:	462b      	mov	r3, r5
 8008de2:	f7f7 fbad 	bl	8000540 <__aeabi_dmul>
 8008de6:	a336      	add	r3, pc, #216	; (adr r3, 8008ec0 <__kernel_cos+0x160>)
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f7f7 f9f0 	bl	80001d0 <__aeabi_dsub>
 8008df0:	4622      	mov	r2, r4
 8008df2:	462b      	mov	r3, r5
 8008df4:	f7f7 fba4 	bl	8000540 <__aeabi_dmul>
 8008df8:	a333      	add	r3, pc, #204	; (adr r3, 8008ec8 <__kernel_cos+0x168>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 f9e9 	bl	80001d4 <__adddf3>
 8008e02:	4622      	mov	r2, r4
 8008e04:	462b      	mov	r3, r5
 8008e06:	f7f7 fb9b 	bl	8000540 <__aeabi_dmul>
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	f7f7 fb97 	bl	8000540 <__aeabi_dmul>
 8008e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	f7f7 fb8f 	bl	8000540 <__aeabi_dmul>
 8008e22:	460b      	mov	r3, r1
 8008e24:	4602      	mov	r2, r0
 8008e26:	4629      	mov	r1, r5
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7f7 f9d1 	bl	80001d0 <__aeabi_dsub>
 8008e2e:	4b2b      	ldr	r3, [pc, #172]	; (8008edc <__kernel_cos+0x17c>)
 8008e30:	4598      	cmp	r8, r3
 8008e32:	4606      	mov	r6, r0
 8008e34:	460f      	mov	r7, r1
 8008e36:	dc10      	bgt.n	8008e5a <__kernel_cos+0xfa>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	4659      	mov	r1, fp
 8008e40:	f7f7 f9c6 	bl	80001d0 <__aeabi_dsub>
 8008e44:	460b      	mov	r3, r1
 8008e46:	4926      	ldr	r1, [pc, #152]	; (8008ee0 <__kernel_cos+0x180>)
 8008e48:	4602      	mov	r2, r0
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f7f7 f9c0 	bl	80001d0 <__aeabi_dsub>
 8008e50:	ec41 0b10 	vmov	d0, r0, r1
 8008e54:	b003      	add	sp, #12
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	4b22      	ldr	r3, [pc, #136]	; (8008ee4 <__kernel_cos+0x184>)
 8008e5c:	4920      	ldr	r1, [pc, #128]	; (8008ee0 <__kernel_cos+0x180>)
 8008e5e:	4598      	cmp	r8, r3
 8008e60:	bfcc      	ite	gt
 8008e62:	4d21      	ldrgt	r5, [pc, #132]	; (8008ee8 <__kernel_cos+0x188>)
 8008e64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008e68:	2400      	movs	r4, #0
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f7f7 f9ae 	bl	80001d0 <__aeabi_dsub>
 8008e74:	4622      	mov	r2, r4
 8008e76:	4680      	mov	r8, r0
 8008e78:	4689      	mov	r9, r1
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	4659      	mov	r1, fp
 8008e80:	f7f7 f9a6 	bl	80001d0 <__aeabi_dsub>
 8008e84:	4632      	mov	r2, r6
 8008e86:	463b      	mov	r3, r7
 8008e88:	f7f7 f9a2 	bl	80001d0 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	e7da      	b.n	8008e4c <__kernel_cos+0xec>
 8008e96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008ed0 <__kernel_cos+0x170>
 8008e9a:	e7db      	b.n	8008e54 <__kernel_cos+0xf4>
 8008e9c:	f3af 8000 	nop.w
 8008ea0:	be8838d4 	.word	0xbe8838d4
 8008ea4:	bda8fae9 	.word	0xbda8fae9
 8008ea8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008eac:	3e21ee9e 	.word	0x3e21ee9e
 8008eb0:	809c52ad 	.word	0x809c52ad
 8008eb4:	3e927e4f 	.word	0x3e927e4f
 8008eb8:	19cb1590 	.word	0x19cb1590
 8008ebc:	3efa01a0 	.word	0x3efa01a0
 8008ec0:	16c15177 	.word	0x16c15177
 8008ec4:	3f56c16c 	.word	0x3f56c16c
 8008ec8:	5555554c 	.word	0x5555554c
 8008ecc:	3fa55555 	.word	0x3fa55555
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	3ff00000 	.word	0x3ff00000
 8008ed8:	3fe00000 	.word	0x3fe00000
 8008edc:	3fd33332 	.word	0x3fd33332
 8008ee0:	3ff00000 	.word	0x3ff00000
 8008ee4:	3fe90000 	.word	0x3fe90000
 8008ee8:	3fd20000 	.word	0x3fd20000
 8008eec:	00000000 	.word	0x00000000

08008ef0 <__kernel_rem_pio2>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	ed2d 8b02 	vpush	{d8}
 8008ef8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008efc:	f112 0f14 	cmn.w	r2, #20
 8008f00:	9308      	str	r3, [sp, #32]
 8008f02:	9101      	str	r1, [sp, #4]
 8008f04:	4bc4      	ldr	r3, [pc, #784]	; (8009218 <__kernel_rem_pio2+0x328>)
 8008f06:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008f08:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f0e:	9302      	str	r3, [sp, #8]
 8008f10:	9b08      	ldr	r3, [sp, #32]
 8008f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f16:	bfa8      	it	ge
 8008f18:	1ed4      	subge	r4, r2, #3
 8008f1a:	9306      	str	r3, [sp, #24]
 8008f1c:	bfb2      	itee	lt
 8008f1e:	2400      	movlt	r4, #0
 8008f20:	2318      	movge	r3, #24
 8008f22:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f26:	f06f 0317 	mvn.w	r3, #23
 8008f2a:	fb04 3303 	mla	r3, r4, r3, r3
 8008f2e:	eb03 0a02 	add.w	sl, r3, r2
 8008f32:	9b02      	ldr	r3, [sp, #8]
 8008f34:	9a06      	ldr	r2, [sp, #24]
 8008f36:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009208 <__kernel_rem_pio2+0x318>
 8008f3a:	eb03 0802 	add.w	r8, r3, r2
 8008f3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008f40:	1aa7      	subs	r7, r4, r2
 8008f42:	ae22      	add	r6, sp, #136	; 0x88
 8008f44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f48:	2500      	movs	r5, #0
 8008f4a:	4545      	cmp	r5, r8
 8008f4c:	dd13      	ble.n	8008f76 <__kernel_rem_pio2+0x86>
 8008f4e:	9b08      	ldr	r3, [sp, #32]
 8008f50:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009208 <__kernel_rem_pio2+0x318>
 8008f54:	aa22      	add	r2, sp, #136	; 0x88
 8008f56:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008f5e:	f04f 0800 	mov.w	r8, #0
 8008f62:	9b02      	ldr	r3, [sp, #8]
 8008f64:	4598      	cmp	r8, r3
 8008f66:	dc2f      	bgt.n	8008fc8 <__kernel_rem_pio2+0xd8>
 8008f68:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008f6c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008f70:	462f      	mov	r7, r5
 8008f72:	2600      	movs	r6, #0
 8008f74:	e01b      	b.n	8008fae <__kernel_rem_pio2+0xbe>
 8008f76:	42ef      	cmn	r7, r5
 8008f78:	d407      	bmi.n	8008f8a <__kernel_rem_pio2+0x9a>
 8008f7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f7e:	f7f7 fa75 	bl	800046c <__aeabi_i2d>
 8008f82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f86:	3501      	adds	r5, #1
 8008f88:	e7df      	b.n	8008f4a <__kernel_rem_pio2+0x5a>
 8008f8a:	ec51 0b18 	vmov	r0, r1, d8
 8008f8e:	e7f8      	b.n	8008f82 <__kernel_rem_pio2+0x92>
 8008f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008f98:	f7f7 fad2 	bl	8000540 <__aeabi_dmul>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fa4:	f7f7 f916 	bl	80001d4 <__adddf3>
 8008fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fac:	3601      	adds	r6, #1
 8008fae:	9b06      	ldr	r3, [sp, #24]
 8008fb0:	429e      	cmp	r6, r3
 8008fb2:	f1a7 0708 	sub.w	r7, r7, #8
 8008fb6:	ddeb      	ble.n	8008f90 <__kernel_rem_pio2+0xa0>
 8008fb8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008fbc:	f108 0801 	add.w	r8, r8, #1
 8008fc0:	ecab 7b02 	vstmia	fp!, {d7}
 8008fc4:	3508      	adds	r5, #8
 8008fc6:	e7cc      	b.n	8008f62 <__kernel_rem_pio2+0x72>
 8008fc8:	9b02      	ldr	r3, [sp, #8]
 8008fca:	aa0e      	add	r2, sp, #56	; 0x38
 8008fcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fd0:	930d      	str	r3, [sp, #52]	; 0x34
 8008fd2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008fd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008fd8:	9c02      	ldr	r4, [sp, #8]
 8008fda:	930c      	str	r3, [sp, #48]	; 0x30
 8008fdc:	00e3      	lsls	r3, r4, #3
 8008fde:	930a      	str	r3, [sp, #40]	; 0x28
 8008fe0:	ab9a      	add	r3, sp, #616	; 0x268
 8008fe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fe6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008fea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008fee:	ab72      	add	r3, sp, #456	; 0x1c8
 8008ff0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008ff4:	46c3      	mov	fp, r8
 8008ff6:	46a1      	mov	r9, r4
 8008ff8:	f1b9 0f00 	cmp.w	r9, #0
 8008ffc:	f1a5 0508 	sub.w	r5, r5, #8
 8009000:	dc77      	bgt.n	80090f2 <__kernel_rem_pio2+0x202>
 8009002:	ec47 6b10 	vmov	d0, r6, r7
 8009006:	4650      	mov	r0, sl
 8009008:	f000 fc46 	bl	8009898 <scalbn>
 800900c:	ec57 6b10 	vmov	r6, r7, d0
 8009010:	2200      	movs	r2, #0
 8009012:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009016:	ee10 0a10 	vmov	r0, s0
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fa90 	bl	8000540 <__aeabi_dmul>
 8009020:	ec41 0b10 	vmov	d0, r0, r1
 8009024:	f000 fbb8 	bl	8009798 <floor>
 8009028:	4b7c      	ldr	r3, [pc, #496]	; (800921c <__kernel_rem_pio2+0x32c>)
 800902a:	ec51 0b10 	vmov	r0, r1, d0
 800902e:	2200      	movs	r2, #0
 8009030:	f7f7 fa86 	bl	8000540 <__aeabi_dmul>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 f8c8 	bl	80001d0 <__aeabi_dsub>
 8009040:	460f      	mov	r7, r1
 8009042:	4606      	mov	r6, r0
 8009044:	f7f7 fd2c 	bl	8000aa0 <__aeabi_d2iz>
 8009048:	9004      	str	r0, [sp, #16]
 800904a:	f7f7 fa0f 	bl	800046c <__aeabi_i2d>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 f8bb 	bl	80001d0 <__aeabi_dsub>
 800905a:	f1ba 0f00 	cmp.w	sl, #0
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	dd6d      	ble.n	8009140 <__kernel_rem_pio2+0x250>
 8009064:	1e62      	subs	r2, r4, #1
 8009066:	ab0e      	add	r3, sp, #56	; 0x38
 8009068:	9d04      	ldr	r5, [sp, #16]
 800906a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800906e:	f1ca 0118 	rsb	r1, sl, #24
 8009072:	fa40 f301 	asr.w	r3, r0, r1
 8009076:	441d      	add	r5, r3
 8009078:	408b      	lsls	r3, r1
 800907a:	1ac0      	subs	r0, r0, r3
 800907c:	ab0e      	add	r3, sp, #56	; 0x38
 800907e:	9504      	str	r5, [sp, #16]
 8009080:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009084:	f1ca 0317 	rsb	r3, sl, #23
 8009088:	fa40 fb03 	asr.w	fp, r0, r3
 800908c:	f1bb 0f00 	cmp.w	fp, #0
 8009090:	dd65      	ble.n	800915e <__kernel_rem_pio2+0x26e>
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	2200      	movs	r2, #0
 8009096:	3301      	adds	r3, #1
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	4615      	mov	r5, r2
 800909c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090a0:	4294      	cmp	r4, r2
 80090a2:	f300 809c 	bgt.w	80091de <__kernel_rem_pio2+0x2ee>
 80090a6:	f1ba 0f00 	cmp.w	sl, #0
 80090aa:	dd07      	ble.n	80090bc <__kernel_rem_pio2+0x1cc>
 80090ac:	f1ba 0f01 	cmp.w	sl, #1
 80090b0:	f000 80c0 	beq.w	8009234 <__kernel_rem_pio2+0x344>
 80090b4:	f1ba 0f02 	cmp.w	sl, #2
 80090b8:	f000 80c6 	beq.w	8009248 <__kernel_rem_pio2+0x358>
 80090bc:	f1bb 0f02 	cmp.w	fp, #2
 80090c0:	d14d      	bne.n	800915e <__kernel_rem_pio2+0x26e>
 80090c2:	4632      	mov	r2, r6
 80090c4:	463b      	mov	r3, r7
 80090c6:	4956      	ldr	r1, [pc, #344]	; (8009220 <__kernel_rem_pio2+0x330>)
 80090c8:	2000      	movs	r0, #0
 80090ca:	f7f7 f881 	bl	80001d0 <__aeabi_dsub>
 80090ce:	4606      	mov	r6, r0
 80090d0:	460f      	mov	r7, r1
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	d043      	beq.n	800915e <__kernel_rem_pio2+0x26e>
 80090d6:	4650      	mov	r0, sl
 80090d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009210 <__kernel_rem_pio2+0x320>
 80090dc:	f000 fbdc 	bl	8009898 <scalbn>
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	ec53 2b10 	vmov	r2, r3, d0
 80090e8:	f7f7 f872 	bl	80001d0 <__aeabi_dsub>
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	e035      	b.n	800915e <__kernel_rem_pio2+0x26e>
 80090f2:	4b4c      	ldr	r3, [pc, #304]	; (8009224 <__kernel_rem_pio2+0x334>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fa21 	bl	8000540 <__aeabi_dmul>
 80090fe:	f7f7 fccf 	bl	8000aa0 <__aeabi_d2iz>
 8009102:	f7f7 f9b3 	bl	800046c <__aeabi_i2d>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	ec43 2b18 	vmov	d8, r2, r3
 800910e:	4b46      	ldr	r3, [pc, #280]	; (8009228 <__kernel_rem_pio2+0x338>)
 8009110:	2200      	movs	r2, #0
 8009112:	f7f7 fa15 	bl	8000540 <__aeabi_dmul>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4630      	mov	r0, r6
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 f857 	bl	80001d0 <__aeabi_dsub>
 8009122:	f7f7 fcbd 	bl	8000aa0 <__aeabi_d2iz>
 8009126:	e9d5 2300 	ldrd	r2, r3, [r5]
 800912a:	f84b 0b04 	str.w	r0, [fp], #4
 800912e:	ec51 0b18 	vmov	r0, r1, d8
 8009132:	f7f7 f84f 	bl	80001d4 <__adddf3>
 8009136:	f109 39ff 	add.w	r9, r9, #4294967295
 800913a:	4606      	mov	r6, r0
 800913c:	460f      	mov	r7, r1
 800913e:	e75b      	b.n	8008ff8 <__kernel_rem_pio2+0x108>
 8009140:	d106      	bne.n	8009150 <__kernel_rem_pio2+0x260>
 8009142:	1e63      	subs	r3, r4, #1
 8009144:	aa0e      	add	r2, sp, #56	; 0x38
 8009146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800914a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800914e:	e79d      	b.n	800908c <__kernel_rem_pio2+0x19c>
 8009150:	4b36      	ldr	r3, [pc, #216]	; (800922c <__kernel_rem_pio2+0x33c>)
 8009152:	2200      	movs	r2, #0
 8009154:	f7f7 fc7a 	bl	8000a4c <__aeabi_dcmpge>
 8009158:	2800      	cmp	r0, #0
 800915a:	d13d      	bne.n	80091d8 <__kernel_rem_pio2+0x2e8>
 800915c:	4683      	mov	fp, r0
 800915e:	2200      	movs	r2, #0
 8009160:	2300      	movs	r3, #0
 8009162:	4630      	mov	r0, r6
 8009164:	4639      	mov	r1, r7
 8009166:	f7f7 fc53 	bl	8000a10 <__aeabi_dcmpeq>
 800916a:	2800      	cmp	r0, #0
 800916c:	f000 80c0 	beq.w	80092f0 <__kernel_rem_pio2+0x400>
 8009170:	1e65      	subs	r5, r4, #1
 8009172:	462b      	mov	r3, r5
 8009174:	2200      	movs	r2, #0
 8009176:	9902      	ldr	r1, [sp, #8]
 8009178:	428b      	cmp	r3, r1
 800917a:	da6c      	bge.n	8009256 <__kernel_rem_pio2+0x366>
 800917c:	2a00      	cmp	r2, #0
 800917e:	f000 8089 	beq.w	8009294 <__kernel_rem_pio2+0x3a4>
 8009182:	ab0e      	add	r3, sp, #56	; 0x38
 8009184:	f1aa 0a18 	sub.w	sl, sl, #24
 8009188:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80ad 	beq.w	80092ec <__kernel_rem_pio2+0x3fc>
 8009192:	4650      	mov	r0, sl
 8009194:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009210 <__kernel_rem_pio2+0x320>
 8009198:	f000 fb7e 	bl	8009898 <scalbn>
 800919c:	ab9a      	add	r3, sp, #616	; 0x268
 800919e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80091a2:	ec57 6b10 	vmov	r6, r7, d0
 80091a6:	00ec      	lsls	r4, r5, #3
 80091a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80091ac:	46aa      	mov	sl, r5
 80091ae:	f1ba 0f00 	cmp.w	sl, #0
 80091b2:	f280 80d6 	bge.w	8009362 <__kernel_rem_pio2+0x472>
 80091b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009208 <__kernel_rem_pio2+0x318>
 80091ba:	462e      	mov	r6, r5
 80091bc:	2e00      	cmp	r6, #0
 80091be:	f2c0 8104 	blt.w	80093ca <__kernel_rem_pio2+0x4da>
 80091c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80091c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80091c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009230 <__kernel_rem_pio2+0x340>
 80091cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80091d0:	f04f 0800 	mov.w	r8, #0
 80091d4:	1baf      	subs	r7, r5, r6
 80091d6:	e0ea      	b.n	80093ae <__kernel_rem_pio2+0x4be>
 80091d8:	f04f 0b02 	mov.w	fp, #2
 80091dc:	e759      	b.n	8009092 <__kernel_rem_pio2+0x1a2>
 80091de:	f8d8 3000 	ldr.w	r3, [r8]
 80091e2:	b955      	cbnz	r5, 80091fa <__kernel_rem_pio2+0x30a>
 80091e4:	b123      	cbz	r3, 80091f0 <__kernel_rem_pio2+0x300>
 80091e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80091ea:	f8c8 3000 	str.w	r3, [r8]
 80091ee:	2301      	movs	r3, #1
 80091f0:	3201      	adds	r2, #1
 80091f2:	f108 0804 	add.w	r8, r8, #4
 80091f6:	461d      	mov	r5, r3
 80091f8:	e752      	b.n	80090a0 <__kernel_rem_pio2+0x1b0>
 80091fa:	1acb      	subs	r3, r1, r3
 80091fc:	f8c8 3000 	str.w	r3, [r8]
 8009200:	462b      	mov	r3, r5
 8009202:	e7f5      	b.n	80091f0 <__kernel_rem_pio2+0x300>
 8009204:	f3af 8000 	nop.w
	...
 8009214:	3ff00000 	.word	0x3ff00000
 8009218:	08009cf8 	.word	0x08009cf8
 800921c:	40200000 	.word	0x40200000
 8009220:	3ff00000 	.word	0x3ff00000
 8009224:	3e700000 	.word	0x3e700000
 8009228:	41700000 	.word	0x41700000
 800922c:	3fe00000 	.word	0x3fe00000
 8009230:	08009cb8 	.word	0x08009cb8
 8009234:	1e62      	subs	r2, r4, #1
 8009236:	ab0e      	add	r3, sp, #56	; 0x38
 8009238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009240:	a90e      	add	r1, sp, #56	; 0x38
 8009242:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009246:	e739      	b.n	80090bc <__kernel_rem_pio2+0x1cc>
 8009248:	1e62      	subs	r2, r4, #1
 800924a:	ab0e      	add	r3, sp, #56	; 0x38
 800924c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009250:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009254:	e7f4      	b.n	8009240 <__kernel_rem_pio2+0x350>
 8009256:	a90e      	add	r1, sp, #56	; 0x38
 8009258:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800925c:	3b01      	subs	r3, #1
 800925e:	430a      	orrs	r2, r1
 8009260:	e789      	b.n	8009176 <__kernel_rem_pio2+0x286>
 8009262:	3301      	adds	r3, #1
 8009264:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009268:	2900      	cmp	r1, #0
 800926a:	d0fa      	beq.n	8009262 <__kernel_rem_pio2+0x372>
 800926c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800926e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009272:	446a      	add	r2, sp
 8009274:	3a98      	subs	r2, #152	; 0x98
 8009276:	920a      	str	r2, [sp, #40]	; 0x28
 8009278:	9a08      	ldr	r2, [sp, #32]
 800927a:	18e3      	adds	r3, r4, r3
 800927c:	18a5      	adds	r5, r4, r2
 800927e:	aa22      	add	r2, sp, #136	; 0x88
 8009280:	f104 0801 	add.w	r8, r4, #1
 8009284:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	4543      	cmp	r3, r8
 800928e:	da04      	bge.n	800929a <__kernel_rem_pio2+0x3aa>
 8009290:	461c      	mov	r4, r3
 8009292:	e6a3      	b.n	8008fdc <__kernel_rem_pio2+0xec>
 8009294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009296:	2301      	movs	r3, #1
 8009298:	e7e4      	b.n	8009264 <__kernel_rem_pio2+0x374>
 800929a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800929c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80092a0:	f7f7 f8e4 	bl	800046c <__aeabi_i2d>
 80092a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80092a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092aa:	46ab      	mov	fp, r5
 80092ac:	461c      	mov	r4, r3
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	2600      	movs	r6, #0
 80092b4:	2700      	movs	r7, #0
 80092b6:	9b06      	ldr	r3, [sp, #24]
 80092b8:	4599      	cmp	r9, r3
 80092ba:	dd06      	ble.n	80092ca <__kernel_rem_pio2+0x3da>
 80092bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092be:	e8e3 6702 	strd	r6, r7, [r3], #8
 80092c2:	f108 0801 	add.w	r8, r8, #1
 80092c6:	930a      	str	r3, [sp, #40]	; 0x28
 80092c8:	e7df      	b.n	800928a <__kernel_rem_pio2+0x39a>
 80092ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80092ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80092d2:	f7f7 f935 	bl	8000540 <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f6 ff79 	bl	80001d4 <__adddf3>
 80092e2:	f109 0901 	add.w	r9, r9, #1
 80092e6:	4606      	mov	r6, r0
 80092e8:	460f      	mov	r7, r1
 80092ea:	e7e4      	b.n	80092b6 <__kernel_rem_pio2+0x3c6>
 80092ec:	3d01      	subs	r5, #1
 80092ee:	e748      	b.n	8009182 <__kernel_rem_pio2+0x292>
 80092f0:	ec47 6b10 	vmov	d0, r6, r7
 80092f4:	f1ca 0000 	rsb	r0, sl, #0
 80092f8:	f000 face 	bl	8009898 <scalbn>
 80092fc:	ec57 6b10 	vmov	r6, r7, d0
 8009300:	4ba0      	ldr	r3, [pc, #640]	; (8009584 <__kernel_rem_pio2+0x694>)
 8009302:	ee10 0a10 	vmov	r0, s0
 8009306:	2200      	movs	r2, #0
 8009308:	4639      	mov	r1, r7
 800930a:	f7f7 fb9f 	bl	8000a4c <__aeabi_dcmpge>
 800930e:	b1f8      	cbz	r0, 8009350 <__kernel_rem_pio2+0x460>
 8009310:	4b9d      	ldr	r3, [pc, #628]	; (8009588 <__kernel_rem_pio2+0x698>)
 8009312:	2200      	movs	r2, #0
 8009314:	4630      	mov	r0, r6
 8009316:	4639      	mov	r1, r7
 8009318:	f7f7 f912 	bl	8000540 <__aeabi_dmul>
 800931c:	f7f7 fbc0 	bl	8000aa0 <__aeabi_d2iz>
 8009320:	4680      	mov	r8, r0
 8009322:	f7f7 f8a3 	bl	800046c <__aeabi_i2d>
 8009326:	4b97      	ldr	r3, [pc, #604]	; (8009584 <__kernel_rem_pio2+0x694>)
 8009328:	2200      	movs	r2, #0
 800932a:	f7f7 f909 	bl	8000540 <__aeabi_dmul>
 800932e:	460b      	mov	r3, r1
 8009330:	4602      	mov	r2, r0
 8009332:	4639      	mov	r1, r7
 8009334:	4630      	mov	r0, r6
 8009336:	f7f6 ff4b 	bl	80001d0 <__aeabi_dsub>
 800933a:	f7f7 fbb1 	bl	8000aa0 <__aeabi_d2iz>
 800933e:	1c65      	adds	r5, r4, #1
 8009340:	ab0e      	add	r3, sp, #56	; 0x38
 8009342:	f10a 0a18 	add.w	sl, sl, #24
 8009346:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800934a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800934e:	e720      	b.n	8009192 <__kernel_rem_pio2+0x2a2>
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f7 fba4 	bl	8000aa0 <__aeabi_d2iz>
 8009358:	ab0e      	add	r3, sp, #56	; 0x38
 800935a:	4625      	mov	r5, r4
 800935c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009360:	e717      	b.n	8009192 <__kernel_rem_pio2+0x2a2>
 8009362:	ab0e      	add	r3, sp, #56	; 0x38
 8009364:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009368:	f7f7 f880 	bl	800046c <__aeabi_i2d>
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	f7f7 f8e6 	bl	8000540 <__aeabi_dmul>
 8009374:	4b84      	ldr	r3, [pc, #528]	; (8009588 <__kernel_rem_pio2+0x698>)
 8009376:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800937a:	2200      	movs	r2, #0
 800937c:	4630      	mov	r0, r6
 800937e:	4639      	mov	r1, r7
 8009380:	f7f7 f8de 	bl	8000540 <__aeabi_dmul>
 8009384:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009388:	4606      	mov	r6, r0
 800938a:	460f      	mov	r7, r1
 800938c:	e70f      	b.n	80091ae <__kernel_rem_pio2+0x2be>
 800938e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009392:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009396:	f7f7 f8d3 	bl	8000540 <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093a2:	f7f6 ff17 	bl	80001d4 <__adddf3>
 80093a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093aa:	f108 0801 	add.w	r8, r8, #1
 80093ae:	9b02      	ldr	r3, [sp, #8]
 80093b0:	4598      	cmp	r8, r3
 80093b2:	dc01      	bgt.n	80093b8 <__kernel_rem_pio2+0x4c8>
 80093b4:	45b8      	cmp	r8, r7
 80093b6:	ddea      	ble.n	800938e <__kernel_rem_pio2+0x49e>
 80093b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80093bc:	ab4a      	add	r3, sp, #296	; 0x128
 80093be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80093c2:	ed87 7b00 	vstr	d7, [r7]
 80093c6:	3e01      	subs	r6, #1
 80093c8:	e6f8      	b.n	80091bc <__kernel_rem_pio2+0x2cc>
 80093ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	dc0b      	bgt.n	80093e8 <__kernel_rem_pio2+0x4f8>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc35      	bgt.n	8009440 <__kernel_rem_pio2+0x550>
 80093d4:	d059      	beq.n	800948a <__kernel_rem_pio2+0x59a>
 80093d6:	9b04      	ldr	r3, [sp, #16]
 80093d8:	f003 0007 	and.w	r0, r3, #7
 80093dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80093e0:	ecbd 8b02 	vpop	{d8}
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d1f3      	bne.n	80093d6 <__kernel_rem_pio2+0x4e6>
 80093ee:	ab4a      	add	r3, sp, #296	; 0x128
 80093f0:	4423      	add	r3, r4
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	461c      	mov	r4, r3
 80093f6:	469a      	mov	sl, r3
 80093f8:	9502      	str	r5, [sp, #8]
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f1aa 0a08 	sub.w	sl, sl, #8
 8009402:	dc6b      	bgt.n	80094dc <__kernel_rem_pio2+0x5ec>
 8009404:	46aa      	mov	sl, r5
 8009406:	f1ba 0f01 	cmp.w	sl, #1
 800940a:	f1a4 0408 	sub.w	r4, r4, #8
 800940e:	f300 8085 	bgt.w	800951c <__kernel_rem_pio2+0x62c>
 8009412:	9c06      	ldr	r4, [sp, #24]
 8009414:	2000      	movs	r0, #0
 8009416:	3408      	adds	r4, #8
 8009418:	2100      	movs	r1, #0
 800941a:	2d01      	cmp	r5, #1
 800941c:	f300 809d 	bgt.w	800955a <__kernel_rem_pio2+0x66a>
 8009420:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009424:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009428:	f1bb 0f00 	cmp.w	fp, #0
 800942c:	f040 809b 	bne.w	8009566 <__kernel_rem_pio2+0x676>
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	e9c3 5600 	strd	r5, r6, [r3]
 8009436:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800943a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800943e:	e7ca      	b.n	80093d6 <__kernel_rem_pio2+0x4e6>
 8009440:	3408      	adds	r4, #8
 8009442:	ab4a      	add	r3, sp, #296	; 0x128
 8009444:	441c      	add	r4, r3
 8009446:	462e      	mov	r6, r5
 8009448:	2000      	movs	r0, #0
 800944a:	2100      	movs	r1, #0
 800944c:	2e00      	cmp	r6, #0
 800944e:	da36      	bge.n	80094be <__kernel_rem_pio2+0x5ce>
 8009450:	f1bb 0f00 	cmp.w	fp, #0
 8009454:	d039      	beq.n	80094ca <__kernel_rem_pio2+0x5da>
 8009456:	4602      	mov	r2, r0
 8009458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800945c:	9c01      	ldr	r4, [sp, #4]
 800945e:	e9c4 2300 	strd	r2, r3, [r4]
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800946a:	f7f6 feb1 	bl	80001d0 <__aeabi_dsub>
 800946e:	ae4c      	add	r6, sp, #304	; 0x130
 8009470:	2401      	movs	r4, #1
 8009472:	42a5      	cmp	r5, r4
 8009474:	da2c      	bge.n	80094d0 <__kernel_rem_pio2+0x5e0>
 8009476:	f1bb 0f00 	cmp.w	fp, #0
 800947a:	d002      	beq.n	8009482 <__kernel_rem_pio2+0x592>
 800947c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009480:	4619      	mov	r1, r3
 8009482:	9b01      	ldr	r3, [sp, #4]
 8009484:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009488:	e7a5      	b.n	80093d6 <__kernel_rem_pio2+0x4e6>
 800948a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800948e:	eb0d 0403 	add.w	r4, sp, r3
 8009492:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009496:	2000      	movs	r0, #0
 8009498:	2100      	movs	r1, #0
 800949a:	2d00      	cmp	r5, #0
 800949c:	da09      	bge.n	80094b2 <__kernel_rem_pio2+0x5c2>
 800949e:	f1bb 0f00 	cmp.w	fp, #0
 80094a2:	d002      	beq.n	80094aa <__kernel_rem_pio2+0x5ba>
 80094a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094a8:	4619      	mov	r1, r3
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	e9c3 0100 	strd	r0, r1, [r3]
 80094b0:	e791      	b.n	80093d6 <__kernel_rem_pio2+0x4e6>
 80094b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094b6:	f7f6 fe8d 	bl	80001d4 <__adddf3>
 80094ba:	3d01      	subs	r5, #1
 80094bc:	e7ed      	b.n	800949a <__kernel_rem_pio2+0x5aa>
 80094be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094c2:	f7f6 fe87 	bl	80001d4 <__adddf3>
 80094c6:	3e01      	subs	r6, #1
 80094c8:	e7c0      	b.n	800944c <__kernel_rem_pio2+0x55c>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	e7c5      	b.n	800945c <__kernel_rem_pio2+0x56c>
 80094d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80094d4:	f7f6 fe7e 	bl	80001d4 <__adddf3>
 80094d8:	3401      	adds	r4, #1
 80094da:	e7ca      	b.n	8009472 <__kernel_rem_pio2+0x582>
 80094dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80094e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80094e4:	9b02      	ldr	r3, [sp, #8]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	9302      	str	r3, [sp, #8]
 80094ea:	4632      	mov	r2, r6
 80094ec:	463b      	mov	r3, r7
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f6 fe6f 	bl	80001d4 <__adddf3>
 80094f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	f7f6 fe65 	bl	80001d0 <__aeabi_dsub>
 8009506:	4632      	mov	r2, r6
 8009508:	463b      	mov	r3, r7
 800950a:	f7f6 fe63 	bl	80001d4 <__adddf3>
 800950e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009512:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009516:	ed8a 7b00 	vstr	d7, [sl]
 800951a:	e76e      	b.n	80093fa <__kernel_rem_pio2+0x50a>
 800951c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009520:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009524:	4640      	mov	r0, r8
 8009526:	4632      	mov	r2, r6
 8009528:	463b      	mov	r3, r7
 800952a:	4649      	mov	r1, r9
 800952c:	f7f6 fe52 	bl	80001d4 <__adddf3>
 8009530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4640      	mov	r0, r8
 800953a:	4649      	mov	r1, r9
 800953c:	f7f6 fe48 	bl	80001d0 <__aeabi_dsub>
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	f7f6 fe46 	bl	80001d4 <__adddf3>
 8009548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800954c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009550:	ed84 7b00 	vstr	d7, [r4]
 8009554:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009558:	e755      	b.n	8009406 <__kernel_rem_pio2+0x516>
 800955a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800955e:	f7f6 fe39 	bl	80001d4 <__adddf3>
 8009562:	3d01      	subs	r5, #1
 8009564:	e759      	b.n	800941a <__kernel_rem_pio2+0x52a>
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	9a01      	ldr	r2, [sp, #4]
 800956a:	601d      	str	r5, [r3, #0]
 800956c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009570:	605c      	str	r4, [r3, #4]
 8009572:	609f      	str	r7, [r3, #8]
 8009574:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009578:	60d3      	str	r3, [r2, #12]
 800957a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800957e:	6110      	str	r0, [r2, #16]
 8009580:	6153      	str	r3, [r2, #20]
 8009582:	e728      	b.n	80093d6 <__kernel_rem_pio2+0x4e6>
 8009584:	41700000 	.word	0x41700000
 8009588:	3e700000 	.word	0x3e700000
 800958c:	00000000 	.word	0x00000000

08009590 <__kernel_sin>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	ed2d 8b04 	vpush	{d8-d9}
 8009598:	eeb0 8a41 	vmov.f32	s16, s2
 800959c:	eef0 8a61 	vmov.f32	s17, s3
 80095a0:	ec55 4b10 	vmov	r4, r5, d0
 80095a4:	b083      	sub	sp, #12
 80095a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095ae:	9001      	str	r0, [sp, #4]
 80095b0:	da06      	bge.n	80095c0 <__kernel_sin+0x30>
 80095b2:	ee10 0a10 	vmov	r0, s0
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f7 fa72 	bl	8000aa0 <__aeabi_d2iz>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d051      	beq.n	8009664 <__kernel_sin+0xd4>
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f6 ffba 	bl	8000540 <__aeabi_dmul>
 80095cc:	4682      	mov	sl, r0
 80095ce:	468b      	mov	fp, r1
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f6 ffb2 	bl	8000540 <__aeabi_dmul>
 80095dc:	a341      	add	r3, pc, #260	; (adr r3, 80096e4 <__kernel_sin+0x154>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	4680      	mov	r8, r0
 80095e4:	4689      	mov	r9, r1
 80095e6:	4650      	mov	r0, sl
 80095e8:	4659      	mov	r1, fp
 80095ea:	f7f6 ffa9 	bl	8000540 <__aeabi_dmul>
 80095ee:	a33f      	add	r3, pc, #252	; (adr r3, 80096ec <__kernel_sin+0x15c>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f6 fdec 	bl	80001d0 <__aeabi_dsub>
 80095f8:	4652      	mov	r2, sl
 80095fa:	465b      	mov	r3, fp
 80095fc:	f7f6 ffa0 	bl	8000540 <__aeabi_dmul>
 8009600:	a33c      	add	r3, pc, #240	; (adr r3, 80096f4 <__kernel_sin+0x164>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fde5 	bl	80001d4 <__adddf3>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f6 ff97 	bl	8000540 <__aeabi_dmul>
 8009612:	a33a      	add	r3, pc, #232	; (adr r3, 80096fc <__kernel_sin+0x16c>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fdda 	bl	80001d0 <__aeabi_dsub>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	f7f6 ff8e 	bl	8000540 <__aeabi_dmul>
 8009624:	a337      	add	r3, pc, #220	; (adr r3, 8009704 <__kernel_sin+0x174>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fdd3 	bl	80001d4 <__adddf3>
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	4606      	mov	r6, r0
 8009632:	460f      	mov	r7, r1
 8009634:	b9eb      	cbnz	r3, 8009672 <__kernel_sin+0xe2>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f6 ff7f 	bl	8000540 <__aeabi_dmul>
 8009642:	a325      	add	r3, pc, #148	; (adr r3, 80096d8 <__kernel_sin+0x148>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 fdc2 	bl	80001d0 <__aeabi_dsub>
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	f7f6 ff76 	bl	8000540 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f6 fdba 	bl	80001d4 <__adddf3>
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	ec45 4b10 	vmov	d0, r4, r5
 8009668:	b003      	add	sp, #12
 800966a:	ecbd 8b04 	vpop	{d8-d9}
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	4b1b      	ldr	r3, [pc, #108]	; (80096e0 <__kernel_sin+0x150>)
 8009674:	ec51 0b18 	vmov	r0, r1, d8
 8009678:	2200      	movs	r2, #0
 800967a:	f7f6 ff61 	bl	8000540 <__aeabi_dmul>
 800967e:	4632      	mov	r2, r6
 8009680:	ec41 0b19 	vmov	d9, r0, r1
 8009684:	463b      	mov	r3, r7
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f6 ff59 	bl	8000540 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	ec51 0b19 	vmov	r0, r1, d9
 8009696:	f7f6 fd9b 	bl	80001d0 <__aeabi_dsub>
 800969a:	4652      	mov	r2, sl
 800969c:	465b      	mov	r3, fp
 800969e:	f7f6 ff4f 	bl	8000540 <__aeabi_dmul>
 80096a2:	ec53 2b18 	vmov	r2, r3, d8
 80096a6:	f7f6 fd93 	bl	80001d0 <__aeabi_dsub>
 80096aa:	a30b      	add	r3, pc, #44	; (adr r3, 80096d8 <__kernel_sin+0x148>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	4606      	mov	r6, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	f7f6 ff42 	bl	8000540 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4630      	mov	r0, r6
 80096c2:	4639      	mov	r1, r7
 80096c4:	f7f6 fd86 	bl	80001d4 <__adddf3>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f7f6 fd7e 	bl	80001d0 <__aeabi_dsub>
 80096d4:	e7c4      	b.n	8009660 <__kernel_sin+0xd0>
 80096d6:	bf00      	nop
 80096d8:	55555549 	.word	0x55555549
 80096dc:	3fc55555 	.word	0x3fc55555
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	5acfd57c 	.word	0x5acfd57c
 80096e8:	3de5d93a 	.word	0x3de5d93a
 80096ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80096f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80096f4:	57b1fe7d 	.word	0x57b1fe7d
 80096f8:	3ec71de3 	.word	0x3ec71de3
 80096fc:	19c161d5 	.word	0x19c161d5
 8009700:	3f2a01a0 	.word	0x3f2a01a0
 8009704:	1110f8a6 	.word	0x1110f8a6
 8009708:	3f811111 	.word	0x3f811111

0800970c <with_errno>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4604      	mov	r4, r0
 8009710:	460d      	mov	r5, r1
 8009712:	4616      	mov	r6, r2
 8009714:	f7fe fa0e 	bl	8007b34 <__errno>
 8009718:	4629      	mov	r1, r5
 800971a:	6006      	str	r6, [r0, #0]
 800971c:	4620      	mov	r0, r4
 800971e:	bd70      	pop	{r4, r5, r6, pc}

08009720 <xflow>:
 8009720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009722:	4614      	mov	r4, r2
 8009724:	461d      	mov	r5, r3
 8009726:	b108      	cbz	r0, 800972c <xflow+0xc>
 8009728:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800972c:	e9cd 2300 	strd	r2, r3, [sp]
 8009730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	f7f6 ff02 	bl	8000540 <__aeabi_dmul>
 800973c:	2222      	movs	r2, #34	; 0x22
 800973e:	b003      	add	sp, #12
 8009740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009744:	f7ff bfe2 	b.w	800970c <with_errno>

08009748 <__math_uflow>:
 8009748:	b508      	push	{r3, lr}
 800974a:	2200      	movs	r2, #0
 800974c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009750:	f7ff ffe6 	bl	8009720 <xflow>
 8009754:	ec41 0b10 	vmov	d0, r0, r1
 8009758:	bd08      	pop	{r3, pc}

0800975a <__math_oflow>:
 800975a:	b508      	push	{r3, lr}
 800975c:	2200      	movs	r2, #0
 800975e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009762:	f7ff ffdd 	bl	8009720 <xflow>
 8009766:	ec41 0b10 	vmov	d0, r0, r1
 800976a:	bd08      	pop	{r3, pc}

0800976c <fabs>:
 800976c:	ec51 0b10 	vmov	r0, r1, d0
 8009770:	ee10 2a10 	vmov	r2, s0
 8009774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009778:	ec43 2b10 	vmov	d0, r2, r3
 800977c:	4770      	bx	lr

0800977e <finite>:
 800977e:	b082      	sub	sp, #8
 8009780:	ed8d 0b00 	vstr	d0, [sp]
 8009784:	9801      	ldr	r0, [sp, #4]
 8009786:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800978a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800978e:	0fc0      	lsrs	r0, r0, #31
 8009790:	b002      	add	sp, #8
 8009792:	4770      	bx	lr
 8009794:	0000      	movs	r0, r0
	...

08009798 <floor>:
 8009798:	ec51 0b10 	vmov	r0, r1, d0
 800979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80097a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80097a8:	2e13      	cmp	r6, #19
 80097aa:	ee10 5a10 	vmov	r5, s0
 80097ae:	ee10 8a10 	vmov	r8, s0
 80097b2:	460c      	mov	r4, r1
 80097b4:	dc32      	bgt.n	800981c <floor+0x84>
 80097b6:	2e00      	cmp	r6, #0
 80097b8:	da14      	bge.n	80097e4 <floor+0x4c>
 80097ba:	a333      	add	r3, pc, #204	; (adr r3, 8009888 <floor+0xf0>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f7f6 fd08 	bl	80001d4 <__adddf3>
 80097c4:	2200      	movs	r2, #0
 80097c6:	2300      	movs	r3, #0
 80097c8:	f7f7 f94a 	bl	8000a60 <__aeabi_dcmpgt>
 80097cc:	b138      	cbz	r0, 80097de <floor+0x46>
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	da57      	bge.n	8009882 <floor+0xea>
 80097d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80097d6:	431d      	orrs	r5, r3
 80097d8:	d001      	beq.n	80097de <floor+0x46>
 80097da:	4c2d      	ldr	r4, [pc, #180]	; (8009890 <floor+0xf8>)
 80097dc:	2500      	movs	r5, #0
 80097de:	4621      	mov	r1, r4
 80097e0:	4628      	mov	r0, r5
 80097e2:	e025      	b.n	8009830 <floor+0x98>
 80097e4:	4f2b      	ldr	r7, [pc, #172]	; (8009894 <floor+0xfc>)
 80097e6:	4137      	asrs	r7, r6
 80097e8:	ea01 0307 	and.w	r3, r1, r7
 80097ec:	4303      	orrs	r3, r0
 80097ee:	d01f      	beq.n	8009830 <floor+0x98>
 80097f0:	a325      	add	r3, pc, #148	; (adr r3, 8009888 <floor+0xf0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fced 	bl	80001d4 <__adddf3>
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	f7f7 f92f 	bl	8000a60 <__aeabi_dcmpgt>
 8009802:	2800      	cmp	r0, #0
 8009804:	d0eb      	beq.n	80097de <floor+0x46>
 8009806:	2c00      	cmp	r4, #0
 8009808:	bfbe      	ittt	lt
 800980a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800980e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009812:	19a4      	addlt	r4, r4, r6
 8009814:	ea24 0407 	bic.w	r4, r4, r7
 8009818:	2500      	movs	r5, #0
 800981a:	e7e0      	b.n	80097de <floor+0x46>
 800981c:	2e33      	cmp	r6, #51	; 0x33
 800981e:	dd0b      	ble.n	8009838 <floor+0xa0>
 8009820:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009824:	d104      	bne.n	8009830 <floor+0x98>
 8009826:	ee10 2a10 	vmov	r2, s0
 800982a:	460b      	mov	r3, r1
 800982c:	f7f6 fcd2 	bl	80001d4 <__adddf3>
 8009830:	ec41 0b10 	vmov	d0, r0, r1
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	fa23 f707 	lsr.w	r7, r3, r7
 8009844:	4207      	tst	r7, r0
 8009846:	d0f3      	beq.n	8009830 <floor+0x98>
 8009848:	a30f      	add	r3, pc, #60	; (adr r3, 8009888 <floor+0xf0>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f6 fcc1 	bl	80001d4 <__adddf3>
 8009852:	2200      	movs	r2, #0
 8009854:	2300      	movs	r3, #0
 8009856:	f7f7 f903 	bl	8000a60 <__aeabi_dcmpgt>
 800985a:	2800      	cmp	r0, #0
 800985c:	d0bf      	beq.n	80097de <floor+0x46>
 800985e:	2c00      	cmp	r4, #0
 8009860:	da02      	bge.n	8009868 <floor+0xd0>
 8009862:	2e14      	cmp	r6, #20
 8009864:	d103      	bne.n	800986e <floor+0xd6>
 8009866:	3401      	adds	r4, #1
 8009868:	ea25 0507 	bic.w	r5, r5, r7
 800986c:	e7b7      	b.n	80097de <floor+0x46>
 800986e:	2301      	movs	r3, #1
 8009870:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009874:	fa03 f606 	lsl.w	r6, r3, r6
 8009878:	4435      	add	r5, r6
 800987a:	4545      	cmp	r5, r8
 800987c:	bf38      	it	cc
 800987e:	18e4      	addcc	r4, r4, r3
 8009880:	e7f2      	b.n	8009868 <floor+0xd0>
 8009882:	2500      	movs	r5, #0
 8009884:	462c      	mov	r4, r5
 8009886:	e7aa      	b.n	80097de <floor+0x46>
 8009888:	8800759c 	.word	0x8800759c
 800988c:	7e37e43c 	.word	0x7e37e43c
 8009890:	bff00000 	.word	0xbff00000
 8009894:	000fffff 	.word	0x000fffff

08009898 <scalbn>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	ec55 4b10 	vmov	r4, r5, d0
 800989e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80098a2:	4606      	mov	r6, r0
 80098a4:	462b      	mov	r3, r5
 80098a6:	b99a      	cbnz	r2, 80098d0 <scalbn+0x38>
 80098a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098ac:	4323      	orrs	r3, r4
 80098ae:	d036      	beq.n	800991e <scalbn+0x86>
 80098b0:	4b39      	ldr	r3, [pc, #228]	; (8009998 <scalbn+0x100>)
 80098b2:	4629      	mov	r1, r5
 80098b4:	ee10 0a10 	vmov	r0, s0
 80098b8:	2200      	movs	r2, #0
 80098ba:	f7f6 fe41 	bl	8000540 <__aeabi_dmul>
 80098be:	4b37      	ldr	r3, [pc, #220]	; (800999c <scalbn+0x104>)
 80098c0:	429e      	cmp	r6, r3
 80098c2:	4604      	mov	r4, r0
 80098c4:	460d      	mov	r5, r1
 80098c6:	da10      	bge.n	80098ea <scalbn+0x52>
 80098c8:	a32b      	add	r3, pc, #172	; (adr r3, 8009978 <scalbn+0xe0>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	e03a      	b.n	8009946 <scalbn+0xae>
 80098d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80098d4:	428a      	cmp	r2, r1
 80098d6:	d10c      	bne.n	80098f2 <scalbn+0x5a>
 80098d8:	ee10 2a10 	vmov	r2, s0
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	f7f6 fc78 	bl	80001d4 <__adddf3>
 80098e4:	4604      	mov	r4, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	e019      	b.n	800991e <scalbn+0x86>
 80098ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098ee:	460b      	mov	r3, r1
 80098f0:	3a36      	subs	r2, #54	; 0x36
 80098f2:	4432      	add	r2, r6
 80098f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098f8:	428a      	cmp	r2, r1
 80098fa:	dd08      	ble.n	800990e <scalbn+0x76>
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	a120      	add	r1, pc, #128	; (adr r1, 8009980 <scalbn+0xe8>)
 8009900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009904:	da1c      	bge.n	8009940 <scalbn+0xa8>
 8009906:	a120      	add	r1, pc, #128	; (adr r1, 8009988 <scalbn+0xf0>)
 8009908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800990c:	e018      	b.n	8009940 <scalbn+0xa8>
 800990e:	2a00      	cmp	r2, #0
 8009910:	dd08      	ble.n	8009924 <scalbn+0x8c>
 8009912:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800991a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800991e:	ec45 4b10 	vmov	d0, r4, r5
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009928:	da19      	bge.n	800995e <scalbn+0xc6>
 800992a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800992e:	429e      	cmp	r6, r3
 8009930:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009934:	dd0a      	ble.n	800994c <scalbn+0xb4>
 8009936:	a112      	add	r1, pc, #72	; (adr r1, 8009980 <scalbn+0xe8>)
 8009938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e2      	bne.n	8009906 <scalbn+0x6e>
 8009940:	a30f      	add	r3, pc, #60	; (adr r3, 8009980 <scalbn+0xe8>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fdfb 	bl	8000540 <__aeabi_dmul>
 800994a:	e7cb      	b.n	80098e4 <scalbn+0x4c>
 800994c:	a10a      	add	r1, pc, #40	; (adr r1, 8009978 <scalbn+0xe0>)
 800994e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0b8      	beq.n	80098c8 <scalbn+0x30>
 8009956:	a10e      	add	r1, pc, #56	; (adr r1, 8009990 <scalbn+0xf8>)
 8009958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800995c:	e7b4      	b.n	80098c8 <scalbn+0x30>
 800995e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009962:	3236      	adds	r2, #54	; 0x36
 8009964:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009968:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800996c:	4620      	mov	r0, r4
 800996e:	4b0c      	ldr	r3, [pc, #48]	; (80099a0 <scalbn+0x108>)
 8009970:	2200      	movs	r2, #0
 8009972:	e7e8      	b.n	8009946 <scalbn+0xae>
 8009974:	f3af 8000 	nop.w
 8009978:	c2f8f359 	.word	0xc2f8f359
 800997c:	01a56e1f 	.word	0x01a56e1f
 8009980:	8800759c 	.word	0x8800759c
 8009984:	7e37e43c 	.word	0x7e37e43c
 8009988:	8800759c 	.word	0x8800759c
 800998c:	fe37e43c 	.word	0xfe37e43c
 8009990:	c2f8f359 	.word	0xc2f8f359
 8009994:	81a56e1f 	.word	0x81a56e1f
 8009998:	43500000 	.word	0x43500000
 800999c:	ffff3cb0 	.word	0xffff3cb0
 80099a0:	3c900000 	.word	0x3c900000

080099a4 <_init>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr

080099b0 <_fini>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr
