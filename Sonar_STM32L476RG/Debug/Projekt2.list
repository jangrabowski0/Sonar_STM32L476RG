
Projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000983c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080099c8  080099c8  000199c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d10  08009d10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d18  08009d18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a278  20000074  08009d94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a2ec  08009d94  0002a2ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017152  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003372  00000000  00000000  000371f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029364  00000000  00000000  0003ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019409  00000000  00000000  00065d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f825d  00000000  00000000  0007f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001773d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  00177424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080099ac 	.word	0x080099ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080099ac 	.word	0x080099ac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_DMA_Init+0x38>)
 8000e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <MX_DMA_Init+0x38>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_DMA_Init+0x38>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f001 faf9 	bl	80024ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	f001 fb12 	bl	80024e6 <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_GPIO_Init+0xb8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f640 0104 	movw	r1, #2052	; 0x804
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f36:	f001 fe93 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f42:	f001 fe8d 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f5c:	f001 fcd6 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000f60:	f641 0304 	movw	r3, #6148	; 0x1804
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0xbc>)
 8000f7a:	f001 fcc7 	bl	800290c <HAL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	48000800 	.word	0x48000800

08000f94 <hagl_hal_init>:
#include "hagl/backend.h"
#include "hagl_hal.h"

void hagl_hal_init(hagl_backend_t *backend)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    backend->width = DISPLAY_WIDTH;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	22a0      	movs	r2, #160	; 0xa0
 8000fa0:	801a      	strh	r2, [r3, #0]
    backend->height = DISPLAY_HEIGHT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	805a      	strh	r2, [r3, #2]
    backend->depth = DISPLAY_DEPTH;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2210      	movs	r2, #16
 8000fac:	711a      	strb	r2, [r3, #4]
    backend->put_pixel = lcd_put_pixel;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <hagl_hal_init+0x2c>)
 8000fb2:	611a      	str	r2, [r3, #16]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	08001191 	.word	0x08001191

08000fc4 <lcd_cmd>:
#define ST7735S_VMCTR1			0xc5
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

static void lcd_cmd(uint8_t cmd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <lcd_cmd+0x44>)
 8000fd6:	f001 fe43 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <lcd_cmd+0x44>)
 8000fe2:	f001 fe3d 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000fe6:	1df9      	adds	r1, r7, #7
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	2201      	movs	r2, #1
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <lcd_cmd+0x48>)
 8000ff0:	f003 fa11 	bl	8004416 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <lcd_cmd+0x44>)
 8000ffc:	f001 fe30 	bl	8002c60 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	48000400 	.word	0x48000400
 800100c:	2000a098 	.word	0x2000a098

08001010 <lcd_data>:

static void lcd_data(uint8_t data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <lcd_data+0x44>)
 8001022:	f001 fe1d 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <lcd_data+0x44>)
 800102e:	f001 fe17 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001032:	1df9      	adds	r1, r7, #7
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	2201      	movs	r2, #1
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <lcd_data+0x48>)
 800103c:	f003 f9eb 	bl	8004416 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <lcd_data+0x44>)
 8001048:	f001 fe0a 	bl	8002c60 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	48000400 	.word	0x48000400
 8001058:	2000a098 	.word	0x2000a098

0800105c <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <lcd_send+0x20>
		lcd_cmd(value);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa5 	bl	8000fc4 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800107a:	e004      	b.n	8001086 <lcd_send+0x2a>
		lcd_data(value);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffc5 	bl	8001010 <lcd_data>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <lcd_data16>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_data16(uint16_t value)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29b      	uxth	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffb5 	bl	8001010 <lcd_data>
	lcd_data(value);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffb0 	bl	8001010 <lcd_data>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80010c6:	202a      	movs	r0, #42	; 0x2a
 80010c8:	f7ff ff7c 	bl	8000fc4 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffda 	bl	800108e <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffd1 	bl	800108e <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80010ec:	202b      	movs	r0, #43	; 0x2b
 80010ee:	f7ff ff69 	bl	8000fc4 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3302      	adds	r3, #2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffc7 	bl	800108e <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffbc 	bl	800108e <lcd_data16>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <lcd_init+0x68>)
 800112c:	f001 fd98 	bl	8002c60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f001 f8bd 	bl	80022b0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2104      	movs	r1, #4
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <lcd_init+0x68>)
 800113c:	f001 fd90 	bl	8002c60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f001 f8b5 	bl	80022b0 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e009      	b.n	8001160 <lcd_init+0x40>
    lcd_send(init_table[i]);
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <lcd_init+0x6c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff81 	bl	800105c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b4b      	cmp	r3, #75	; 0x4b
 8001164:	d9f2      	bls.n	800114c <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001166:	20c8      	movs	r0, #200	; 0xc8
 8001168:	f001 f8a2 	bl	80022b0 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 800116c:	2011      	movs	r0, #17
 800116e:	f7ff ff29 	bl	8000fc4 <lcd_cmd>
  HAL_Delay(120);
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f001 f89c 	bl	80022b0 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001178:	2029      	movs	r0, #41	; 0x29
 800117a:	f7ff ff23 	bl	8000fc4 <lcd_cmd>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400
 800118c:	080099c8 	.word	0x080099c8

08001190 <lcd_put_pixel>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_put_pixel(void *_surface, int16_t x, int16_t y, uint16_t color)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	817b      	strh	r3, [r7, #10]
 80011a2:	460b      	mov	r3, r1
 80011a4:	813b      	strh	r3, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x+y*LCD_WIDTH] = color;
 80011aa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80011ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	015b      	lsls	r3, r3, #5
 80011ba:	440b      	add	r3, r1
 80011bc:	4904      	ldr	r1, [pc, #16]	; (80011d0 <lcd_put_pixel+0x40>)
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000090 	.word	0x20000090

080011d4 <lcd_copy>:

void lcd_copy(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	22a0      	movs	r2, #160	; 0xa0
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff6a 	bl	80010b8 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80011e4:	202c      	movs	r0, #44	; 0x2c
 80011e6:	f7ff feed 	bl	8000fc4 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <lcd_copy+0x40>)
 80011f2:	f001 fd35 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <lcd_copy+0x40>)
 80011fe:	f001 fd2f 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001202:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001206:	4904      	ldr	r1, [pc, #16]	; (8001218 <lcd_copy+0x44>)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <lcd_copy+0x48>)
 800120a:	f003 fa73 	bl	80046f4 <HAL_SPI_Transmit_DMA>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	48000400 	.word	0x48000400
 8001218:	20000090 	.word	0x20000090
 800121c:	2000a098 	.word	0x2000a098

08001220 <lcd_transfer_done>:

void lcd_transfer_done(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <lcd_transfer_done+0x14>)
 800122c:	f001 fd18 	bl	8002c60 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000400 	.word	0x48000400

08001238 <lcd_is_busy>:

bool lcd_is_busy(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY)
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <lcd_is_busy+0x1c>)
 800123e:	f003 fb61 	bl	8004904 <HAL_SPI_GetState>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d001      	beq.n	800124c <lcd_is_busy+0x14>
		return true;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <lcd_is_busy+0x16>
	else
		return false;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000a098 	.word	0x2000a098

08001258 <calc_disp_coordinates_math>:



void calc_disp_coordinates_math(int angle, int distance, int *x, int *y, int current_position){
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
	float rad=angle/57.2957795;
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff f900 	bl	800046c <__aeabi_i2d>
 800126c:	a349      	add	r3, pc, #292	; (adr r3, 8001394 <calc_disp_coordinates_math+0x13c>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fa8f 	bl	8000794 <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc37 	bl	8000af0 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	61fb      	str	r3, [r7, #28]
	float y1=sin(rad)*distance;
 8001286:	69f8      	ldr	r0, [r7, #28]
 8001288:	f7ff f902 	bl	8000490 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	ec43 2b10 	vmov	d0, r2, r3
 8001294:	f006 fc84 	bl	8007ba0 <sin>
 8001298:	ec55 4b10 	vmov	r4, r5, d0
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f7ff f8e5 	bl	800046c <__aeabi_i2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f949 	bl	8000540 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc1b 	bl	8000af0 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]
	float x1=sqrt(pow(distance,2)-pow(y1,2))*2.66;
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff f8d4 	bl	800046c <__aeabi_i2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001388 <calc_disp_coordinates_math+0x130>
 80012cc:	ec43 2b10 	vmov	d0, r2, r3
 80012d0:	f006 fcbe 	bl	8007c50 <pow>
 80012d4:	ec55 4b10 	vmov	r4, r5, d0
 80012d8:	69b8      	ldr	r0, [r7, #24]
 80012da:	f7ff f8d9 	bl	8000490 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001388 <calc_disp_coordinates_math+0x130>
 80012e6:	ec43 2b10 	vmov	d0, r2, r3
 80012ea:	f006 fcb1 	bl	8007c50 <pow>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7fe ff6b 	bl	80001d0 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b17 	vmov	d7, r2, r3
 8001302:	eeb0 0a47 	vmov.f32	s0, s14
 8001306:	eef0 0a67 	vmov.f32	s1, s15
 800130a:	f006 fd11 	bl	8007d30 <sqrt>
 800130e:	ec51 0b10 	vmov	r0, r1, d0
 8001312:	a322      	add	r3, pc, #136	; (adr r3, 800139c <calc_disp_coordinates_math+0x144>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f912 	bl	8000540 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fbe4 	bl	8000af0 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	617b      	str	r3, [r7, #20]
	if(current_position<9){
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	2b08      	cmp	r3, #8
 8001330:	dc0c      	bgt.n	800134c <calc_disp_coordinates_math+0xf4>
		*x=80-x1;
 8001332:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001390 <calc_disp_coordinates_math+0x138>
 8001336:	edd7 7a05 	vldr	s15, [r7, #20]
 800133a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001342:	ee17 2a90 	vmov	r2, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00b      	b.n	8001364 <calc_disp_coordinates_math+0x10c>
	}
	else{
		*x=80+x1;
 800134c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001350:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001390 <calc_disp_coordinates_math+0x138>
 8001354:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	ee17 2a90 	vmov	r2, s15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
	}
	*y=y1*3;
 8001364:	edd7 7a06 	vldr	s15, [r7, #24]
 8001368:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800136c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001374:	ee17 2a90 	vmov	r2, s15
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	601a      	str	r2, [r3, #0]

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	00000000 	.word	0x00000000
 800138c:	40000000 	.word	0x40000000
 8001390:	42a00000 	.word	0x42a00000
 8001394:	1a47a9e3 	.word	0x1a47a9e3
 8001398:	404ca5dc 	.word	0x404ca5dc
 800139c:	147ae148 	.word	0x147ae148
 80013a0:	400547ae 	.word	0x400547ae

080013a4 <calc_disp_coordinates>:

void calc_disp_coordinates(uint8_t current_position, int *x, int *y, int distance){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
   uint8_t angle;
	switch(current_position)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	f200 80fc 	bhi.w	80015b4 <calc_disp_coordinates+0x210>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <calc_disp_coordinates+0x20>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	08001411 	.word	0x08001411
 80013c8:	08001429 	.word	0x08001429
 80013cc:	0800143f 	.word	0x0800143f
 80013d0:	08001455 	.word	0x08001455
 80013d4:	0800146b 	.word	0x0800146b
 80013d8:	08001481 	.word	0x08001481
 80013dc:	08001497 	.word	0x08001497
 80013e0:	080014ad 	.word	0x080014ad
 80013e4:	080014c3 	.word	0x080014c3
 80013e8:	080014d9 	.word	0x080014d9
 80013ec:	080014ed 	.word	0x080014ed
 80013f0:	08001503 	.word	0x08001503
 80013f4:	08001519 	.word	0x08001519
 80013f8:	0800152f 	.word	0x0800152f
 80013fc:	08001545 	.word	0x08001545
 8001400:	0800155b 	.word	0x0800155b
 8001404:	08001571 	.word	0x08001571
 8001408:	08001587 	.word	0x08001587
 800140c:	0800159d 	.word	0x0800159d
	{
	case 0:
			*x=80-distance*3;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	601a      	str	r2, [r3, #0]
			*y=0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
			break;
 8001426:	e0c5      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 1:
			 angle=10;
 8001428:	230a      	movs	r3, #10
 800142a:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 800142c:	7df8      	ldrb	r0, [r7, #23]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	f7ff ff0e 	bl	8001258 <calc_disp_coordinates_math>
			break;
 800143c:	e0ba      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 2:
			 angle=20;
 800143e:	2314      	movs	r3, #20
 8001440:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001442:	7df8      	ldrb	r0, [r7, #23]
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	f7ff ff03 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001452:	e0af      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 3:
			 angle=30;
 8001454:	231e      	movs	r3, #30
 8001456:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001458:	7df8      	ldrb	r0, [r7, #23]
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	f7ff fef8 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001468:	e0a4      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 4:
			 angle=40;
 800146a:	2328      	movs	r3, #40	; 0x28
 800146c:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 800146e:	7df8      	ldrb	r0, [r7, #23]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	6839      	ldr	r1, [r7, #0]
 800147a:	f7ff feed 	bl	8001258 <calc_disp_coordinates_math>
			break;
 800147e:	e099      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 5:
			 angle=50;
 8001480:	2332      	movs	r3, #50	; 0x32
 8001482:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001484:	7df8      	ldrb	r0, [r7, #23]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	f7ff fee2 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001494:	e08e      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 6:
			angle=60;
 8001496:	233c      	movs	r3, #60	; 0x3c
 8001498:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 800149a:	7df8      	ldrb	r0, [r7, #23]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	f7ff fed7 	bl	8001258 <calc_disp_coordinates_math>
			break;
 80014aa:	e083      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 7:
			angle=70;
 80014ac:	2346      	movs	r3, #70	; 0x46
 80014ae:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 80014b0:	7df8      	ldrb	r0, [r7, #23]
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	f7ff fecc 	bl	8001258 <calc_disp_coordinates_math>
			break;
 80014c0:	e078      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 8:
			angle=80;
 80014c2:	2350      	movs	r3, #80	; 0x50
 80014c4:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 80014c6:	7df8      	ldrb	r0, [r7, #23]
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	6839      	ldr	r1, [r7, #0]
 80014d2:	f7ff fec1 	bl	8001258 <calc_disp_coordinates_math>
			break;
 80014d6:	e06d      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 9:
			*x=80;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2250      	movs	r2, #80	; 0x50
 80014dc:	601a      	str	r2, [r3, #0]
			*y=distance*3;
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	441a      	add	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
			break;
 80014ea:	e063      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 10:
			angle=80;
 80014ec:	2350      	movs	r3, #80	; 0x50
 80014ee:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 80014f0:	7df8      	ldrb	r0, [r7, #23]
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	f7ff feac 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001500:	e058      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 11:
			angle=70;
 8001502:	2346      	movs	r3, #70	; 0x46
 8001504:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001506:	7df8      	ldrb	r0, [r7, #23]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	f7ff fea1 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001516:	e04d      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 12:
		angle=60;
 8001518:	233c      	movs	r3, #60	; 0x3c
 800151a:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 800151c:	7df8      	ldrb	r0, [r7, #23]
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	f7ff fe96 	bl	8001258 <calc_disp_coordinates_math>
			break;
 800152c:	e042      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 13:
		angle=50;
 800152e:	2332      	movs	r3, #50	; 0x32
 8001530:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001532:	7df8      	ldrb	r0, [r7, #23]
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	6839      	ldr	r1, [r7, #0]
 800153e:	f7ff fe8b 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001542:	e037      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 14:
		angle=40;
 8001544:	2328      	movs	r3, #40	; 0x28
 8001546:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001548:	7df8      	ldrb	r0, [r7, #23]
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	f7ff fe80 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001558:	e02c      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 15:
		angle=30;
 800155a:	231e      	movs	r3, #30
 800155c:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 800155e:	7df8      	ldrb	r0, [r7, #23]
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	f7ff fe75 	bl	8001258 <calc_disp_coordinates_math>
			break;
 800156e:	e021      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 16:
		angle=20;
 8001570:	2314      	movs	r3, #20
 8001572:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 8001574:	7df8      	ldrb	r0, [r7, #23]
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	f7ff fe6a 	bl	8001258 <calc_disp_coordinates_math>
			break;
 8001584:	e016      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 17:
		angle=10;
 8001586:	230a      	movs	r3, #10
 8001588:	75fb      	strb	r3, [r7, #23]
			calc_disp_coordinates_math(angle,distance, x, y, current_position);
 800158a:	7df8      	ldrb	r0, [r7, #23]
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	f7ff fe5f 	bl	8001258 <calc_disp_coordinates_math>
			break;
 800159a:	e00b      	b.n	80015b4 <calc_disp_coordinates+0x210>
	case 18:
		*x=80+distance*3;
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	601a      	str	r2, [r3, #0]
		*y=0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
			break;
 80015b2:	bf00      	nop
	}
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_SPI_TxCpltCallback>:
volatile uint8_t current_position;
volatile int pulse_width=699;
volatile int distance;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_SPI_TxCpltCallback+0x1c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 80015cc:	f7ff fe28 	bl	8001220 <lcd_transfer_done>
	}
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000a098 	.word	0x2000a098

080015dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	 if (htim == &htim6) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d11a      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x46>
		 is_max_angle_180( STEP, pulse_width, &state);
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015f2:	4619      	mov	r1, r3
 80015f4:	2064      	movs	r0, #100	; 0x64
 80015f6:	f000 f943 	bl	8001880 <is_max_angle_180>
		 adjust_rotation_direction(STEP, &pulse_width, state);
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4917      	ldr	r1, [pc, #92]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	f000 f95f 	bl	80018c8 <adjust_rotation_direction>
		 calc_current_position(pulse_width, &current_position);
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4916      	ldr	r1, [pc, #88]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f97f 	bl	8001914 <calc_current_position>
		 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse_width);
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
	 else if(htim==&htim4){
		 uint32_t start = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
		 uint32_t stop = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
		 distance=(stop-start)/58;
	 }
}
 8001620:	e017      	b.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x76>
	 else if(htim==&htim4){
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d113      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x76>
		 uint32_t start = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800162a:	2100      	movs	r1, #0
 800162c:	4810      	ldr	r0, [pc, #64]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800162e:	f004 fa85 	bl	8005b3c <HAL_TIM_ReadCapturedValue>
 8001632:	60f8      	str	r0, [r7, #12]
		 uint32_t stop = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8001634:	2104      	movs	r1, #4
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001638:	f004 fa80 	bl	8005b3c <HAL_TIM_ReadCapturedValue>
 800163c:	60b8      	str	r0, [r7, #8]
		 distance=(stop-start)/58;
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	461a      	mov	r2, r3
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000a1dc 	.word	0x2000a1dc
 8001660:	20000000 	.word	0x20000000
 8001664:	2000a090 	.word	0x2000a090
 8001668:	2000a091 	.word	0x2000a091
 800166c:	2000a144 	.word	0x2000a144
 8001670:	2000a190 	.word	0x2000a190
 8001674:	8d3dcb09 	.word	0x8d3dcb09
 8001678:	2000a094 	.word	0x2000a094

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f000 fd99 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f8a5 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f7ff fc21 	bl	8000ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 800168e:	f7ff fc01 	bl	8000e94 <MX_DMA_Init>
  MX_SPI2_Init();
 8001692:	f000 f959 	bl	8001948 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001696:	f000 faa3 	bl	8001be0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800169a:	f000 fbc5 	bl	8001e28 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800169e:	f000 fcd5 	bl	800204c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80016a2:	f000 fb15 	bl	8001cd0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80016a6:	f7ff fd3b 	bl	8001120 <lcd_init>
  hagl_backend_t *display=hagl_init();
 80016aa:	f005 fd63 	bl	8007174 <hagl_init>
 80016ae:	60f8      	str	r0, [r7, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016b0:	2104      	movs	r1, #4
 80016b2:	4843      	ldr	r0, [pc, #268]	; (80017c0 <main+0x144>)
 80016b4:	f003 fc44 	bl	8004f40 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80016b8:	4842      	ldr	r0, [pc, #264]	; (80017c4 <main+0x148>)
 80016ba:	f003 fb6f 	bl	8004d9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80016be:	4842      	ldr	r0, [pc, #264]	; (80017c8 <main+0x14c>)
 80016c0:	f003 fb6c 	bl	8004d9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80016c4:	2100      	movs	r1, #0
 80016c6:	4840      	ldr	r0, [pc, #256]	; (80017c8 <main+0x14c>)
 80016c8:	f003 fda2 	bl	8005210 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 80016cc:	2104      	movs	r1, #4
 80016ce:	483e      	ldr	r0, [pc, #248]	; (80017c8 <main+0x14c>)
 80016d0:	f003 fd9e 	bl	8005210 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80016d4:	2108      	movs	r1, #8
 80016d6:	483c      	ldr	r0, [pc, #240]	; (80017c8 <main+0x14c>)
 80016d8:	f003 fc32 	bl	8004f40 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 80016dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e0:	f000 fde6 	bl	80022b0 <HAL_Delay>

  hagl_fill_circle(display,30 ,30, 100, BLACK);
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	221e      	movs	r2, #30
 80016ec:	211e      	movs	r1, #30
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f005 feb3 	bl	800745a <hagl_fill_circle>
  hagl_draw_circle(display,80 ,0, 64, RED);
 80016f4:	23f8      	movs	r3, #248	; 0xf8
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	2200      	movs	r2, #0
 80016fc:	2150      	movs	r1, #80	; 0x50
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f005 fd78 	bl	80071f4 <hagl_draw_circle>
  hagl_draw_circle(display,80 ,0, 128, RED);
 8001704:	23f8      	movs	r3, #248	; 0xf8
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	2200      	movs	r2, #0
 800170c:	2150      	movs	r1, #80	; 0x50
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f005 fd70 	bl	80071f4 <hagl_draw_circle>
  lcd_copy();
 8001714:	f7ff fd5e 	bl	80011d4 <lcd_copy>
  HAL_Delay(300);
 8001718:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800171c:	f000 fdc8 	bl	80022b0 <HAL_Delay>

  int x;
  int y;
  while (1)
  {
	  if((current_position==18)||(current_position==0)){
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <main+0x150>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b12      	cmp	r3, #18
 8001728:	d004      	beq.n	8001734 <main+0xb8>
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <main+0x150>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d11f      	bne.n	8001774 <main+0xf8>
	  		  hagl_fill_circle(display,30 ,3, 190, BLACK);
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	23be      	movs	r3, #190	; 0xbe
 800173a:	2203      	movs	r2, #3
 800173c:	211e      	movs	r1, #30
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f005 fe8b 	bl	800745a <hagl_fill_circle>
	  		  hagl_draw_circle(display,80 ,0, 64, RED);
 8001744:	23f8      	movs	r3, #248	; 0xf8
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2340      	movs	r3, #64	; 0x40
 800174a:	2200      	movs	r2, #0
 800174c:	2150      	movs	r1, #80	; 0x50
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f005 fd50 	bl	80071f4 <hagl_draw_circle>
	  		  hagl_draw_circle(display,80 ,0, 128, RED);
 8001754:	23f8      	movs	r3, #248	; 0xf8
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	2200      	movs	r2, #0
 800175c:	2150      	movs	r1, #80	; 0x50
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f005 fd48 	bl	80071f4 <hagl_draw_circle>
	  		  lcd_copy();
 8001764:	f7ff fd36 	bl	80011d4 <lcd_copy>
	  		  while (lcd_is_busy()) {}
 8001768:	bf00      	nop
 800176a:	f7ff fd65 	bl	8001238 <lcd_is_busy>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1fa      	bne.n	800176a <main+0xee>
	  	  }
	  if(distance>0 && distance<30){
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <main+0x154>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	ddd1      	ble.n	8001720 <main+0xa4>
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <main+0x154>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b1d      	cmp	r3, #29
 8001782:	dccd      	bgt.n	8001720 <main+0xa4>
		  calc_disp_coordinates(current_position, &x, &y, distance);
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <main+0x150>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <main+0x154>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	1d3a      	adds	r2, r7, #4
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	f7ff fe06 	bl	80013a4 <calc_disp_coordinates>
		  hagl_fill_circle(display,x ,y, 2, GREEN);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	b219      	sxth	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	b21a      	sxth	r2, r3
 80017a0:	f24e 0307 	movw	r3, #57351	; 0xe007
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2302      	movs	r3, #2
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f005 fe56 	bl	800745a <hagl_fill_circle>

		  lcd_copy();
 80017ae:	f7ff fd11 	bl	80011d4 <lcd_copy>
		  while (lcd_is_busy()) {}
 80017b2:	bf00      	nop
 80017b4:	f7ff fd40 	bl	8001238 <lcd_is_busy>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1fa      	bne.n	80017b4 <main+0x138>
	  if((current_position==18)||(current_position==0)){
 80017be:	e7af      	b.n	8001720 <main+0xa4>
 80017c0:	2000a144 	.word	0x2000a144
 80017c4:	2000a1dc 	.word	0x2000a1dc
 80017c8:	2000a190 	.word	0x2000a190
 80017cc:	2000a091 	.word	0x2000a091
 80017d0:	2000a094 	.word	0x2000a094

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	; 0x58
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2244      	movs	r2, #68	; 0x44
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 f9d2 	bl	8007b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017fa:	f001 fa57 	bl	8002cac <HAL_PWREx_ControlVoltageScaling>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001804:	f000 f837 	bl	8001876 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001808:	2302      	movs	r3, #2
 800180a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001812:	2310      	movs	r3, #16
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001816:	2302      	movs	r3, #2
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181a:	2302      	movs	r3, #2
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001822:	230a      	movs	r3, #10
 8001824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001826:	2307      	movs	r3, #7
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182e:	2302      	movs	r3, #2
 8001830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fa8e 	bl	8002d58 <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001842:	f000 f818 	bl	8001876 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	230f      	movs	r3, #15
 8001848:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2303      	movs	r3, #3
 800184c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	2104      	movs	r1, #4
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fe56 	bl	8003510 <HAL_RCC_ClockConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800186a:	f000 f804 	bl	8001876 <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	3758      	adds	r7, #88	; 0x58
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187a:	b672      	cpsid	i
}
 800187c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187e:	e7fe      	b.n	800187e <Error_Handler+0x8>

08001880 <is_max_angle_180>:

#include "servo.h"


bool is_max_angle_180(int i, volatile int pulse_width, volatile bool *state){
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	if(pulse_width>2400){
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001892:	dd04      	ble.n	800189e <is_max_angle_180+0x1e>
		i=20;
 8001894:	2314      	movs	r3, #20
 8001896:	60fb      	str	r3, [r7, #12]
		*state=true;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
	}
	if(pulse_width<700){
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80018a4:	da04      	bge.n	80018b0 <is_max_angle_180+0x30>
		i=20;
 80018a6:	2314      	movs	r3, #20
 80018a8:	60fb      	str	r3, [r7, #12]
		*state=false;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	}
	return state;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <adjust_rotation_direction>:

void adjust_rotation_direction(int i, volatile int *pulse_width, volatile bool state){
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	71fb      	strb	r3, [r7, #7]
	if(state){
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <adjust_rotation_direction+0x24>
		*pulse_width-=i;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad2      	subs	r2, r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	601a      	str	r2, [r3, #0]
	}
	else if(!state){
		*pulse_width+=i;
	}
}
 80018ea:	e00c      	b.n	8001906 <adjust_rotation_direction+0x3e>
	else if(!state){
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <adjust_rotation_direction+0x3e>
		*pulse_width+=i;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	441a      	add	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <calc_current_position>:

void calc_current_position(volatile int pulse_width, volatile uint8_t *current_position){
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	*current_position=(pulse_width-699)/100;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f2a3 23bb 	subw	r3, r3, #699	; 0x2bb
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <calc_current_position+0x30>)
 8001926:	fb82 1203 	smull	r1, r2, r2, r3
 800192a:	1152      	asrs	r2, r2, #5
 800192c:	17db      	asrs	r3, r3, #31
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b2da      	uxtb	r2, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	701a      	strb	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_SPI2_Init+0x74>)
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <MX_SPI2_Init+0x78>)
 8001950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_SPI2_Init+0x74>)
 8001954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_SPI2_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_SPI2_Init+0x74>)
 8001962:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001966:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_SPI2_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_SPI2_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_SPI2_Init+0x74>)
 8001976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_SPI2_Init+0x74>)
 800197e:	2210      	movs	r2, #16
 8001980:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_SPI2_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_SPI2_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_SPI2_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_SPI2_Init+0x74>)
 8001996:	2207      	movs	r2, #7
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_SPI2_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_SPI2_Init+0x74>)
 80019a2:	2208      	movs	r2, #8
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_SPI2_Init+0x74>)
 80019a8:	f002 fc92 	bl	80042d0 <HAL_SPI_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019b2:	f7ff ff60 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000a098 	.word	0x2000a098
 80019c0:	40003800 	.word	0x40003800

080019c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_SPI_MspInit+0x108>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d16d      	bne.n	8001ac2 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e6:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	4a39      	ldr	r2, [pc, #228]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_SPI_MspInit+0x10c>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3e:	2305      	movs	r3, #5
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4822      	ldr	r0, [pc, #136]	; (8001ad4 <HAL_SPI_MspInit+0x110>)
 8001a4a:	f000 ff5f 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a60:	2305      	movs	r3, #5
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481b      	ldr	r0, [pc, #108]	; (8001ad8 <HAL_SPI_MspInit+0x114>)
 8001a6c:	f000 ff4e 	bl	800290c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <HAL_SPI_MspInit+0x11c>)
 8001a74:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a7e:	2210      	movs	r2, #16
 8001a80:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001aa6:	480d      	ldr	r0, [pc, #52]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001aa8:	f000 fd38 	bl	800251c <HAL_DMA_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001ab2:	f7ff fee0 	bl	8001876 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_SPI_MspInit+0x118>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40003800 	.word	0x40003800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	2000a0fc 	.word	0x2000a0fc
 8001ae0:	40020058 	.word	0x40020058

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_MspInit+0x44>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6613      	str	r3, [r2, #96]	; 0x60
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_MspInit+0x44>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_MspInit+0x44>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_MspInit+0x44>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f000 fb7a 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <DMA1_Channel5_IRQHandler+0x10>)
 8001b86:	f000 fde1 	bl	800274c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000a0fc 	.word	0x2000a0fc

08001b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM4_IRQHandler+0x10>)
 8001b9a:	f003 fc35 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000a190 	.word	0x2000a190

08001ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM6_DAC_IRQHandler+0x10>)
 8001bae:	f003 fc2b 	bl	8005408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000a1dc 	.word	0x2000a1dc

08001bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <MX_TIM3_Init+0xec>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c1a:	224f      	movs	r2, #79	; 0x4f
 8001c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c26:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c38:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c3a:	f003 f857 	bl	8004cec <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c44:	f7ff fe17 	bl	8001876 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	4619      	mov	r1, r3
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c56:	f003 fea7 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c60:	f7ff fe09 	bl	8001876 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c64:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c66:	f003 f909 	bl	8004e7c <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c70:	f7ff fe01 	bl	8001876 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c84:	f004 fd1a 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c8e:	f7ff fdf2 	bl	8001876 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c92:	2360      	movs	r3, #96	; 0x60
 8001c94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001cac:	f003 fd68 	bl	8005780 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001cb6:	f7ff fdde 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cba:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001cbc:	f000 f968 	bl	8001f90 <HAL_TIM_MspPostInit>

}
 8001cc0:	bf00      	nop
 8001cc2:	3738      	adds	r7, #56	; 0x38
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000a144 	.word	0x2000a144
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b092      	sub	sp, #72	; 0x48
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d12:	4a44      	ldr	r2, [pc, #272]	; (8001e24 <MX_TIM4_Init+0x154>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d18:	224f      	movs	r2, #79	; 0x4f
 8001d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24999;
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d24:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d36:	483a      	ldr	r0, [pc, #232]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d38:	f002 ffd8 	bl	8004cec <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d42:	f7ff fd98 	bl	8001876 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d50:	4619      	mov	r1, r3
 8001d52:	4833      	ldr	r0, [pc, #204]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d54:	f003 fe28 	bl	80059a8 <HAL_TIM_ConfigClockSource>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d5e:	f7ff fd8a 	bl	8001876 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d62:	482f      	ldr	r0, [pc, #188]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d64:	f003 f9f2 	bl	800514c <HAL_TIM_IC_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001d6e:	f7ff fd82 	bl	8001876 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d72:	482b      	ldr	r0, [pc, #172]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d74:	f003 f882 	bl	8004e7c <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d7e:	f7ff fd7a 	bl	8001876 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4823      	ldr	r0, [pc, #140]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001d92:	f004 fc93 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001d9c:	f7ff fd6b 	bl	8001876 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001da4:	2301      	movs	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 15;
 8001dac:	230f      	movs	r3, #15
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	4619      	mov	r1, r3
 8001db8:	4819      	ldr	r0, [pc, #100]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001dba:	f003 fc44 	bl	8005646 <HAL_TIM_IC_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8001dc4:	f7ff fd57 	bl	8001876 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	623b      	str	r3, [r7, #32]
  sConfigIC.ICFilter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4810      	ldr	r0, [pc, #64]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001dde:	f003 fc32 	bl	8005646 <HAL_TIM_IC_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8001de8:	f7ff fd45 	bl	8001876 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dec:	2360      	movs	r3, #96	; 0x60
 8001dee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001df0:	230a      	movs	r3, #10
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2208      	movs	r2, #8
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001e04:	f003 fcbc 	bl	8005780 <HAL_TIM_PWM_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM4_Init+0x142>
  {
    Error_Handler();
 8001e0e:	f7ff fd32 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <MX_TIM4_Init+0x150>)
 8001e14:	f000 f8bc 	bl	8001f90 <HAL_TIM_MspPostInit>

}
 8001e18:	bf00      	nop
 8001e1a:	3748      	adds	r7, #72	; 0x48
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000a190 	.word	0x2000a190
 8001e24:	40000800 	.word	0x40000800

08001e28 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e3a:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <MX_TIM6_Init+0x6c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 799;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e40:	f240 321f 	movw	r2, #799	; 0x31f
 8001e44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e5c:	f002 ff46 	bl	8004cec <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001e66:	f7ff fd06 	bl	8001876 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <MX_TIM6_Init+0x68>)
 8001e78:	f004 fc20 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001e82:	f7ff fcf8 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000a1dc 	.word	0x2000a1dc
 8001e94:	40001000 	.word	0x40001000

08001e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <HAL_TIM_Base_MspInit+0xe4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ed2:	e04e      	b.n	8001f72 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <HAL_TIM_Base_MspInit+0xec>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d130      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f0e:	2340      	movs	r3, #64	; 0x40
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4817      	ldr	r0, [pc, #92]	; (8001f88 <HAL_TIM_Base_MspInit+0xf0>)
 8001f2a:	f000 fcef 	bl	800290c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 10, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	210a      	movs	r1, #10
 8001f32:	201e      	movs	r0, #30
 8001f34:	f000 fabb 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f38:	201e      	movs	r0, #30
 8001f3a:	f000 fad4 	bl	80024e6 <HAL_NVIC_EnableIRQ>
}
 8001f3e:	e018      	b.n	8001f72 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM6)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_TIM_Base_MspInit+0xf4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d113      	bne.n	8001f72 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_TIM_Base_MspInit+0xe8>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 9, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2109      	movs	r1, #9
 8001f66:	2036      	movs	r0, #54	; 0x36
 8001f68:	f000 faa1 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f6c:	2036      	movs	r0, #54	; 0x36
 8001f6e:	f000 faba 	bl	80024e6 <HAL_NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40000800 	.word	0x40000800
 8001f88:	48000400 	.word	0x48000400
 8001f8c:	40001000 	.word	0x40001000

08001f90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_TIM_MspPostInit+0xac>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d11d      	bne.n	8001fee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f000 fc90 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fec:	e021      	b.n	8002032 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_TIM_MspPostInit+0xb4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d11c      	bne.n	8002032 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_TIM_MspPostInit+0xb0>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002022:	2302      	movs	r3, #2
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <HAL_TIM_MspPostInit+0xb8>)
 800202e:	f000 fc6d 	bl	800290c <HAL_GPIO_Init>
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40000400 	.word	0x40000400
 8002040:	40021000 	.word	0x40021000
 8002044:	40000800 	.word	0x40000800
 8002048:	48000400 	.word	0x48000400

0800204c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <MX_USART2_UART_Init+0x5c>)
 8002054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_USART2_UART_Init+0x58>)
 8002090:	f004 fbba 	bl	8006808 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800209a:	f7ff fbec 	bl	8001876 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000a228 	.word	0x2000a228
 80020a8:	40004400 	.word	0x40004400

080020ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ac      	sub	sp, #176	; 0xb0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2288      	movs	r2, #136	; 0x88
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 fd5d 	bl	8007b8c <memset>
  if(uartHandle->Instance==USART2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_UART_MspInit+0xb0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d13b      	bne.n	8002154 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020dc:	2302      	movs	r3, #2
 80020de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fc35 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f4:	f7ff fbbf 	bl	8001876 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_UART_MspInit+0xb4>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_UART_MspInit+0xb4>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_UART_MspInit+0xb4>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_UART_MspInit+0xb4>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_UART_MspInit+0xb4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_UART_MspInit+0xb4>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002128:	230c      	movs	r3, #12
 800212a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002140:	2307      	movs	r3, #7
 8002142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f000 fbdc 	bl	800290c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002154:	bf00      	nop
 8002156:	37b0      	adds	r7, #176	; 0xb0
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40004400 	.word	0x40004400
 8002160:	40021000 	.word	0x40021000

08002164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002168:	f7ff fd28 	bl	8001bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LoopForever+0xe>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <LoopForever+0x16>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002192:	f005 fcd7 	bl	8007b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002196:	f7ff fa71 	bl	800167c <main>

0800219a <LoopForever>:

LoopForever:
    b LoopForever
 800219a:	e7fe      	b.n	800219a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800219c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021a8:	08009d20 	.word	0x08009d20
  ldr r2, =_sbss
 80021ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021b0:	2000a2ec 	.word	0x2000a2ec

080021b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_2_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_Init+0x3c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_Init+0x3c>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 f962 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d4:	2000      	movs	r0, #0
 80021d6:	f000 f80f 	bl	80021f8 <HAL_InitTick>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	e001      	b.n	80021ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021e6:	f7ff fc7d 	bl	8001ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ea:	79fb      	ldrb	r3, [r7, #7]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_InitTick+0x6c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_InitTick+0x70>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_InitTick+0x6c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f96d 	bl	8002502 <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d809      	bhi.n	8002248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f000 f937 	bl	80024ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_InitTick+0x74>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e007      	b.n	8002258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e004      	b.n	8002258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e001      	b.n	8002258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000004 	.word	0x20000004
 800226c:	20000008 	.word	0x20000008

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	2000000c 	.word	0x2000000c
 8002294:	2000a2ac 	.word	0x2000a2ac

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	2000a2ac 	.word	0x2000a2ac

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000000c 	.word	0x2000000c

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff29 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff3e 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff31 	bl	800235c <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e098      	b.n	8002660 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_DMA_Init+0x150>)
 8002536:	429a      	cmp	r2, r3
 8002538:	d80f      	bhi.n	800255a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <HAL_DMA_Init+0x154>)
 8002542:	4413      	add	r3, r2
 8002544:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <HAL_DMA_Init+0x158>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a48      	ldr	r2, [pc, #288]	; (8002678 <HAL_DMA_Init+0x15c>)
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
 8002558:	e00e      	b.n	8002578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_DMA_Init+0x160>)
 8002562:	4413      	add	r3, r2
 8002564:	4a43      	ldr	r2, [pc, #268]	; (8002674 <HAL_DMA_Init+0x158>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	009a      	lsls	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a42      	ldr	r2, [pc, #264]	; (8002680 <HAL_DMA_Init+0x164>)
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d2:	d039      	beq.n	8002648 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a27      	ldr	r2, [pc, #156]	; (8002678 <HAL_DMA_Init+0x15c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11a      	bne.n	8002614 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_DMA_Init+0x168>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 031c 	and.w	r3, r3, #28
 80025ea:	210f      	movs	r1, #15
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4924      	ldr	r1, [pc, #144]	; (8002684 <HAL_DMA_Init+0x168>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_DMA_Init+0x168>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f003 031c 	and.w	r3, r3, #28
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	491d      	ldr	r1, [pc, #116]	; (8002684 <HAL_DMA_Init+0x168>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
 8002612:	e019      	b.n	8002648 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002614:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_DMA_Init+0x16c>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f003 031c 	and.w	r3, r3, #28
 8002620:	210f      	movs	r1, #15
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	4917      	ldr	r1, [pc, #92]	; (8002688 <HAL_DMA_Init+0x16c>)
 800262a:	4013      	ands	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_DMA_Init+0x16c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f003 031c 	and.w	r3, r3, #28
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	4911      	ldr	r1, [pc, #68]	; (8002688 <HAL_DMA_Init+0x16c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40020407 	.word	0x40020407
 8002670:	bffdfff8 	.word	0xbffdfff8
 8002674:	cccccccd 	.word	0xcccccccd
 8002678:	40020000 	.word	0x40020000
 800267c:	bffdfbf8 	.word	0xbffdfbf8
 8002680:	40020400 	.word	0x40020400
 8002684:	400200a8 	.word	0x400200a8
 8002688:	400204a8 	.word	0x400204a8

0800268c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Start_IT+0x20>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e04b      	b.n	8002744 <HAL_DMA_Start_IT+0xb8>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d13a      	bne.n	8002736 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f8e0 	bl	80028aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 020e 	orr.w	r2, r2, #14
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e00f      	b.n	8002724 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0204 	bic.w	r2, r2, #4
 8002712:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 020a 	orr.w	r2, r2, #10
 8002722:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e005      	b.n	8002742 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800273e:	2302      	movs	r3, #2
 8002740:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f003 031c 	and.w	r3, r3, #28
 800276c:	2204      	movs	r2, #4
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d026      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x7a>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d021      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f003 021c 	and.w	r2, r3, #28
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2104      	movs	r1, #4
 80027ae:	fa01 f202 	lsl.w	r2, r1, r2
 80027b2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d071      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	e06c      	b.n	80028a0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f003 031c 	and.w	r3, r3, #28
 80027ce:	2202      	movs	r2, #2
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02e      	beq.n	8002838 <HAL_DMA_IRQHandler+0xec>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d029      	beq.n	8002838 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10b      	bne.n	800280a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020a 	bic.w	r2, r2, #10
 8002800:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f003 021c 	and.w	r2, r3, #28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2102      	movs	r1, #2
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d038      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002836:	e033      	b.n	80028a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 031c 	and.w	r3, r3, #28
 8002840:	2208      	movs	r2, #8
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02a      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x156>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d025      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020e 	bic.w	r2, r2, #14
 8002864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f003 021c 	and.w	r2, r3, #28
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f202 	lsl.w	r2, r1, r2
 8002878:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
}
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f003 021c 	and.w	r2, r3, #28
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d108      	bne.n	80028ee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ec:	e007      	b.n	80028fe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291a:	e17f      	b.n	8002c1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8171 	beq.w	8002c16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d005      	beq.n	800294c <HAL_GPIO_Init+0x40>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d130      	bne.n	80029ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002982:	2201      	movs	r2, #1
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f003 0201 	and.w	r2, r3, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d118      	bne.n	80029ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	6939      	ldr	r1, [r7, #16]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80ac 	beq.w	8002c16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	4a5e      	ldr	r2, [pc, #376]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ad6:	4a5a      	ldr	r2, [pc, #360]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b00:	d025      	beq.n	8002b4e <HAL_GPIO_Init+0x242>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4f      	ldr	r2, [pc, #316]	; (8002c44 <HAL_GPIO_Init+0x338>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01f      	beq.n	8002b4a <HAL_GPIO_Init+0x23e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4e      	ldr	r2, [pc, #312]	; (8002c48 <HAL_GPIO_Init+0x33c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x23a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4d      	ldr	r2, [pc, #308]	; (8002c4c <HAL_GPIO_Init+0x340>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x236>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4c      	ldr	r2, [pc, #304]	; (8002c50 <HAL_GPIO_Init+0x344>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x232>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <HAL_GPIO_Init+0x348>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x22e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4a      	ldr	r2, [pc, #296]	; (8002c58 <HAL_GPIO_Init+0x34c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x22a>
 8002b32:	2306      	movs	r3, #6
 8002b34:	e00c      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b36:	2307      	movs	r3, #7
 8002b38:	e00a      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	e008      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e004      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_Init+0x244>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	f002 0203 	and.w	r2, r2, #3
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b60:	4937      	ldr	r1, [pc, #220]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b92:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bbc:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002be6:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f47f ae78 	bne.w	800291c <HAL_GPIO_Init+0x10>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000
 8002c44:	48000400 	.word	0x48000400
 8002c48:	48000800 	.word	0x48000800
 8002c4c:	48000c00 	.word	0x48000c00
 8002c50:	48001000 	.word	0x48001000
 8002c54:	48001400 	.word	0x48001400
 8002c58:	48001800 	.word	0x48001800
 8002c5c:	40010400 	.word	0x40010400

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cba:	d130      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc8:	d038      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2232      	movs	r2, #50	; 0x32
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	3301      	adds	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf0:	e002      	b.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d102      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f2      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d110      	bne.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2a:	d007      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	20000004 	.word	0x20000004
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e3ca      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6a:	4b97      	ldr	r3, [pc, #604]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d74:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80e4 	beq.w	8002f54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4a>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	f040 808b 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 8087 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da2:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x62>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e3a2      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x7c>
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd2:	e005      	b.n	8002de0 <HAL_RCC_OscConfig+0x88>
 8002dd4:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d223      	bcs.n	8002e2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd55 	bl	8003898 <RCC_SetFlashLatencyFromMSIRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e383      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df8:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a72      	ldr	r2, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	496d      	ldr	r1, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4968      	ldr	r1, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 8002e2a:	e025      	b.n	8002e78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4960      	ldr	r1, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	495b      	ldr	r1, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd15 	bl	8003898 <RCC_SetFlashLatencyFromMSIRange>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e343      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e78:	f000 fc4a 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	4950      	ldr	r1, [pc, #320]	; (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_RCC_OscConfig+0x278>)
 8002e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e98:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff f9ab 	bl	80021f8 <HAL_InitTick>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d052      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	e327      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eb8:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f9e8 	bl	8002298 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ecc:	f7ff f9e4 	bl	8002298 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e310      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a36      	ldr	r2, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4931      	ldr	r1, [pc, #196]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	492c      	ldr	r1, [pc, #176]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e01a      	b.n	8002f54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2a:	f7ff f9b5 	bl	8002298 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f32:	f7ff f9b1 	bl	8002298 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e2dd      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x1da>
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d074      	beq.n	800304a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x21a>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d10e      	bne.n	8002f8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d064      	beq.n	8003048 <HAL_RCC_OscConfig+0x2f0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d160      	bne.n	8003048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e2ba      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x24a>
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e026      	b.n	8002ff0 <HAL_RCC_OscConfig+0x298>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x280>
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_OscConfig+0x298>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08009a60 	.word	0x08009a60
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	20000008 	.word	0x20000008
 8002fd8:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a9f      	ldr	r2, [pc, #636]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b9d      	ldr	r3, [pc, #628]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a9c      	ldr	r2, [pc, #624]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7ff f94e 	bl	8002298 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7ff f94a 	bl	8002298 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e276      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	4b92      	ldr	r3, [pc, #584]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x2a8>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff f93a 	bl	8002298 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7ff f936 	bl	8002298 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e262      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d0>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d060      	beq.n	8003118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x310>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d119      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d116      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003068:	4b7c      	ldr	r3, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x328>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e23f      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	4973      	ldr	r1, [pc, #460]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003094:	e040      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d023      	beq.n	80030e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7ff f8f5 	bl	8002298 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7ff f8f1 	bl	8002298 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e21d      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b62      	ldr	r3, [pc, #392]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	495f      	ldr	r1, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7ff f8d1 	bl	8002298 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7ff f8cd 	bl	8002298 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1f9      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7ff f8ac 	bl	8002298 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7ff f8a8 	bl	8002298 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1d4      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x3ec>
 8003164:	e01b      	b.n	800319e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	4a3b      	ldr	r2, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7ff f88f 	bl	8002298 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7ff f88b 	bl	8002298 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1b7      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a6 	beq.w	80032f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d118      	bne.n	8003216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f0:	f7ff f852 	bl	8002298 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7ff f84e 	bl	8002298 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e17a      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x4d8>
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322e:	e029      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d115      	bne.n	8003264 <HAL_RCC_OscConfig+0x50c>
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
 8003264:	4b9c      	ldr	r3, [pc, #624]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a9b      	ldr	r2, [pc, #620]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003274:	4b98      	ldr	r3, [pc, #608]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a97      	ldr	r2, [pc, #604]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7ff f804 	bl	8002298 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7ff f800 	bl	8002298 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e12a      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ed      	beq.n	8003294 <HAL_RCC_OscConfig+0x53c>
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe ffed 	bl	8002298 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe ffe9 	bl	8002298 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e113      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d8:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ed      	bne.n	80032c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	4a79      	ldr	r2, [pc, #484]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80fe 	beq.w	80034fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 80d0 	bne.w	80034ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800330c:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	429a      	cmp	r2, r3
 800331e:	d130      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	3b01      	subs	r3, #1
 800332c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d127      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11f      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800334c:	2a07      	cmp	r2, #7
 800334e:	bf14      	ite	ne
 8003350:	2201      	movne	r2, #1
 8003352:	2200      	moveq	r2, #0
 8003354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003356:	4293      	cmp	r3, r2
 8003358:	d113      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	3b01      	subs	r3, #1
 8003368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d109      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d06e      	beq.n	8003460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d069      	beq.n	800345c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003388:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0ad      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033a4:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b0:	f7fe ff72 	bl	8002298 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe ff6e 	bl	8002298 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e09a      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d6:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033e6:	3a01      	subs	r2, #1
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	4311      	orrs	r1, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f0:	0212      	lsls	r2, r2, #8
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	0852      	lsrs	r2, r2, #1
 80033fa:	3a01      	subs	r2, #1
 80033fc:	0552      	lsls	r2, r2, #21
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0652      	lsls	r2, r2, #25
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003410:	0912      	lsrs	r2, r2, #4
 8003412:	0452      	lsls	r2, r2, #17
 8003414:	430a      	orrs	r2, r1
 8003416:	4930      	ldr	r1, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003434:	f7fe ff30 	bl	8002298 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe ff2c 	bl	8002298 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e058      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345a:	e050      	b.n	80034fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e04f      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d148      	bne.n	80034fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003484:	f7fe ff08 	bl	8002298 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe ff04 	bl	8002298 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e030      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x734>
 80034aa:	e028      	b.n	80034fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d023      	beq.n	80034fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe feeb 	bl	8002298 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	e00c      	b.n	80034e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fee7 	bl	8002298 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d905      	bls.n	80034e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e013      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_OscConfig+0x7b0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ec      	bne.n	80034c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x7b0>)
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	4905      	ldr	r1, [pc, #20]	; (8003508 <HAL_RCC_OscConfig+0x7b0>)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x7b4>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	60cb      	str	r3, [r1, #12]
 80034f8:	e001      	b.n	80034fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	feeefffc 	.word	0xfeeefffc

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0e7      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4970      	ldr	r1, [pc, #448]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b6e      	ldr	r3, [pc, #440]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cf      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356c:	429a      	cmp	r2, r3
 800356e:	d908      	bls.n	8003582 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4960      	ldr	r1, [pc, #384]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04c      	beq.n	8003628 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d121      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0a6      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d115      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e09a      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c6:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e08e      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e086      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4943      	ldr	r1, [pc, #268]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f8:	f7fe fe4e 	bl	8002298 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe fe4a 	bl	8002298 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e06e      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003640:	429a      	cmp	r2, r3
 8003642:	d208      	bcs.n	8003656 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	492b      	ldr	r1, [pc, #172]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d210      	bcs.n	8003686 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0207 	bic.w	r2, r3, #7
 800366c:	4923      	ldr	r1, [pc, #140]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e036      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003692:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4918      	ldr	r1, [pc, #96]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4910      	ldr	r1, [pc, #64]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c4:	f000 f824 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	490b      	ldr	r1, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1f4>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	4a09      	ldr	r2, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1f8>)
 80036e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1fc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fd85 	bl	80021f8 <HAL_InitTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40022000 	.word	0x40022000
 8003700:	40021000 	.word	0x40021000
 8003704:	08009a60 	.word	0x08009a60
 8003708:	20000004 	.word	0x20000004
 800370c:	20000008 	.word	0x20000008

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003728:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x34>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d121      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d11e      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <HAL_RCC_GetSysClockFreq+0x10c>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d102      	bne.n	800378e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e004      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d101      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 8003796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d134      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d003      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xac>
 80037b4:	e005      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 80037be:	617b      	str	r3, [r7, #20]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	617b      	str	r3, [r7, #20]
      break;
 80037c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	fb03 f202 	mul.w	r2, r3, r2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	0e5b      	lsrs	r3, r3, #25
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	3301      	adds	r3, #1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003808:	69bb      	ldr	r3, [r7, #24]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	; 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	08009a78 	.word	0x08009a78
 8003820:	00f42400 	.word	0x00f42400
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_RCC_GetHCLKFreq+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000004 	.word	0x20000004

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003844:	f7ff fff0 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	08009a70 	.word	0x08009a70

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003870:	f7ff ffda 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0adb      	lsrs	r3, r3, #11
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08009a70 	.word	0x08009a70

08003898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b0:	f7ff f9ee 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 80038b4:	6178      	str	r0, [r7, #20]
 80038b6:	e014      	b.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6593      	str	r3, [r2, #88]	; 0x58
 80038c4:	4b22      	ldr	r3, [pc, #136]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d0:	f7ff f9de 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 80038d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e8:	d10b      	bne.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d919      	bls.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2ba0      	cmp	r3, #160	; 0xa0
 80038f4:	d902      	bls.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038f6:	2302      	movs	r3, #2
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e013      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038fc:	2301      	movs	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e010      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d902      	bls.n	800390e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003908:	2303      	movs	r3, #3
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	e00a      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d102      	bne.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003914:	2302      	movs	r3, #2
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e004      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b70      	cmp	r3, #112	; 0x70
 800391e:	d101      	bne.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003920:	2301      	movs	r3, #1
 8003922:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 0207 	bic.w	r2, r3, #7
 800392c:	4909      	ldr	r1, [pc, #36]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	40022000 	.word	0x40022000

08003958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003960:	2300      	movs	r3, #0
 8003962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003964:	2300      	movs	r3, #0
 8003966:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003970:	2b00      	cmp	r3, #0
 8003972:	d041      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003978:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800397c:	d02a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800397e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003982:	d824      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003988:	d008      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800398a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800398e:	d81e      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d010      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800399a:	e018      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800399c:	4b86      	ldr	r3, [pc, #536]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a85      	ldr	r2, [pc, #532]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039a8:	e015      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fabb 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ba:	e00c      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3320      	adds	r3, #32
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fba6 	bl	8004114 <RCCEx_PLLSAI2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	74fb      	strb	r3, [r7, #19]
      break;
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039dc:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ea:	4973      	ldr	r1, [pc, #460]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039f2:	e001      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d041      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a0c:	d02a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a12:	d824      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a18:	d008      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a1e:	d81e      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a28:	d010      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a2a:	e018      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a2c:	4b62      	ldr	r3, [pc, #392]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a61      	ldr	r2, [pc, #388]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a38:	e015      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fa73 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4a:	e00c      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3320      	adds	r3, #32
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb5e 	bl	8004114 <RCCEx_PLLSAI2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5c:	e003      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	74fb      	strb	r3, [r7, #19]
      break;
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a6c:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a7a:	494f      	ldr	r1, [pc, #316]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a82:	e001      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a0 	beq.w	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	4a40      	ldr	r2, [pc, #256]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	; 0x58
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003acc:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe fbde 	bl	8002298 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ade:	e009      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae0:	f7fe fbda 	bl	8002298 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d902      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	74fb      	strb	r3, [r7, #19]
        break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ef      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d15c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d019      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b24:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b30:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b50:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe fb99 	bl	8002298 <HAL_GetTick>
 8003b66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b68:	e00b      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fb95 	bl	8002298 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d902      	bls.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b80:	e006      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ec      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc4:	7c7b      	ldrb	r3, [r7, #17]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bca:	4b9e      	ldr	r3, [pc, #632]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	4a9d      	ldr	r2, [pc, #628]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be2:	4b98      	ldr	r3, [pc, #608]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f023 0203 	bic.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	4994      	ldr	r1, [pc, #592]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c04:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f023 020c 	bic.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	498c      	ldr	r1, [pc, #560]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c26:	4b87      	ldr	r3, [pc, #540]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4983      	ldr	r1, [pc, #524]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c48:	4b7e      	ldr	r3, [pc, #504]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	497b      	ldr	r1, [pc, #492]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	4972      	ldr	r1, [pc, #456]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c8c:	4b6d      	ldr	r3, [pc, #436]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	496a      	ldr	r1, [pc, #424]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	4961      	ldr	r1, [pc, #388]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd0:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cde:	4959      	ldr	r1, [pc, #356]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf2:	4b54      	ldr	r3, [pc, #336]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	4950      	ldr	r1, [pc, #320]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	4948      	ldr	r1, [pc, #288]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d36:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	493f      	ldr	r1, [pc, #252]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d028      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d58:	4b3a      	ldr	r3, [pc, #232]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	4937      	ldr	r1, [pc, #220]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d76:	d106      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a31      	ldr	r2, [pc, #196]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d82:	60d3      	str	r3, [r2, #12]
 8003d84:	e011      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f8c8 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d028      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	491f      	ldr	r1, [pc, #124]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de0:	60d3      	str	r3, [r2, #12]
 8003de2:	e011      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f899 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d02b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	4908      	ldr	r1, [pc, #32]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e32:	d109      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a02      	ldr	r2, [pc, #8]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e3e:	60d3      	str	r3, [r2, #12]
 8003e40:	e014      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f867 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02f      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e86:	4928      	ldr	r1, [pc, #160]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e96:	d10d      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f844 	bl	8003f2c <RCCEx_PLLSAI1_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d014      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	74bb      	strb	r3, [r7, #18]
 8003eb2:	e011      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f925 	bl	8004114 <RCCEx_PLLSAI2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee4:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef2:	490d      	ldr	r1, [pc, #52]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f16:	4904      	ldr	r1, [pc, #16]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000

08003f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f3a:	4b75      	ldr	r3, [pc, #468]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f46:	4b72      	ldr	r3, [pc, #456]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d10d      	bne.n	8003f72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
       ||
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d047      	beq.n	8004002 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	e044      	b.n	8004002 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d018      	beq.n	8003fb2 <RCCEx_PLLSAI1_Config+0x86>
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d825      	bhi.n	8003fd0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d002      	beq.n	8003f8e <RCCEx_PLLSAI1_Config+0x62>
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d009      	beq.n	8003fa0 <RCCEx_PLLSAI1_Config+0x74>
 8003f8c:	e020      	b.n	8003fd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f8e:	4b60      	ldr	r3, [pc, #384]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11d      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9e:	e01a      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa0:	4b5b      	ldr	r3, [pc, #364]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d116      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb0:	e013      	b.n	8003fda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fb2:	4b57      	ldr	r3, [pc, #348]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fbe:	4b54      	ldr	r3, [pc, #336]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fce:	e006      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd4:	e004      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e002      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	4944      	ldr	r1, [pc, #272]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d17d      	bne.n	8004104 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004008:	4b41      	ldr	r3, [pc, #260]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a40      	ldr	r2, [pc, #256]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004014:	f7fe f940 	bl	8002298 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800401a:	e009      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800401c:	f7fe f93c 	bl	8002298 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d902      	bls.n	8004030 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	73fb      	strb	r3, [r7, #15]
        break;
 800402e:	e005      	b.n	800403c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004030:	4b37      	ldr	r3, [pc, #220]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ef      	bne.n	800401c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d160      	bne.n	8004104 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d111      	bne.n	800406c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004048:	4b31      	ldr	r3, [pc, #196]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6892      	ldr	r2, [r2, #8]
 8004058:	0211      	lsls	r1, r2, #8
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	0912      	lsrs	r2, r2, #4
 8004060:	0452      	lsls	r2, r2, #17
 8004062:	430a      	orrs	r2, r1
 8004064:	492a      	ldr	r1, [pc, #168]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
 800406a:	e027      	b.n	80040bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d112      	bne.n	8004098 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800407a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	0211      	lsls	r1, r2, #8
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6912      	ldr	r2, [r2, #16]
 8004088:	0852      	lsrs	r2, r2, #1
 800408a:	3a01      	subs	r2, #1
 800408c:	0552      	lsls	r2, r2, #21
 800408e:	430a      	orrs	r2, r1
 8004090:	491f      	ldr	r1, [pc, #124]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	610b      	str	r3, [r1, #16]
 8004096:	e011      	b.n	80040bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	0211      	lsls	r1, r2, #8
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6952      	ldr	r2, [r2, #20]
 80040ae:	0852      	lsrs	r2, r2, #1
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0652      	lsls	r2, r2, #25
 80040b4:	430a      	orrs	r2, r1
 80040b6:	4916      	ldr	r1, [pc, #88]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fe f8e6 	bl	8002298 <HAL_GetTick>
 80040cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ce:	e009      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d0:	f7fe f8e2 	bl	8002298 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d902      	bls.n	80040e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	73fb      	strb	r3, [r7, #15]
          break;
 80040e2:	e005      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ef      	beq.n	80040d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800412e:	4b67      	ldr	r3, [pc, #412]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d10d      	bne.n	800415a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
       ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004146:	4b61      	ldr	r3, [pc, #388]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
       ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d047      	beq.n	80041ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e044      	b.n	80041ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d018      	beq.n	800419a <RCCEx_PLLSAI2_Config+0x86>
 8004168:	2b03      	cmp	r3, #3
 800416a:	d825      	bhi.n	80041b8 <RCCEx_PLLSAI2_Config+0xa4>
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <RCCEx_PLLSAI2_Config+0x62>
 8004170:	2b02      	cmp	r3, #2
 8004172:	d009      	beq.n	8004188 <RCCEx_PLLSAI2_Config+0x74>
 8004174:	e020      	b.n	80041b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004176:	4b55      	ldr	r3, [pc, #340]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11d      	bne.n	80041be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e01a      	b.n	80041be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004188:	4b50      	ldr	r3, [pc, #320]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004198:	e013      	b.n	80041c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800419a:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a6:	4b49      	ldr	r3, [pc, #292]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b6:	e006      	b.n	80041c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e004      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ce:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	430b      	orrs	r3, r1
 80041e4:	4939      	ldr	r1, [pc, #228]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d167      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a35      	ldr	r2, [pc, #212]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fc:	f7fe f84c 	bl	8002298 <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004202:	e009      	b.n	8004218 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004204:	f7fe f848 	bl	8002298 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
        break;
 8004216:	e005      	b.n	8004224 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004218:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ef      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d14a      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d111      	bne.n	8004254 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004230:	4b26      	ldr	r3, [pc, #152]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	0912      	lsrs	r2, r2, #4
 8004248:	0452      	lsls	r2, r2, #17
 800424a:	430a      	orrs	r2, r1
 800424c:	491f      	ldr	r1, [pc, #124]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	614b      	str	r3, [r1, #20]
 8004252:	e011      	b.n	8004278 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800425c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	0211      	lsls	r1, r2, #8
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6912      	ldr	r2, [r2, #16]
 800426a:	0852      	lsrs	r2, r2, #1
 800426c:	3a01      	subs	r2, #1
 800426e:	0652      	lsls	r2, r2, #25
 8004270:	430a      	orrs	r2, r1
 8004272:	4916      	ldr	r1, [pc, #88]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004278:	4b14      	ldr	r3, [pc, #80]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a13      	ldr	r2, [pc, #76]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe f808 	bl	8002298 <HAL_GetTick>
 8004288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800428a:	e009      	b.n	80042a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800428c:	f7fe f804 	bl	8002298 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d902      	bls.n	80042a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	73fb      	strb	r3, [r7, #15]
          break;
 800429e:	e005      	b.n	80042ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ef      	beq.n	800428c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4904      	ldr	r1, [pc, #16]	; (80042cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e095      	b.n	800440e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d009      	beq.n	8004308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	e005      	b.n	8004308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fb4e 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004348:	d902      	bls.n	8004350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e002      	b.n	8004356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800435e:	d007      	beq.n	8004370 <HAL_SPI_Init+0xa0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004368:	d002      	beq.n	8004370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	ea42 0103 	orr.w	r1, r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 0204 	and.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043ec:	ea42 0103 	orr.w	r1, r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b088      	sub	sp, #32
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_SPI_Transmit+0x22>
 8004434:	2302      	movs	r3, #2
 8004436:	e158      	b.n	80046ea <HAL_SPI_Transmit+0x2d4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004440:	f7fd ff2a 	bl	8002298 <HAL_GetTick>
 8004444:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800445a:	e13d      	b.n	80046d8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_SPI_Transmit+0x52>
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800446c:	e134      	b.n	80046d8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2203      	movs	r2, #3
 8004472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b8:	d10f      	bne.n	80044da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d007      	beq.n	80044f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004500:	d94b      	bls.n	800459a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_SPI_Transmit+0xfa>
 800450a:	8afb      	ldrh	r3, [r7, #22]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d13e      	bne.n	800458e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	1c9a      	adds	r2, r3, #2
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004534:	e02b      	b.n	800458e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d112      	bne.n	800456a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	881a      	ldrh	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	1c9a      	adds	r2, r3, #2
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004568:	e011      	b.n	800458e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800456a:	f7fd fe95 	bl	8002298 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d803      	bhi.n	8004582 <HAL_SPI_Transmit+0x16c>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d102      	bne.n	8004588 <HAL_SPI_Transmit+0x172>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800458c:	e0a4      	b.n	80046d8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ce      	bne.n	8004536 <HAL_SPI_Transmit+0x120>
 8004598:	e07c      	b.n	8004694 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_SPI_Transmit+0x192>
 80045a2:	8afb      	ldrh	r3, [r7, #22]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d170      	bne.n	800468a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d912      	bls.n	80045d8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	1c9a      	adds	r2, r3, #2
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b02      	subs	r3, #2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045d6:	e058      	b.n	800468a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045fe:	e044      	b.n	800468a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d12b      	bne.n	8004666 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d912      	bls.n	800463e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b02      	subs	r3, #2
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800463c:	e025      	b.n	800468a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004664:	e011      	b.n	800468a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004666:	f7fd fe17 	bl	8002298 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d803      	bhi.n	800467e <HAL_SPI_Transmit+0x268>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d102      	bne.n	8004684 <HAL_SPI_Transmit+0x26e>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004688:	e026      	b.n	80046d8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1b5      	bne.n	8004600 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fae1 	bl	8004c60 <SPI_EndRxTxTransaction>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e000      	b.n	80046d8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80046d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_SPI_Transmit_DMA+0x20>
 8004710:	2302      	movs	r3, #2
 8004712:	e0d8      	b.n	80048c6 <HAL_SPI_Transmit_DMA+0x1d2>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d002      	beq.n	800472e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800472c:	e0c6      	b.n	80048bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_SPI_Transmit_DMA+0x46>
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800473e:	e0bd      	b.n	80048bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2203      	movs	r2, #3
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478a:	d10f      	bne.n	80047ac <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	4a47      	ldr	r2, [pc, #284]	; (80048d0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	4a46      	ldr	r2, [pc, #280]	; (80048d4 <HAL_SPI_Transmit_DMA+0x1e0>)
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	4a45      	ldr	r2, [pc, #276]	; (80048d8 <HAL_SPI_Transmit_DMA+0x1e4>)
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	2200      	movs	r2, #0
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047da:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	d82d      	bhi.n	8004842 <HAL_SPI_Transmit_DMA+0x14e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d127      	bne.n	8004842 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800480e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800481e:	e010      	b.n	8004842 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800482e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	b29b      	uxth	r3, r3
 800483a:	3301      	adds	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	4619      	mov	r1, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004858:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800485a:	f7fd ff17 	bl	800268c <HAL_DMA_Start_IT>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800487c:	e01e      	b.n	80048bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d007      	beq.n	800489c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0220 	orr.w	r2, r2, #32
 80048aa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0202 	orr.w	r2, r2, #2
 80048ba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	080049c7 	.word	0x080049c7
 80048d4:	08004921 	.word	0x08004921
 80048d8:	080049e3 	.word	0x080049e3

080048dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004912:	b2db      	uxtb	r3, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800492e:	f7fd fcb3 	bl	8002298 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d03b      	beq.n	80049ba <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0220 	bic.w	r2, r2, #32
 8004950:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0202 	bic.w	r2, r2, #2
 8004960:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	2164      	movs	r1, #100	; 0x64
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	f000 f97a 	bl	8004c60 <SPI_EndRxTxTransaction>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff9c 	bl	80048f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049b8:	e002      	b.n	80049c0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f7fc fdfe 	bl	80015bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff ff81 	bl	80048dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0203 	bic.w	r2, r2, #3
 80049fe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	f043 0210 	orr.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff ff6b 	bl	80048f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a34:	f7fd fc30 	bl	8002298 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4413      	add	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a44:	f7fd fc28 	bl	8002298 <HAL_GetTick>
 8004a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	015b      	lsls	r3, r3, #5
 8004a50:	0d1b      	lsrs	r3, r3, #20
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5a:	e054      	b.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d050      	beq.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a64:	f7fd fc18 	bl	8002298 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d902      	bls.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d13d      	bne.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a92:	d111      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	d004      	beq.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d107      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac0:	d10f      	bne.n	8004ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e017      	b.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	bf0c      	ite	eq
 8004b16:	2301      	moveq	r3, #1
 8004b18:	2300      	movne	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d19b      	bne.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000004 	.word	0x20000004

08004b34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	; 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b46:	f7fd fba7 	bl	8002298 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	4413      	add	r3, r2
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b56:	f7fd fb9f 	bl	8002298 <HAL_GetTick>
 8004b5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b64:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	00da      	lsls	r2, r3, #3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	0d1b      	lsrs	r3, r3, #20
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b7c:	e060      	b.n	8004c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b84:	d107      	bne.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d050      	beq.n	8004c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b9e:	f7fd fb7b 	bl	8002298 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d902      	bls.n	8004bb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d13d      	bne.n	8004c30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bcc:	d111      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d004      	beq.n	8004be2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be0:	d107      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfa:	d10f      	bne.n	8004c1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e010      	b.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d196      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3728      	adds	r7, #40	; 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000004 	.word	0x20000004

08004c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff ff5b 	bl	8004b34 <SPI_WaitFifoStateUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e027      	b.n	8004ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2180      	movs	r1, #128	; 0x80
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fec0 	bl	8004a24 <SPI_WaitFlagStateUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e014      	b.n	8004ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff ff34 	bl	8004b34 <SPI_WaitFifoStateUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e000      	b.n	8004ce4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e049      	b.n	8004d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd f8c0 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 ff72 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d001      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e04f      	b.n	8004e54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d018      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d115      	bne.n	8004e3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d015      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0xb4>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d011      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	e008      	b.n	8004e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e000      	b.n	8004e52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	00010007 	.word	0x00010007

08004e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e049      	b.n	8004f22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f841 	bl	8004f2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 feaa 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d109      	bne.n	8004f64 <HAL_TIM_PWM_Start+0x24>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e03c      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d109      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x3e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	bf14      	ite	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	2300      	moveq	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	e02f      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d109      	bne.n	8004f98 <HAL_TIM_PWM_Start+0x58>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	bf14      	ite	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	2300      	moveq	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e022      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d109      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x72>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e015      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d109      	bne.n	8004fcc <HAL_TIM_PWM_Start+0x8c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e008      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e09c      	b.n	8005120 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xb6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff4:	e023      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0xc6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	e01b      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xd6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	e013      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xe6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005024:	e00b      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b10      	cmp	r3, #16
 800502a:	d104      	bne.n	8005036 <HAL_TIM_PWM_Start+0xf6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005034:	e003      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2201      	movs	r2, #1
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fb12 	bl	8006670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a35      	ldr	r2, [pc, #212]	; (8005128 <HAL_TIM_PWM_Start+0x1e8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_TIM_PWM_Start+0x13e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a34      	ldr	r2, [pc, #208]	; (800512c <HAL_TIM_PWM_Start+0x1ec>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <HAL_TIM_PWM_Start+0x13e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a32      	ldr	r2, [pc, #200]	; (8005130 <HAL_TIM_PWM_Start+0x1f0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_TIM_PWM_Start+0x13e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a31      	ldr	r2, [pc, #196]	; (8005134 <HAL_TIM_PWM_Start+0x1f4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_TIM_PWM_Start+0x13e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <HAL_TIM_PWM_Start+0x1f8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_Start+0x142>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <HAL_TIM_PWM_Start+0x144>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <HAL_TIM_PWM_Start+0x1e8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <HAL_TIM_PWM_Start+0x19e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d018      	beq.n	80050de <HAL_TIM_PWM_Start+0x19e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_TIM_PWM_Start+0x1fc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_TIM_PWM_Start+0x19e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_TIM_PWM_Start+0x200>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_TIM_PWM_Start+0x19e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_TIM_PWM_Start+0x204>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIM_PWM_Start+0x19e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <HAL_TIM_PWM_Start+0x1ec>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIM_PWM_Start+0x19e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_TIM_PWM_Start+0x1f0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d115      	bne.n	800510a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_TIM_PWM_Start+0x208>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	d015      	beq.n	800511c <HAL_TIM_PWM_Start+0x1dc>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d011      	beq.n	800511c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	e008      	b.n	800511c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e000      	b.n	800511e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	00010007 	.word	0x00010007

0800514c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f841 	bl	80051fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fd42 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <HAL_TIM_IC_Start+0x1a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e023      	b.n	8005272 <HAL_TIM_IC_Start+0x62>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d104      	bne.n	800523a <HAL_TIM_IC_Start+0x2a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e01b      	b.n	8005272 <HAL_TIM_IC_Start+0x62>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d104      	bne.n	800524a <HAL_TIM_IC_Start+0x3a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e013      	b.n	8005272 <HAL_TIM_IC_Start+0x62>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	d104      	bne.n	800525a <HAL_TIM_IC_Start+0x4a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005256:	b2db      	uxtb	r3, r3
 8005258:	e00b      	b.n	8005272 <HAL_TIM_IC_Start+0x62>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b10      	cmp	r3, #16
 800525e:	d104      	bne.n	800526a <HAL_TIM_IC_Start+0x5a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005266:	b2db      	uxtb	r3, r3
 8005268:	e003      	b.n	8005272 <HAL_TIM_IC_Start+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005270:	b2db      	uxtb	r3, r3
 8005272:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <HAL_TIM_IC_Start+0x74>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e013      	b.n	80052ac <HAL_TIM_IC_Start+0x9c>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d104      	bne.n	8005294 <HAL_TIM_IC_Start+0x84>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e00b      	b.n	80052ac <HAL_TIM_IC_Start+0x9c>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b08      	cmp	r3, #8
 8005298:	d104      	bne.n	80052a4 <HAL_TIM_IC_Start+0x94>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e003      	b.n	80052ac <HAL_TIM_IC_Start+0x9c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d001      	beq.n	80052be <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e092      	b.n	80053e4 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Start+0xbe>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052cc:	e023      	b.n	8005316 <HAL_TIM_IC_Start+0x106>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Start+0xce>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	e01b      	b.n	8005316 <HAL_TIM_IC_Start+0x106>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start+0xde>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	e013      	b.n	8005316 <HAL_TIM_IC_Start+0x106>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_IC_Start+0xee>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052fc:	e00b      	b.n	8005316 <HAL_TIM_IC_Start+0x106>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b10      	cmp	r3, #16
 8005302:	d104      	bne.n	800530e <HAL_TIM_IC_Start+0xfe>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530c:	e003      	b.n	8005316 <HAL_TIM_IC_Start+0x106>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_TIM_IC_Start+0x116>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	e013      	b.n	800534e <HAL_TIM_IC_Start+0x13e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b04      	cmp	r3, #4
 800532a:	d104      	bne.n	8005336 <HAL_TIM_IC_Start+0x126>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	e00b      	b.n	800534e <HAL_TIM_IC_Start+0x13e>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d104      	bne.n	8005346 <HAL_TIM_IC_Start+0x136>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005344:	e003      	b.n	800534e <HAL_TIM_IC_Start+0x13e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2201      	movs	r2, #1
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f98a 	bl	8006670 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <HAL_TIM_IC_Start+0x1dc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01d      	beq.n	80053a2 <HAL_TIM_IC_Start+0x192>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d018      	beq.n	80053a2 <HAL_TIM_IC_Start+0x192>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <HAL_TIM_IC_Start+0x1e0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <HAL_TIM_IC_Start+0x192>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <HAL_TIM_IC_Start+0x1e4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIM_IC_Start+0x192>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_TIM_IC_Start+0x1e8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIM_IC_Start+0x192>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <HAL_TIM_IC_Start+0x1ec>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_IC_Start+0x192>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_TIM_IC_Start+0x1f0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d115      	bne.n	80053ce <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b16      	ldr	r3, [pc, #88]	; (8005404 <HAL_TIM_IC_Start+0x1f4>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b06      	cmp	r3, #6
 80053b2:	d015      	beq.n	80053e0 <HAL_TIM_IC_Start+0x1d0>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d011      	beq.n	80053e0 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	e008      	b.n	80053e0 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e000      	b.n	80053e2 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40013400 	.word	0x40013400
 8005400:	40014000 	.word	0x40014000
 8005404:	00010007 	.word	0x00010007

08005408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b02      	cmp	r3, #2
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0202 	mvn.w	r2, #2
 8005434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fbc4 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fbb6 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fbc7 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b04      	cmp	r3, #4
 8005470:	d122      	bne.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d11b      	bne.n	80054b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0204 	mvn.w	r2, #4
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fb9a 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fb8c 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb9d 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d122      	bne.n	800550c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d11b      	bne.n	800550c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0208 	mvn.w	r2, #8
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2204      	movs	r2, #4
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fb70 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fb62 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fb73 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b10      	cmp	r3, #16
 8005518:	d122      	bne.n	8005560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0210 	mvn.w	r2, #16
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2208      	movs	r2, #8
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb46 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fb38 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb49 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10e      	bne.n	800558c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0201 	mvn.w	r2, #1
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fc f828 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b80      	cmp	r3, #128	; 0x80
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 f914 	bl	80067e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c6:	d10e      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d107      	bne.n	80055e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 f907 	bl	80067f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d10e      	bne.n	8005612 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d107      	bne.n	8005612 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800560a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 faf7 	bl	8005c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b20      	cmp	r3, #32
 800561e:	d10e      	bne.n	800563e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	d107      	bne.n	800563e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f06f 0220 	mvn.w	r2, #32
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f8c7 	bl	80067cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005660:	2302      	movs	r3, #2
 8005662:	e088      	b.n	8005776 <HAL_TIM_IC_ConfigChannel+0x130>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11b      	bne.n	80056aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6819      	ldr	r1, [r3, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f000 fe37 	bl	80062f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 020c 	bic.w	r2, r2, #12
 8005694:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6999      	ldr	r1, [r3, #24]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
 80056a8:	e060      	b.n	800576c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d11c      	bne.n	80056ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6819      	ldr	r1, [r3, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f000 feb5 	bl	800642e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
 80056e8:	e040      	b.n	800576c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6819      	ldr	r1, [r3, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f000 ff02 	bl	8006508 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 020c 	bic.w	r2, r2, #12
 8005712:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69d9      	ldr	r1, [r3, #28]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	61da      	str	r2, [r3, #28]
 8005726:	e021      	b.n	800576c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d11c      	bne.n	8005768 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 ff1f 	bl	8006580 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005750:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	61da      	str	r2, [r3, #28]
 8005766:	e001      	b.n	800576c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800579a:	2302      	movs	r3, #2
 800579c:	e0ff      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b14      	cmp	r3, #20
 80057aa:	f200 80f0 	bhi.w	800598e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	08005809 	.word	0x08005809
 80057b8:	0800598f 	.word	0x0800598f
 80057bc:	0800598f 	.word	0x0800598f
 80057c0:	0800598f 	.word	0x0800598f
 80057c4:	08005849 	.word	0x08005849
 80057c8:	0800598f 	.word	0x0800598f
 80057cc:	0800598f 	.word	0x0800598f
 80057d0:	0800598f 	.word	0x0800598f
 80057d4:	0800588b 	.word	0x0800588b
 80057d8:	0800598f 	.word	0x0800598f
 80057dc:	0800598f 	.word	0x0800598f
 80057e0:	0800598f 	.word	0x0800598f
 80057e4:	080058cb 	.word	0x080058cb
 80057e8:	0800598f 	.word	0x0800598f
 80057ec:	0800598f 	.word	0x0800598f
 80057f0:	0800598f 	.word	0x0800598f
 80057f4:	0800590d 	.word	0x0800590d
 80057f8:	0800598f 	.word	0x0800598f
 80057fc:	0800598f 	.word	0x0800598f
 8005800:	0800598f 	.word	0x0800598f
 8005804:	0800594d 	.word	0x0800594d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fa9a 	bl	8005d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	619a      	str	r2, [r3, #24]
      break;
 8005846:	e0a5      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fb0a 	bl	8005e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6999      	ldr	r1, [r3, #24]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]
      break;
 8005888:	e084      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fb73 	bl	8005f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0204 	bic.w	r2, r2, #4
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	61da      	str	r2, [r3, #28]
      break;
 80058c8:	e064      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fbdb 	bl	800608c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69d9      	ldr	r1, [r3, #28]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	61da      	str	r2, [r3, #28]
      break;
 800590a:	e043      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fc24 	bl	8006160 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0208 	orr.w	r2, r2, #8
 8005926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0204 	bic.w	r2, r2, #4
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800594a:	e023      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fc68 	bl	8006228 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005966:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	021a      	lsls	r2, r3, #8
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800598c:	e002      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
      break;
 8005992:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop

080059a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIM_ConfigClockSource+0x1c>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e0b6      	b.n	8005b32 <HAL_TIM_ConfigClockSource+0x18a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a00:	d03e      	beq.n	8005a80 <HAL_TIM_ConfigClockSource+0xd8>
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a06:	f200 8087 	bhi.w	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	f000 8086 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x176>
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a16:	d87f      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a18:	2b70      	cmp	r3, #112	; 0x70
 8005a1a:	d01a      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0xaa>
 8005a1c:	2b70      	cmp	r3, #112	; 0x70
 8005a1e:	d87b      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a20:	2b60      	cmp	r3, #96	; 0x60
 8005a22:	d050      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x11e>
 8005a24:	2b60      	cmp	r3, #96	; 0x60
 8005a26:	d877      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a28:	2b50      	cmp	r3, #80	; 0x50
 8005a2a:	d03c      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0xfe>
 8005a2c:	2b50      	cmp	r3, #80	; 0x50
 8005a2e:	d873      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d058      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x13e>
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d86f      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a38:	2b30      	cmp	r3, #48	; 0x30
 8005a3a:	d064      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x15e>
 8005a3c:	2b30      	cmp	r3, #48	; 0x30
 8005a3e:	d86b      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d060      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x15e>
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d867      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05c      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x15e>
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d05a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x15e>
 8005a50:	e062      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6899      	ldr	r1, [r3, #8]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f000 fde5 	bl	8006630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	609a      	str	r2, [r3, #8]
      break;
 8005a7e:	e04f      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6899      	ldr	r1, [r3, #8]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f000 fdce 	bl	8006630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa2:	609a      	str	r2, [r3, #8]
      break;
 8005aa4:	e03c      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f000 fc8c 	bl	80063d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2150      	movs	r1, #80	; 0x50
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd9b 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005ac4:	e02c      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6859      	ldr	r1, [r3, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f000 fce8 	bl	80064a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2160      	movs	r1, #96	; 0x60
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd8b 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005ae4:	e01c      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f000 fc6c 	bl	80063d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2140      	movs	r1, #64	; 0x40
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fd7b 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005b04:	e00c      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4610      	mov	r0, r2
 8005b12:	f000 fd72 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005b16:	e003      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1c:	e000      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	d831      	bhi.n	8005bb4 <HAL_TIM_ReadCapturedValue+0x78>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005bb5 	.word	0x08005bb5
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005bb5 	.word	0x08005bb5
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005bb5 	.word	0x08005bb5
 8005b70:	08005bb5 	.word	0x08005bb5
 8005b74:	08005bb5 	.word	0x08005bb5
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005bb5 	.word	0x08005bb5
 8005b80:	08005bb5 	.word	0x08005bb5
 8005b84:	08005bb5 	.word	0x08005bb5
 8005b88:	08005bab 	.word	0x08005bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	60fb      	str	r3, [r7, #12]

      break;
 8005b94:	e00f      	b.n	8005bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	60fb      	str	r3, [r7, #12]

      break;
 8005b9e:	e00a      	b.n	8005bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	60fb      	str	r3, [r7, #12]

      break;
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	60fb      	str	r3, [r7, #12]

      break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005bb4:	bf00      	nop
  }

  return tmpreg;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a40      	ldr	r2, [pc, #256]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <TIM_Base_SetConfig+0x118>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3c      	ldr	r2, [pc, #240]	; (8005d30 <TIM_Base_SetConfig+0x11c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <TIM_Base_SetConfig+0x120>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3a      	ldr	r2, [pc, #232]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01f      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d01b      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <TIM_Base_SetConfig+0x118>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d017      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <TIM_Base_SetConfig+0x11c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <TIM_Base_SetConfig+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00f      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00b      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <TIM_Base_SetConfig+0x128>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d007      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_Base_SetConfig+0x9a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a26      	ldr	r2, [pc, #152]	; (8005d44 <TIM_Base_SetConfig+0x130>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d108      	bne.n	8005cc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a10      	ldr	r2, [pc, #64]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00f      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <TIM_Base_SetConfig+0x128>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0f      	ldr	r2, [pc, #60]	; (8005d44 <TIM_Base_SetConfig+0x130>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40000c00 	.word	0x40000c00
 8005d38:	40013400 	.word	0x40013400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800

08005d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 0302 	bic.w	r3, r3, #2
 8005d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <TIM_OC1_SetConfig+0x10c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00f      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x80>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a2b      	ldr	r2, [pc, #172]	; (8005e58 <TIM_OC1_SetConfig+0x110>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x80>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <TIM_OC1_SetConfig+0x114>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <TIM_OC1_SetConfig+0x118>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC1_SetConfig+0x80>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <TIM_OC1_SetConfig+0x11c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10c      	bne.n	8005de2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0308 	bic.w	r3, r3, #8
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0304 	bic.w	r3, r3, #4
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <TIM_OC1_SetConfig+0x10c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00f      	beq.n	8005e0a <TIM_OC1_SetConfig+0xc2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <TIM_OC1_SetConfig+0x110>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <TIM_OC1_SetConfig+0xc2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <TIM_OC1_SetConfig+0x114>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_OC1_SetConfig+0xc2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <TIM_OC1_SetConfig+0x118>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_OC1_SetConfig+0xc2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <TIM_OC1_SetConfig+0x11c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d111      	bne.n	8005e2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800

08005e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0210 	bic.w	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0320 	bic.w	r3, r3, #32
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <TIM_OC2_SetConfig+0x100>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC2_SetConfig+0x6c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a27      	ldr	r2, [pc, #156]	; (8005f6c <TIM_OC2_SetConfig+0x104>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10d      	bne.n	8005ef0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <TIM_OC2_SetConfig+0x100>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00f      	beq.n	8005f18 <TIM_OC2_SetConfig+0xb0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <TIM_OC2_SetConfig+0x104>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_OC2_SetConfig+0xb0>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <TIM_OC2_SetConfig+0x108>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_OC2_SetConfig+0xb0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <TIM_OC2_SetConfig+0x10c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_OC2_SetConfig+0xb0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <TIM_OC2_SetConfig+0x110>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d113      	bne.n	8005f40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40013400 	.word	0x40013400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800

08005f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a27      	ldr	r2, [pc, #156]	; (8006078 <TIM_OC3_SetConfig+0xfc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x6a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a26      	ldr	r2, [pc, #152]	; (800607c <TIM_OC3_SetConfig+0x100>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10d      	bne.n	8006002 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <TIM_OC3_SetConfig+0xfc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00f      	beq.n	800602a <TIM_OC3_SetConfig+0xae>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1b      	ldr	r2, [pc, #108]	; (800607c <TIM_OC3_SetConfig+0x100>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00b      	beq.n	800602a <TIM_OC3_SetConfig+0xae>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <TIM_OC3_SetConfig+0x104>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <TIM_OC3_SetConfig+0xae>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <TIM_OC3_SetConfig+0x108>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0xae>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <TIM_OC3_SetConfig+0x10c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d113      	bne.n	8006052 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40012c00 	.word	0x40012c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	031b      	lsls	r3, r3, #12
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <TIM_OC4_SetConfig+0xc0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00f      	beq.n	8006110 <TIM_OC4_SetConfig+0x84>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a17      	ldr	r2, [pc, #92]	; (8006150 <TIM_OC4_SetConfig+0xc4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_OC4_SetConfig+0x84>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a16      	ldr	r2, [pc, #88]	; (8006154 <TIM_OC4_SetConfig+0xc8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_OC4_SetConfig+0x84>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <TIM_OC4_SetConfig+0xcc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC4_SetConfig+0x84>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a14      	ldr	r2, [pc, #80]	; (800615c <TIM_OC4_SetConfig+0xd0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d109      	bne.n	8006124 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	019b      	lsls	r3, r3, #6
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40014000 	.word	0x40014000
 8006158:	40014400 	.word	0x40014400
 800615c:	40014800 	.word	0x40014800

08006160 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	041b      	lsls	r3, r3, #16
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a17      	ldr	r2, [pc, #92]	; (8006214 <TIM_OC5_SetConfig+0xb4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_OC5_SetConfig+0x7a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a16      	ldr	r2, [pc, #88]	; (8006218 <TIM_OC5_SetConfig+0xb8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_OC5_SetConfig+0x7a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a15      	ldr	r2, [pc, #84]	; (800621c <TIM_OC5_SetConfig+0xbc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_OC5_SetConfig+0x7a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a14      	ldr	r2, [pc, #80]	; (8006220 <TIM_OC5_SetConfig+0xc0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_OC5_SetConfig+0x7a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a13      	ldr	r2, [pc, #76]	; (8006224 <TIM_OC5_SetConfig+0xc4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d109      	bne.n	80061ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800626e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	051b      	lsls	r3, r3, #20
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <TIM_OC6_SetConfig+0xb8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00f      	beq.n	80062a4 <TIM_OC6_SetConfig+0x7c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC6_SetConfig+0xbc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_OC6_SetConfig+0x7c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <TIM_OC6_SetConfig+0xc0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_OC6_SetConfig+0x7c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <TIM_OC6_SetConfig+0xc4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_OC6_SetConfig+0x7c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <TIM_OC6_SetConfig+0xc8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d109      	bne.n	80062b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	029b      	lsls	r3, r3, #10
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40012c00 	.word	0x40012c00
 80062e4:	40013400 	.word	0x40013400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800

080062f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <TIM_TI1_SetConfig+0xc4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d017      	beq.n	8006352 <TIM_TI1_SetConfig+0x5e>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d013      	beq.n	8006352 <TIM_TI1_SetConfig+0x5e>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <TIM_TI1_SetConfig+0xc8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_TI1_SetConfig+0x5e>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <TIM_TI1_SetConfig+0xcc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_TI1_SetConfig+0x5e>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <TIM_TI1_SetConfig+0xd0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_TI1_SetConfig+0x5e>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <TIM_TI1_SetConfig+0xd4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_TI1_SetConfig+0x5e>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <TIM_TI1_SetConfig+0xd8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <TIM_TI1_SetConfig+0x62>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <TIM_TI1_SetConfig+0x64>
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e003      	b.n	8006376 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	b2db      	uxtb	r3, r3
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f023 030a 	bic.w	r3, r3, #10
 8006390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f003 030a 	and.w	r3, r3, #10
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800
 80063c4:	40000c00 	.word	0x40000c00
 80063c8:	40013400 	.word	0x40013400
 80063cc:	40014000 	.word	0x40014000

080063d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f023 0210 	bic.w	r2, r3, #16
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800646c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	031b      	lsls	r3, r3, #12
 8006472:	b29b      	uxth	r3, r3
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006480:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	031b      	lsls	r3, r3, #12
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0303 	bic.w	r3, r3, #3
 8006534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006544:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	b2db      	uxtb	r3, r3
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006558:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	031b      	lsls	r3, r3, #12
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	031b      	lsls	r3, r3, #12
 80065d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	f043 0307 	orr.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800664a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	431a      	orrs	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	609a      	str	r2, [r3, #8]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2201      	movs	r2, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	43db      	mvns	r3, r3
 8006692:	401a      	ands	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e068      	b.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a2e      	ldr	r2, [pc, #184]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d108      	bne.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800670e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1e      	ldr	r2, [pc, #120]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01d      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d018      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d10c      	bne.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	4313      	orrs	r3, r2
 800678a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40012c00 	.word	0x40012c00
 80067b8:	40013400 	.word	0x40013400
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40014000 	.word	0x40014000

080067cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e040      	b.n	800689c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fb fc3e 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2224      	movs	r2, #36	; 0x24
 8006834:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f82c 	bl	80068a4 <UART_SetConfig>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e022      	b.n	800689c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fad8 	bl	8006e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fb5f 	bl	8006f58 <UART_CheckIdleState>
 800689a:	4603      	mov	r3, r0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a8:	b08a      	sub	sp, #40	; 0x28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4ba4      	ldr	r3, [pc, #656]	; (8006b64 <UART_SetConfig+0x2c0>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068dc:	430b      	orrs	r3, r1
 80068de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a99      	ldr	r2, [pc, #612]	; (8006b68 <UART_SetConfig+0x2c4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	4313      	orrs	r3, r2
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a90      	ldr	r2, [pc, #576]	; (8006b6c <UART_SetConfig+0x2c8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d126      	bne.n	800697c <UART_SetConfig+0xd8>
 800692e:	4b90      	ldr	r3, [pc, #576]	; (8006b70 <UART_SetConfig+0x2cc>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d81b      	bhi.n	8006974 <UART_SetConfig+0xd0>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0xa0>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006955 	.word	0x08006955
 8006948:	08006965 	.word	0x08006965
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e116      	b.n	8006b8a <UART_SetConfig+0x2e6>
 800695c:	2302      	movs	r3, #2
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e112      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e10e      	b.n	8006b8a <UART_SetConfig+0x2e6>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e10a      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e106      	b.n	8006b8a <UART_SetConfig+0x2e6>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a7c      	ldr	r2, [pc, #496]	; (8006b74 <UART_SetConfig+0x2d0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d138      	bne.n	80069f8 <UART_SetConfig+0x154>
 8006986:	4b7a      	ldr	r3, [pc, #488]	; (8006b70 <UART_SetConfig+0x2cc>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d82d      	bhi.n	80069f0 <UART_SetConfig+0x14c>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0xf8>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	080069f1 	.word	0x080069f1
 80069a8:	080069f1 	.word	0x080069f1
 80069ac:	080069e1 	.word	0x080069e1
 80069b0:	080069f1 	.word	0x080069f1
 80069b4:	080069f1 	.word	0x080069f1
 80069b8:	080069f1 	.word	0x080069f1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e0d8      	b.n	8006b8a <UART_SetConfig+0x2e6>
 80069d8:	2302      	movs	r3, #2
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0d4      	b.n	8006b8a <UART_SetConfig+0x2e6>
 80069e0:	2304      	movs	r3, #4
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e0d0      	b.n	8006b8a <UART_SetConfig+0x2e6>
 80069e8:	2308      	movs	r3, #8
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e0cc      	b.n	8006b8a <UART_SetConfig+0x2e6>
 80069f0:	2310      	movs	r3, #16
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e0c8      	b.n	8006b8a <UART_SetConfig+0x2e6>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a5e      	ldr	r2, [pc, #376]	; (8006b78 <UART_SetConfig+0x2d4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d125      	bne.n	8006a4e <UART_SetConfig+0x1aa>
 8006a02:	4b5b      	ldr	r3, [pc, #364]	; (8006b70 <UART_SetConfig+0x2cc>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a0c:	2b30      	cmp	r3, #48	; 0x30
 8006a0e:	d016      	beq.n	8006a3e <UART_SetConfig+0x19a>
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d818      	bhi.n	8006a46 <UART_SetConfig+0x1a2>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d00a      	beq.n	8006a2e <UART_SetConfig+0x18a>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d814      	bhi.n	8006a46 <UART_SetConfig+0x1a2>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <UART_SetConfig+0x182>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d008      	beq.n	8006a36 <UART_SetConfig+0x192>
 8006a24:	e00f      	b.n	8006a46 <UART_SetConfig+0x1a2>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e0ad      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e0a9      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a36:	2304      	movs	r3, #4
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e0a5      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a3e:	2308      	movs	r3, #8
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a44:	e0a1      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a46:	2310      	movs	r3, #16
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4c:	e09d      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a4a      	ldr	r2, [pc, #296]	; (8006b7c <UART_SetConfig+0x2d8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d125      	bne.n	8006aa4 <UART_SetConfig+0x200>
 8006a58:	4b45      	ldr	r3, [pc, #276]	; (8006b70 <UART_SetConfig+0x2cc>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a62:	2bc0      	cmp	r3, #192	; 0xc0
 8006a64:	d016      	beq.n	8006a94 <UART_SetConfig+0x1f0>
 8006a66:	2bc0      	cmp	r3, #192	; 0xc0
 8006a68:	d818      	bhi.n	8006a9c <UART_SetConfig+0x1f8>
 8006a6a:	2b80      	cmp	r3, #128	; 0x80
 8006a6c:	d00a      	beq.n	8006a84 <UART_SetConfig+0x1e0>
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d814      	bhi.n	8006a9c <UART_SetConfig+0x1f8>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <UART_SetConfig+0x1d8>
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d008      	beq.n	8006a8c <UART_SetConfig+0x1e8>
 8006a7a:	e00f      	b.n	8006a9c <UART_SetConfig+0x1f8>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e082      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a84:	2302      	movs	r3, #2
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e07e      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e07a      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a94:	2308      	movs	r3, #8
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e076      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e072      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a35      	ldr	r2, [pc, #212]	; (8006b80 <UART_SetConfig+0x2dc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d12a      	bne.n	8006b04 <UART_SetConfig+0x260>
 8006aae:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <UART_SetConfig+0x2cc>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006abc:	d01a      	beq.n	8006af4 <UART_SetConfig+0x250>
 8006abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac2:	d81b      	bhi.n	8006afc <UART_SetConfig+0x258>
 8006ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac8:	d00c      	beq.n	8006ae4 <UART_SetConfig+0x240>
 8006aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ace:	d815      	bhi.n	8006afc <UART_SetConfig+0x258>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <UART_SetConfig+0x238>
 8006ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad8:	d008      	beq.n	8006aec <UART_SetConfig+0x248>
 8006ada:	e00f      	b.n	8006afc <UART_SetConfig+0x258>
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e052      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e04e      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e04a      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e046      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e042      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a17      	ldr	r2, [pc, #92]	; (8006b68 <UART_SetConfig+0x2c4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d13a      	bne.n	8006b84 <UART_SetConfig+0x2e0>
 8006b0e:	4b18      	ldr	r3, [pc, #96]	; (8006b70 <UART_SetConfig+0x2cc>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b1c:	d01a      	beq.n	8006b54 <UART_SetConfig+0x2b0>
 8006b1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b22:	d81b      	bhi.n	8006b5c <UART_SetConfig+0x2b8>
 8006b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b28:	d00c      	beq.n	8006b44 <UART_SetConfig+0x2a0>
 8006b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b2e:	d815      	bhi.n	8006b5c <UART_SetConfig+0x2b8>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <UART_SetConfig+0x298>
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b38:	d008      	beq.n	8006b4c <UART_SetConfig+0x2a8>
 8006b3a:	e00f      	b.n	8006b5c <UART_SetConfig+0x2b8>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e022      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006b44:	2302      	movs	r3, #2
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e01e      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e01a      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006b54:	2308      	movs	r3, #8
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e016      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e012      	b.n	8006b8a <UART_SetConfig+0x2e6>
 8006b64:	efff69f3 	.word	0xefff69f3
 8006b68:	40008000 	.word	0x40008000
 8006b6c:	40013800 	.word	0x40013800
 8006b70:	40021000 	.word	0x40021000
 8006b74:	40004400 	.word	0x40004400
 8006b78:	40004800 	.word	0x40004800
 8006b7c:	40004c00 	.word	0x40004c00
 8006b80:	40005000 	.word	0x40005000
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a9f      	ldr	r2, [pc, #636]	; (8006e0c <UART_SetConfig+0x568>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d17a      	bne.n	8006c8a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d824      	bhi.n	8006be6 <UART_SetConfig+0x342>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0x300>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006be7 	.word	0x08006be7
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006be7 	.word	0x08006be7
 8006bb4:	08006bd7 	.word	0x08006bd7
 8006bb8:	08006be7 	.word	0x08006be7
 8006bbc:	08006be7 	.word	0x08006be7
 8006bc0:	08006be7 	.word	0x08006be7
 8006bc4:	08006bdf 	.word	0x08006bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc8:	f7fc fe3a 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8006bcc:	61f8      	str	r0, [r7, #28]
        break;
 8006bce:	e010      	b.n	8006bf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd0:	4b8f      	ldr	r3, [pc, #572]	; (8006e10 <UART_SetConfig+0x56c>)
 8006bd2:	61fb      	str	r3, [r7, #28]
        break;
 8006bd4:	e00d      	b.n	8006bf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bd6:	f7fc fd9b 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8006bda:	61f8      	str	r0, [r7, #28]
        break;
 8006bdc:	e009      	b.n	8006bf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be2:	61fb      	str	r3, [r7, #28]
        break;
 8006be4:	e005      	b.n	8006bf2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 80fb 	beq.w	8006df0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	4413      	add	r3, r2
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d305      	bcc.n	8006c16 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d903      	bls.n	8006c1e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c1c:	e0e8      	b.n	8006df0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2200      	movs	r2, #0
 8006c22:	461c      	mov	r4, r3
 8006c24:	4615      	mov	r5, r2
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	022b      	lsls	r3, r5, #8
 8006c30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c34:	0222      	lsls	r2, r4, #8
 8006c36:	68f9      	ldr	r1, [r7, #12]
 8006c38:	6849      	ldr	r1, [r1, #4]
 8006c3a:	0849      	lsrs	r1, r1, #1
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	4688      	mov	r8, r1
 8006c40:	4681      	mov	r9, r0
 8006c42:	eb12 0a08 	adds.w	sl, r2, r8
 8006c46:	eb43 0b09 	adc.w	fp, r3, r9
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c58:	4650      	mov	r0, sl
 8006c5a:	4659      	mov	r1, fp
 8006c5c:	f7f9 ff98 	bl	8000b90 <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4613      	mov	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6e:	d308      	bcc.n	8006c82 <UART_SetConfig+0x3de>
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c76:	d204      	bcs.n	8006c82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	e0b6      	b.n	8006df0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c88:	e0b2      	b.n	8006df0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c92:	d15e      	bne.n	8006d52 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d828      	bhi.n	8006cee <UART_SetConfig+0x44a>
 8006c9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0x400>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	08006cef 	.word	0x08006cef
 8006cb4:	08006cdf 	.word	0x08006cdf
 8006cb8:	08006cef 	.word	0x08006cef
 8006cbc:	08006cef 	.word	0x08006cef
 8006cc0:	08006cef 	.word	0x08006cef
 8006cc4:	08006ce7 	.word	0x08006ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc8:	f7fc fdba 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8006ccc:	61f8      	str	r0, [r7, #28]
        break;
 8006cce:	e014      	b.n	8006cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd0:	f7fc fdcc 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8006cd4:	61f8      	str	r0, [r7, #28]
        break;
 8006cd6:	e010      	b.n	8006cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd8:	4b4d      	ldr	r3, [pc, #308]	; (8006e10 <UART_SetConfig+0x56c>)
 8006cda:	61fb      	str	r3, [r7, #28]
        break;
 8006cdc:	e00d      	b.n	8006cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fc fd17 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8006ce2:	61f8      	str	r0, [r7, #28]
        break;
 8006ce4:	e009      	b.n	8006cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cea:	61fb      	str	r3, [r7, #28]
        break;
 8006cec:	e005      	b.n	8006cfa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d077      	beq.n	8006df0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	005a      	lsls	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	441a      	add	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b0f      	cmp	r3, #15
 8006d1a:	d916      	bls.n	8006d4a <UART_SetConfig+0x4a6>
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d22:	d212      	bcs.n	8006d4a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f023 030f 	bic.w	r3, r3, #15
 8006d2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	8afb      	ldrh	r3, [r7, #22]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	8afa      	ldrh	r2, [r7, #22]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	e052      	b.n	8006df0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d50:	e04e      	b.n	8006df0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d827      	bhi.n	8006daa <UART_SetConfig+0x506>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <UART_SetConfig+0x4bc>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006d8d 	.word	0x08006d8d
 8006d68:	08006d95 	.word	0x08006d95
 8006d6c:	08006dab 	.word	0x08006dab
 8006d70:	08006d9b 	.word	0x08006d9b
 8006d74:	08006dab 	.word	0x08006dab
 8006d78:	08006dab 	.word	0x08006dab
 8006d7c:	08006dab 	.word	0x08006dab
 8006d80:	08006da3 	.word	0x08006da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d84:	f7fc fd5c 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8006d88:	61f8      	str	r0, [r7, #28]
        break;
 8006d8a:	e014      	b.n	8006db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d8c:	f7fc fd6e 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8006d90:	61f8      	str	r0, [r7, #28]
        break;
 8006d92:	e010      	b.n	8006db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d94:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <UART_SetConfig+0x56c>)
 8006d96:	61fb      	str	r3, [r7, #28]
        break;
 8006d98:	e00d      	b.n	8006db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9a:	f7fc fcb9 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8006d9e:	61f8      	str	r0, [r7, #28]
        break;
 8006da0:	e009      	b.n	8006db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da6:	61fb      	str	r3, [r7, #28]
        break;
 8006da8:	e005      	b.n	8006db6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006db4:	bf00      	nop
    }

    if (pclk != 0U)
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	085a      	lsrs	r2, r3, #1
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	d909      	bls.n	8006dea <UART_SetConfig+0x546>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ddc:	d205      	bcs.n	8006dea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	e002      	b.n	8006df0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3728      	adds	r7, #40	; 0x28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40008000 	.word	0x40008000
 8006e10:	00f42400 	.word	0x00f42400

08006e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01a      	beq.n	8006f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f12:	d10a      	bne.n	8006f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f68:	f7fb f996 	bl	8002298 <HAL_GetTick>
 8006f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d10e      	bne.n	8006f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f82d 	bl	8006fea <UART_WaitOnFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e023      	b.n	8006fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d10e      	bne.n	8006fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f817 	bl	8006fea <UART_WaitOnFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e00d      	b.n	8006fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b09c      	sub	sp, #112	; 0x70
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffa:	e0a5      	b.n	8007148 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007002:	f000 80a1 	beq.w	8007148 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007006:	f7fb f947 	bl	8002298 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <UART_WaitOnFlagUntilTimeout+0x32>
 8007016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007018:	2b00      	cmp	r3, #0
 800701a:	d13e      	bne.n	800709a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800702a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007030:	667b      	str	r3, [r7, #100]	; 0x64
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800703c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	663b      	str	r3, [r7, #96]	; 0x60
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800706e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800707c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e067      	b.n	800716a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d04f      	beq.n	8007148 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b6:	d147      	bne.n	8007148 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
 80070e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	613b      	str	r3, [r7, #16]
   return(result);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	66bb      	str	r3, [r7, #104]	; 0x68
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007114:	623a      	str	r2, [r7, #32]
 8007116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	6a3a      	ldr	r2, [r7, #32]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	61bb      	str	r3, [r7, #24]
   return(result);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e5      	bne.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e010      	b.n	800716a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69da      	ldr	r2, [r3, #28]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4013      	ands	r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	429a      	cmp	r2, r3
 8007156:	bf0c      	ite	eq
 8007158:	2301      	moveq	r3, #1
 800715a:	2300      	movne	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	429a      	cmp	r2, r3
 8007164:	f43f af4a 	beq.w	8006ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3770      	adds	r7, #112	; 0x70
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <hagl_init>:
    hagl_set_clip(surface, x0, y0, x1, y1);
}

hagl_backend_t *
hagl_init(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af02      	add	r7, sp, #8
    static hagl_backend_t backend;
    memset(&backend, 0, sizeof(hagl_backend_t));
 800717a:	223c      	movs	r2, #60	; 0x3c
 800717c:	2100      	movs	r1, #0
 800717e:	480e      	ldr	r0, [pc, #56]	; (80071b8 <hagl_init+0x44>)
 8007180:	f000 fd04 	bl	8007b8c <memset>

    hagl_hal_init(&backend);
 8007184:	480c      	ldr	r0, [pc, #48]	; (80071b8 <hagl_init+0x44>)
 8007186:	f7f9 ff05 	bl	8000f94 <hagl_hal_init>
    hagl_set_clip(&backend, 0, 0,  backend.width - 1,  backend.height - 1);
 800718a:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <hagl_init+0x44>)
 800718c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <hagl_init+0x44>)
 8007198:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	4613      	mov	r3, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	4803      	ldr	r0, [pc, #12]	; (80071b8 <hagl_init+0x44>)
 80071ac:	f000 fb49 	bl	8007842 <hagl_set_clip>
    return &backend;
 80071b0:	4b01      	ldr	r3, [pc, #4]	; (80071b8 <hagl_init+0x44>)
};
 80071b2:	4618      	mov	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	2000a2b0 	.word	0x2000a2b0

080071bc <hagl_draw_hline>:
 * @param color
 */

static inline void
hagl_draw_hline(void const *surface, int16_t x0, int16_t y0, uint16_t width, hagl_color_t color)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	4608      	mov	r0, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	4603      	mov	r3, r0
 80071cc:	817b      	strh	r3, [r7, #10]
 80071ce:	460b      	mov	r3, r1
 80071d0:	813b      	strh	r3, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
    hagl_draw_hline_xyw(surface, x0, y0, width, color);
 80071d6:	88f8      	ldrh	r0, [r7, #6]
 80071d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80071dc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4603      	mov	r3, r0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fb4c 	bl	8007884 <hagl_draw_hline_xyw>
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <hagl_draw_circle>:
#include "hagl/pixel.h"
#include "hagl/hline.h"

void
hagl_draw_circle(void const *surface, int16_t xc, int16_t yc, int16_t r, hagl_color_t color)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	4603      	mov	r3, r0
 8007204:	817b      	strh	r3, [r7, #10]
 8007206:	460b      	mov	r3, r1
 8007208:	813b      	strh	r3, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	82fb      	strh	r3, [r7, #22]
    int16_t y = r;
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	82bb      	strh	r3, [r7, #20]
    int16_t d = 3 - 2 * r;
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	f1c3 0303 	rsb	r3, r3, #3
 8007220:	b29b      	uxth	r3, r3
 8007222:	827b      	strh	r3, [r7, #18]

    hagl_put_pixel(surface, xc + x, yc + y, color);
 8007224:	897a      	ldrh	r2, [r7, #10]
 8007226:	8afb      	ldrh	r3, [r7, #22]
 8007228:	4413      	add	r3, r2
 800722a:	b29b      	uxth	r3, r3
 800722c:	b219      	sxth	r1, r3
 800722e:	893a      	ldrh	r2, [r7, #8]
 8007230:	8abb      	ldrh	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	b29b      	uxth	r3, r3
 8007236:	b21a      	sxth	r2, r3
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fc47 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc - x, yc + y, color);
 8007240:	897a      	ldrh	r2, [r7, #10]
 8007242:	8afb      	ldrh	r3, [r7, #22]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	b29b      	uxth	r3, r3
 8007248:	b219      	sxth	r1, r3
 800724a:	893a      	ldrh	r2, [r7, #8]
 800724c:	8abb      	ldrh	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	b29b      	uxth	r3, r3
 8007252:	b21a      	sxth	r2, r3
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fc39 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc + x, yc - y, color);
 800725c:	897a      	ldrh	r2, [r7, #10]
 800725e:	8afb      	ldrh	r3, [r7, #22]
 8007260:	4413      	add	r3, r2
 8007262:	b29b      	uxth	r3, r3
 8007264:	b219      	sxth	r1, r3
 8007266:	893a      	ldrh	r2, [r7, #8]
 8007268:	8abb      	ldrh	r3, [r7, #20]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	b29b      	uxth	r3, r3
 800726e:	b21a      	sxth	r2, r3
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fc2b 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc - x, yc - y, color);
 8007278:	897a      	ldrh	r2, [r7, #10]
 800727a:	8afb      	ldrh	r3, [r7, #22]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	b29b      	uxth	r3, r3
 8007280:	b219      	sxth	r1, r3
 8007282:	893a      	ldrh	r2, [r7, #8]
 8007284:	8abb      	ldrh	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	b21a      	sxth	r2, r3
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fc1d 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc + y, yc + x, color);
 8007294:	897a      	ldrh	r2, [r7, #10]
 8007296:	8abb      	ldrh	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	b29b      	uxth	r3, r3
 800729c:	b219      	sxth	r1, r3
 800729e:	893a      	ldrh	r2, [r7, #8]
 80072a0:	8afb      	ldrh	r3, [r7, #22]
 80072a2:	4413      	add	r3, r2
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	b21a      	sxth	r2, r3
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fc0f 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc - y, yc + x, color);
 80072b0:	897a      	ldrh	r2, [r7, #10]
 80072b2:	8abb      	ldrh	r3, [r7, #20]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b219      	sxth	r1, r3
 80072ba:	893a      	ldrh	r2, [r7, #8]
 80072bc:	8afb      	ldrh	r3, [r7, #22]
 80072be:	4413      	add	r3, r2
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	b21a      	sxth	r2, r3
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fc01 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc + y, yc - x, color);
 80072cc:	897a      	ldrh	r2, [r7, #10]
 80072ce:	8abb      	ldrh	r3, [r7, #20]
 80072d0:	4413      	add	r3, r2
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	b219      	sxth	r1, r3
 80072d6:	893a      	ldrh	r2, [r7, #8]
 80072d8:	8afb      	ldrh	r3, [r7, #22]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b21a      	sxth	r2, r3
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fbf3 	bl	8007ace <hagl_put_pixel>
    hagl_put_pixel(surface, xc - y, yc - x, color);
 80072e8:	897a      	ldrh	r2, [r7, #10]
 80072ea:	8abb      	ldrh	r3, [r7, #20]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	b219      	sxth	r1, r3
 80072f2:	893a      	ldrh	r2, [r7, #8]
 80072f4:	8afb      	ldrh	r3, [r7, #22]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	b21a      	sxth	r2, r3
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fbe5 	bl	8007ace <hagl_put_pixel>

    while (y >= x) {
 8007304:	e09d      	b.n	8007442 <hagl_draw_circle+0x24e>
        if (d > 0) {
 8007306:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dd1a      	ble.n	8007344 <hagl_draw_circle+0x150>
            d = d + 4 * (x - y) + 10;
 800730e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007312:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	b29b      	uxth	r3, r3
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	b29a      	uxth	r2, r3
 800731e:	8a7b      	ldrh	r3, [r7, #18]
 8007320:	4413      	add	r3, r2
 8007322:	b29b      	uxth	r3, r3
 8007324:	330a      	adds	r3, #10
 8007326:	b29b      	uxth	r3, r3
 8007328:	827b      	strh	r3, [r7, #18]
            y--;
 800732a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29b      	uxth	r3, r3
 8007334:	82bb      	strh	r3, [r7, #20]
            x++;
 8007336:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800733a:	b29b      	uxth	r3, r3
 800733c:	3301      	adds	r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	82fb      	strh	r3, [r7, #22]
 8007342:	e00e      	b.n	8007362 <hagl_draw_circle+0x16e>
        } else {
            d = d + 4 * x + 6;
 8007344:	8afb      	ldrh	r3, [r7, #22]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	b29a      	uxth	r2, r3
 800734a:	8a7b      	ldrh	r3, [r7, #18]
 800734c:	4413      	add	r3, r2
 800734e:	b29b      	uxth	r3, r3
 8007350:	3306      	adds	r3, #6
 8007352:	b29b      	uxth	r3, r3
 8007354:	827b      	strh	r3, [r7, #18]
            x++;
 8007356:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800735a:	b29b      	uxth	r3, r3
 800735c:	3301      	adds	r3, #1
 800735e:	b29b      	uxth	r3, r3
 8007360:	82fb      	strh	r3, [r7, #22]
        }

        hagl_put_pixel(surface, xc + x, yc + y, color);
 8007362:	897a      	ldrh	r2, [r7, #10]
 8007364:	8afb      	ldrh	r3, [r7, #22]
 8007366:	4413      	add	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	b219      	sxth	r1, r3
 800736c:	893a      	ldrh	r2, [r7, #8]
 800736e:	8abb      	ldrh	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	b29b      	uxth	r3, r3
 8007374:	b21a      	sxth	r2, r3
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fba8 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc - x, yc + y, color);
 800737e:	897a      	ldrh	r2, [r7, #10]
 8007380:	8afb      	ldrh	r3, [r7, #22]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	b29b      	uxth	r3, r3
 8007386:	b219      	sxth	r1, r3
 8007388:	893a      	ldrh	r2, [r7, #8]
 800738a:	8abb      	ldrh	r3, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	b21a      	sxth	r2, r3
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fb9a 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc + x, yc - y, color);
 800739a:	897a      	ldrh	r2, [r7, #10]
 800739c:	8afb      	ldrh	r3, [r7, #22]
 800739e:	4413      	add	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b219      	sxth	r1, r3
 80073a4:	893a      	ldrh	r2, [r7, #8]
 80073a6:	8abb      	ldrh	r3, [r7, #20]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	b21a      	sxth	r2, r3
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fb8c 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc - x, yc - y, color);
 80073b6:	897a      	ldrh	r2, [r7, #10]
 80073b8:	8afb      	ldrh	r3, [r7, #22]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	b29b      	uxth	r3, r3
 80073be:	b219      	sxth	r1, r3
 80073c0:	893a      	ldrh	r2, [r7, #8]
 80073c2:	8abb      	ldrh	r3, [r7, #20]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	b21a      	sxth	r2, r3
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fb7e 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc + y, yc + x, color);
 80073d2:	897a      	ldrh	r2, [r7, #10]
 80073d4:	8abb      	ldrh	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	b29b      	uxth	r3, r3
 80073da:	b219      	sxth	r1, r3
 80073dc:	893a      	ldrh	r2, [r7, #8]
 80073de:	8afb      	ldrh	r3, [r7, #22]
 80073e0:	4413      	add	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	b21a      	sxth	r2, r3
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fb70 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc - y, yc + x, color);
 80073ee:	897a      	ldrh	r2, [r7, #10]
 80073f0:	8abb      	ldrh	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	b219      	sxth	r1, r3
 80073f8:	893a      	ldrh	r2, [r7, #8]
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	4413      	add	r3, r2
 80073fe:	b29b      	uxth	r3, r3
 8007400:	b21a      	sxth	r2, r3
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fb62 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc + y, yc - x, color);
 800740a:	897a      	ldrh	r2, [r7, #10]
 800740c:	8abb      	ldrh	r3, [r7, #20]
 800740e:	4413      	add	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	b219      	sxth	r1, r3
 8007414:	893a      	ldrh	r2, [r7, #8]
 8007416:	8afb      	ldrh	r3, [r7, #22]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	b29b      	uxth	r3, r3
 800741c:	b21a      	sxth	r2, r3
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fb54 	bl	8007ace <hagl_put_pixel>
        hagl_put_pixel(surface, xc - y, yc - x, color);
 8007426:	897a      	ldrh	r2, [r7, #10]
 8007428:	8abb      	ldrh	r3, [r7, #20]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	b29b      	uxth	r3, r3
 800742e:	b219      	sxth	r1, r3
 8007430:	893a      	ldrh	r2, [r7, #8]
 8007432:	8afb      	ldrh	r3, [r7, #22]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	b29b      	uxth	r3, r3
 8007438:	b21a      	sxth	r2, r3
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fb46 	bl	8007ace <hagl_put_pixel>
    while (y >= x) {
 8007442:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007446:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800744a:	429a      	cmp	r2, r3
 800744c:	f6bf af5b 	bge.w	8007306 <hagl_draw_circle+0x112>
    }
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <hagl_fill_circle>:

void
hagl_fill_circle(void const *surface, int16_t x0, int16_t y0, int16_t r, hagl_color_t color)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b088      	sub	sp, #32
 800745e:	af02      	add	r7, sp, #8
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	4608      	mov	r0, r1
 8007464:	4611      	mov	r1, r2
 8007466:	461a      	mov	r2, r3
 8007468:	4603      	mov	r3, r0
 800746a:	817b      	strh	r3, [r7, #10]
 800746c:	460b      	mov	r3, r1
 800746e:	813b      	strh	r3, [r7, #8]
 8007470:	4613      	mov	r3, r2
 8007472:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	82fb      	strh	r3, [r7, #22]
    int16_t y = r;
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	82bb      	strh	r3, [r7, #20]
    int16_t d = 3 - 2 * r;
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	f1c3 0303 	rsb	r3, r3, #3
 8007486:	b29b      	uxth	r3, r3
 8007488:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 800748a:	e079      	b.n	8007580 <hagl_fill_circle+0x126>
        hagl_draw_hline(surface, x0 - x, y0 + y, x * 2, color);
 800748c:	897a      	ldrh	r2, [r7, #10]
 800748e:	8afb      	ldrh	r3, [r7, #22]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	b29b      	uxth	r3, r3
 8007494:	b219      	sxth	r1, r3
 8007496:	893a      	ldrh	r2, [r7, #8]
 8007498:	8abb      	ldrh	r3, [r7, #20]
 800749a:	4413      	add	r3, r2
 800749c:	b29b      	uxth	r3, r3
 800749e:	b21a      	sxth	r2, r3
 80074a0:	8afb      	ldrh	r3, [r7, #22]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	b298      	uxth	r0, r3
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4603      	mov	r3, r0
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff fe85 	bl	80071bc <hagl_draw_hline>
        hagl_draw_hline(surface, x0 - x, y0 - y, x * 2, color);
 80074b2:	897a      	ldrh	r2, [r7, #10]
 80074b4:	8afb      	ldrh	r3, [r7, #22]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	b219      	sxth	r1, r3
 80074bc:	893a      	ldrh	r2, [r7, #8]
 80074be:	8abb      	ldrh	r3, [r7, #20]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	b21a      	sxth	r2, r3
 80074c6:	8afb      	ldrh	r3, [r7, #22]
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	b298      	uxth	r0, r3
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4603      	mov	r3, r0
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff fe72 	bl	80071bc <hagl_draw_hline>
        hagl_draw_hline(surface, x0 - y, y0 + x, y * 2, color);
 80074d8:	897a      	ldrh	r2, [r7, #10]
 80074da:	8abb      	ldrh	r3, [r7, #20]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	b29b      	uxth	r3, r3
 80074e0:	b219      	sxth	r1, r3
 80074e2:	893a      	ldrh	r2, [r7, #8]
 80074e4:	8afb      	ldrh	r3, [r7, #22]
 80074e6:	4413      	add	r3, r2
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	b21a      	sxth	r2, r3
 80074ec:	8abb      	ldrh	r3, [r7, #20]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	b298      	uxth	r0, r3
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4603      	mov	r3, r0
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fe5f 	bl	80071bc <hagl_draw_hline>
        hagl_draw_hline(surface, x0 - y, y0 - x, y * 2, color);
 80074fe:	897a      	ldrh	r2, [r7, #10]
 8007500:	8abb      	ldrh	r3, [r7, #20]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	b29b      	uxth	r3, r3
 8007506:	b219      	sxth	r1, r3
 8007508:	893a      	ldrh	r2, [r7, #8]
 800750a:	8afb      	ldrh	r3, [r7, #22]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	b29b      	uxth	r3, r3
 8007510:	b21a      	sxth	r2, r3
 8007512:	8abb      	ldrh	r3, [r7, #20]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	b298      	uxth	r0, r3
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	4603      	mov	r3, r0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff fe4c 	bl	80071bc <hagl_draw_hline>

        if (d <= 0) {
 8007524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007528:	2b00      	cmp	r3, #0
 800752a:	dc0f      	bgt.n	800754c <hagl_fill_circle+0xf2>
            d = d + 4 * x + 6;
 800752c:	8afb      	ldrh	r3, [r7, #22]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	b29a      	uxth	r2, r3
 8007532:	8a7b      	ldrh	r3, [r7, #18]
 8007534:	4413      	add	r3, r2
 8007536:	b29b      	uxth	r3, r3
 8007538:	3306      	adds	r3, #6
 800753a:	b29b      	uxth	r3, r3
 800753c:	827b      	strh	r3, [r7, #18]
            x++;
 800753e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007542:	b29b      	uxth	r3, r3
 8007544:	3301      	adds	r3, #1
 8007546:	b29b      	uxth	r3, r3
 8007548:	82fb      	strh	r3, [r7, #22]
 800754a:	e019      	b.n	8007580 <hagl_fill_circle+0x126>
        } else {
            d = d + 4 * (x - y) + 10;
 800754c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007550:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	b29b      	uxth	r3, r3
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	b29a      	uxth	r2, r3
 800755c:	8a7b      	ldrh	r3, [r7, #18]
 800755e:	4413      	add	r3, r2
 8007560:	b29b      	uxth	r3, r3
 8007562:	330a      	adds	r3, #10
 8007564:	b29b      	uxth	r3, r3
 8007566:	827b      	strh	r3, [r7, #18]
            x++;
 8007568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800756c:	b29b      	uxth	r3, r3
 800756e:	3301      	adds	r3, #1
 8007570:	b29b      	uxth	r3, r3
 8007572:	82fb      	strh	r3, [r7, #22]
            y--;
 8007574:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	82bb      	strh	r3, [r7, #20]
    while (y >= x) {
 8007580:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007588:	429a      	cmp	r2, r3
 800758a:	f6bf af7f 	bge.w	800748c <hagl_fill_circle+0x32>
        }
    }
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <code>:
static const uint8_t TOP = 0b1000;

static
uint8_t
code(int16_t x0, int16_t y0, hagl_window_t window)
{
 8007598:	b490      	push	{r4, r7}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	1d39      	adds	r1, r7, #4
 80075a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80075a8:	4623      	mov	r3, r4
 80075aa:	81fb      	strh	r3, [r7, #14]
 80075ac:	4603      	mov	r3, r0
 80075ae:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80075b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075b8:	88ba      	ldrh	r2, [r7, #4]
 80075ba:	4293      	cmp	r3, r2
 80075bc:	da04      	bge.n	80075c8 <code+0x30>
        code |= LEFT;
 80075be:	2201      	movs	r2, #1
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	75fb      	strb	r3, [r7, #23]
 80075c6:	e008      	b.n	80075da <code+0x42>
    } else if (x0 > window.x1) {
 80075c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075cc:	893a      	ldrh	r2, [r7, #8]
 80075ce:	4293      	cmp	r3, r2
 80075d0:	dd03      	ble.n	80075da <code+0x42>
        code |= RIGHT;
 80075d2:	2202      	movs	r2, #2
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	75fb      	strb	r3, [r7, #23]
    }
    if (y0 < window.y0) {
 80075da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80075de:	88fa      	ldrh	r2, [r7, #6]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	da04      	bge.n	80075ee <code+0x56>
        code |= BOTTOM;
 80075e4:	2204      	movs	r2, #4
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	e008      	b.n	8007600 <code+0x68>
    } else if (y0 > window.y1) {
 80075ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80075f2:	897a      	ldrh	r2, [r7, #10]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	dd03      	ble.n	8007600 <code+0x68>
        code |= TOP;
 80075f8:	2208      	movs	r2, #8
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8007600:	7dfb      	ldrb	r3, [r7, #23]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bc90      	pop	{r4, r7}
 800760a:	4770      	bx	lr

0800760c <hagl_clip_line>:

bool
hagl_clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, hagl_window_t window)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800762a:	cb0c      	ldmia	r3, {r2, r3}
 800762c:	f7ff ffb4 	bl	8007598 <code>
 8007630:	4603      	mov	r3, r0
 8007632:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f9b3 0000 	ldrsh.w	r0, [r3]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007644:	cb0c      	ldmia	r3, {r2, r3}
 8007646:	f7ff ffa7 	bl	8007598 <code>
 800764a:	4603      	mov	r3, r0
 800764c:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 800764e:	2300      	movs	r3, #0
 8007650:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8007652:	7ffa      	ldrb	r2, [r7, #31]
 8007654:	7fbb      	ldrb	r3, [r7, #30]
 8007656:	4313      	orrs	r3, r2
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <hagl_clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 800765e:	2301      	movs	r3, #1
 8007660:	777b      	strb	r3, [r7, #29]
            break;
 8007662:	e0e9      	b.n	8007838 <hagl_clip_line+0x22c>
        } else if (code0 & code1) {
 8007664:	7ffa      	ldrb	r2, [r7, #31]
 8007666:	7fbb      	ldrb	r3, [r7, #30]
 8007668:	4013      	ands	r3, r2
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 80e2 	bne.w	8007836 <hagl_clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 800767a:	7ffb      	ldrb	r3, [r7, #31]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <hagl_clip_line+0x78>
 8007680:	7ffb      	ldrb	r3, [r7, #31]
 8007682:	e000      	b.n	8007686 <hagl_clip_line+0x7a>
 8007684:	7fbb      	ldrb	r3, [r7, #30]
 8007686:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8007688:	2208      	movs	r2, #8
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	4013      	ands	r3, r2
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d024      	beq.n	80076de <hagl_clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800769a:	b29a      	uxth	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076a2:	4619      	mov	r1, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076aa:	1acb      	subs	r3, r1, r3
 80076ac:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80076ae:	4608      	mov	r0, r1
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80076b6:	1a41      	subs	r1, r0, r1
 80076b8:	fb03 f101 	mul.w	r1, r3, r1
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c2:	4618      	mov	r0, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ca:	1ac3      	subs	r3, r0, r3
 80076cc:	fb91 f3f3 	sdiv	r3, r1, r3
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80076d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076da:	833b      	strh	r3, [r7, #24]
 80076dc:	e07f      	b.n	80077de <hagl_clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80076de:	2204      	movs	r2, #4
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	4013      	ands	r3, r2
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d024      	beq.n	8007734 <hagl_clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076f8:	4619      	mov	r1, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007700:	1acb      	subs	r3, r1, r3
 8007702:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007704:	4608      	mov	r0, r1
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	f9b1 1000 	ldrsh.w	r1, [r1]
 800770c:	1a41      	subs	r1, r0, r1
 800770e:	fb03 f101 	mul.w	r1, r3, r1
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007718:	4618      	mov	r0, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007720:	1ac3      	subs	r3, r0, r3
 8007722:	fb91 f3f3 	sdiv	r3, r1, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	4413      	add	r3, r2
 800772a:	b29b      	uxth	r3, r3
 800772c:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800772e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007730:	833b      	strh	r3, [r7, #24]
 8007732:	e054      	b.n	80077de <hagl_clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8007734:	2202      	movs	r2, #2
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	4013      	ands	r3, r2
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d024      	beq.n	800778a <hagl_clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007746:	b29a      	uxth	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800774e:	4619      	mov	r1, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007756:	1acb      	subs	r3, r1, r3
 8007758:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800775a:	4608      	mov	r0, r1
 800775c:	68f9      	ldr	r1, [r7, #12]
 800775e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007762:	1a41      	subs	r1, r0, r1
 8007764:	fb03 f101 	mul.w	r1, r3, r1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800776e:	4618      	mov	r0, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007776:	1ac3      	subs	r3, r0, r3
 8007778:	fb91 f3f3 	sdiv	r3, r1, r3
 800777c:	b29b      	uxth	r3, r3
 800777e:	4413      	add	r3, r2
 8007780:	b29b      	uxth	r3, r3
 8007782:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8007784:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007786:	837b      	strh	r3, [r7, #26]
 8007788:	e029      	b.n	80077de <hagl_clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 800778a:	2201      	movs	r2, #1
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	4013      	ands	r3, r2
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d023      	beq.n	80077de <hagl_clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800779c:	b29a      	uxth	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a4:	4619      	mov	r1, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ac:	1acb      	subs	r3, r1, r3
 80077ae:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80077b0:	4608      	mov	r0, r1
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80077b8:	1a41      	subs	r1, r0, r1
 80077ba:	fb03 f101 	mul.w	r1, r3, r1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077c4:	4618      	mov	r0, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077cc:	1ac3      	subs	r3, r0, r3
 80077ce:	fb91 f3f3 	sdiv	r3, r1, r3
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80077da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077dc:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80077de:	7dfa      	ldrb	r2, [r7, #23]
 80077e0:	7ffb      	ldrb	r3, [r7, #31]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d113      	bne.n	800780e <hagl_clip_line+0x202>
                *x0 = x;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8b7a      	ldrh	r2, [r7, #26]
 80077ea:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	8b3a      	ldrh	r2, [r7, #24]
 80077f0:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80077fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007802:	cb0c      	ldmia	r3, {r2, r3}
 8007804:	f7ff fec8 	bl	8007598 <code>
 8007808:	4603      	mov	r3, r0
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e721      	b.n	8007652 <hagl_clip_line+0x46>
            } else {
                *x1 = x;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	8b7a      	ldrh	r2, [r7, #26]
 8007812:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	8b3a      	ldrh	r2, [r7, #24]
 8007818:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800782a:	cb0c      	ldmia	r3, {r2, r3}
 800782c:	f7ff feb4 	bl	8007598 <code>
 8007830:	4603      	mov	r3, r0
 8007832:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007834:	e70d      	b.n	8007652 <hagl_clip_line+0x46>
            break;
 8007836:	bf00      	nop
            }
        }
    }

    return accept;
 8007838:	7f7b      	ldrb	r3, [r7, #29]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3720      	adds	r7, #32
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <hagl_set_clip>:

void
hagl_set_clip(void *_surface, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	4608      	mov	r0, r1
 800784c:	4611      	mov	r1, r2
 800784e:	461a      	mov	r2, r3
 8007850:	4603      	mov	r3, r0
 8007852:	817b      	strh	r3, [r7, #10]
 8007854:	460b      	mov	r3, r1
 8007856:	813b      	strh	r3, [r7, #8]
 8007858:	4613      	mov	r3, r2
 800785a:	80fb      	strh	r3, [r7, #6]
    hagl_surface_t *surface = _surface;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	617b      	str	r3, [r7, #20]

    surface->clip.x0 = x0;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	897a      	ldrh	r2, [r7, #10]
 8007864:	80da      	strh	r2, [r3, #6]
    surface->clip.y0 = y0;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	893a      	ldrh	r2, [r7, #8]
 800786a:	811a      	strh	r2, [r3, #8]
    surface->clip.x1 = x1;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	815a      	strh	r2, [r3, #10]
    surface->clip.y1 = y1;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	8c3a      	ldrh	r2, [r7, #32]
 8007876:	819a      	strh	r2, [r3, #12]
}
 8007878:	bf00      	nop
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <hagl_draw_hline_xyw>:
#include "hagl/line.h"
#include "hagl/surface.h"

void
hagl_draw_hline_xyw(void const *_surface, int16_t x0, int16_t y0, uint16_t w, hagl_color_t color)
{
 8007884:	b5b0      	push	{r4, r5, r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4603      	mov	r3, r0
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	460b      	mov	r3, r1
 8007898:	813b      	strh	r3, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	613b      	str	r3, [r7, #16]

    if (surface->hline) {
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d04a      	beq.n	8007940 <hagl_draw_hline_xyw+0xbc>
        int16_t width = w;
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	82fb      	strh	r3, [r7, #22]

        /* x0 or y0 is over the edge, nothing to do. */
        if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1) || (y0 < surface->clip.y0))  {
 80078ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	8952      	ldrh	r2, [r2, #10]
 80078b6:	4293      	cmp	r3, r2
 80078b8:	dc57      	bgt.n	800796a <hagl_draw_hline_xyw+0xe6>
 80078ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	8992      	ldrh	r2, [r2, #12]
 80078c2:	4293      	cmp	r3, r2
 80078c4:	dc51      	bgt.n	800796a <hagl_draw_hline_xyw+0xe6>
 80078c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	8912      	ldrh	r2, [r2, #8]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	db4b      	blt.n	800796a <hagl_draw_hline_xyw+0xe6>
            return;
        }

        /* x0 is left of clip window, ignore start part. */
        if (x0 < surface->clip.x0) {
 80078d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	88d2      	ldrh	r2, [r2, #6]
 80078da:	4293      	cmp	r3, r2
 80078dc:	da07      	bge.n	80078ee <hagl_draw_hline_xyw+0x6a>
            width = width + x0;
 80078de:	8afa      	ldrh	r2, [r7, #22]
 80078e0:	897b      	ldrh	r3, [r7, #10]
 80078e2:	4413      	add	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	82fb      	strh	r3, [r7, #22]
            x0 = surface->clip.x0;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	88db      	ldrh	r3, [r3, #6]
 80078ec:	817b      	strh	r3, [r7, #10]
        }

        /* Everything outside clip window, nothing to do. */
        if (width <= 0)  {
 80078ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd3b      	ble.n	800796e <hagl_draw_hline_xyw+0xea>
            return;
        }

        /* Cut anything going over right edge of clip window. */
        if (((x0 + width) > surface->clip.x1)) {
 80078f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80078fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078fe:	4413      	add	r3, r2
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	8952      	ldrh	r2, [r2, #10]
 8007904:	4293      	cmp	r3, r2
 8007906:	dd0d      	ble.n	8007924 <hagl_draw_hline_xyw+0xa0>
            width = width - (x0 + width - 1 - surface->clip.x1);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	895a      	ldrh	r2, [r3, #10]
 800790c:	8979      	ldrh	r1, [r7, #10]
 800790e:	8afb      	ldrh	r3, [r7, #22]
 8007910:	440b      	add	r3, r1
 8007912:	b29b      	uxth	r3, r3
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	b29a      	uxth	r2, r3
 8007918:	8afb      	ldrh	r3, [r7, #22]
 800791a:	4413      	add	r3, r2
 800791c:	b29b      	uxth	r3, r3
 800791e:	3301      	adds	r3, #1
 8007920:	b29b      	uxth	r3, r3
 8007922:	82fb      	strh	r3, [r7, #22]
        }

        surface->hline(&surface, x0, y0, width, color);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007928:	8afd      	ldrh	r5, [r7, #22]
 800792a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800792e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007932:	f107 0010 	add.w	r0, r7, #16
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	462b      	mov	r3, r5
 800793c:	47a0      	blx	r4
 800793e:	e017      	b.n	8007970 <hagl_draw_hline_xyw+0xec>
    } else {
        hagl_draw_line(surface, x0, y0, x0 + w - 1, y0, color);
 8007940:	6938      	ldr	r0, [r7, #16]
 8007942:	897a      	ldrh	r2, [r7, #10]
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	4413      	add	r3, r2
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29b      	uxth	r3, r3
 800794e:	b21c      	sxth	r4, r3
 8007950:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007954:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4623      	mov	r3, r4
 8007964:	f000 f807 	bl	8007976 <hagl_draw_line>
 8007968:	e002      	b.n	8007970 <hagl_draw_hline_xyw+0xec>
            return;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <hagl_draw_hline_xyw+0xec>
            return;
 800796e:	bf00      	nop
    }
}
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bdb0      	pop	{r4, r5, r7, pc}

08007976 <hagl_draw_line>:
#include "hagl/clip.h"
#include "hagl.h"

void
hagl_draw_line(void const *_surface, int16_t x0, int16_t y0, int16_t x1, int16_t y1, hagl_color_t color)
{
 8007976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007978:	b08d      	sub	sp, #52	; 0x34
 800797a:	af02      	add	r7, sp, #8
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	461a      	mov	r2, r3
 8007984:	4603      	mov	r3, r0
 8007986:	817b      	strh	r3, [r7, #10]
 8007988:	460b      	mov	r3, r1
 800798a:	813b      	strh	r3, [r7, #8]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
    const hagl_surface_t *surface = _surface;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	623b      	str	r3, [r7, #32]

    /* Clip coordinates to fit clip window. */
    if (false == hagl_clip_line(&x0, &y0, &x1, &y1, surface->clip)) {
 8007994:	1dbe      	adds	r6, r7, #6
 8007996:	f107 0508 	add.w	r5, r7, #8
 800799a:	f107 040a 	add.w	r4, r7, #10
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	466b      	mov	r3, sp
 80079a2:	3206      	adds	r2, #6
 80079a4:	6810      	ldr	r0, [r2, #0]
 80079a6:	6851      	ldr	r1, [r2, #4]
 80079a8:	c303      	stmia	r3!, {r0, r1}
 80079aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079ae:	4632      	mov	r2, r6
 80079b0:	4629      	mov	r1, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7ff fe2a 	bl	800760c <hagl_clip_line>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f083 0301 	eor.w	r3, r3, #1
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d17e      	bne.n	8007ac2 <hagl_draw_line+0x14c>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80079c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079c8:	461a      	mov	r2, r3
 80079ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bfb8      	it	lt
 80079d4:	425b      	neglt	r3, r3
 80079d6:	83fb      	strh	r3, [r7, #30]
    sx = x0 < x1 ? 1 : -1;
 80079d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80079dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	da01      	bge.n	80079e8 <hagl_draw_line+0x72>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e001      	b.n	80079ec <hagl_draw_line+0x76>
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	83bb      	strh	r3, [r7, #28]
    dy = ABS(y1 - y0);
 80079ee:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80079f2:	461a      	mov	r2, r3
 80079f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfb8      	it	lt
 80079fe:	425b      	neglt	r3, r3
 8007a00:	837b      	strh	r3, [r7, #26]
    sy = y0 < y1 ? 1 : -1;
 8007a02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007a06:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	da01      	bge.n	8007a12 <hagl_draw_line+0x9c>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e001      	b.n	8007a16 <hagl_draw_line+0xa0>
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	833b      	strh	r3, [r7, #24]
    err = (dx > dy ? dx : -dy) / 2;
 8007a18:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007a1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	dd06      	ble.n	8007a32 <hagl_draw_line+0xbc>
 8007a24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a28:	0fda      	lsrs	r2, r3, #31
 8007a2a:	4413      	add	r3, r2
 8007a2c:	105b      	asrs	r3, r3, #1
 8007a2e:	b21b      	sxth	r3, r3
 8007a30:	e006      	b.n	8007a40 <hagl_draw_line+0xca>
 8007a32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007a36:	0fda      	lsrs	r2, r3, #31
 8007a38:	4413      	add	r3, r2
 8007a3a:	105b      	asrs	r3, r3, #1
 8007a3c:	425b      	negs	r3, r3
 8007a3e:	b21b      	sxth	r3, r3
 8007a40:	84fb      	strh	r3, [r7, #38]	; 0x26

    while (1) {
        hagl_put_pixel(surface, x0, y0, color);
 8007a42:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007a46:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a4c:	6a38      	ldr	r0, [r7, #32]
 8007a4e:	f000 f83e 	bl	8007ace <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007a52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d105      	bne.n	8007a6a <hagl_draw_line+0xf4>
 8007a5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007a62:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d02d      	beq.n	8007ac6 <hagl_draw_line+0x150>
            break;
        };

        e2 = err + err;
 8007a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	82fb      	strh	r3, [r7, #22]

        if (e2 > -dx) {
 8007a72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a7a:	425b      	negs	r3, r3
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	dd0c      	ble.n	8007a9a <hagl_draw_line+0x124>
            err -= dy;
 8007a80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a82:	8b7b      	ldrh	r3, [r7, #26]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	84fb      	strh	r3, [r7, #38]	; 0x26
            x0 += sx;
 8007a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	8bbb      	ldrh	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	817b      	strh	r3, [r7, #10]
        }

        if (e2 < dy) {
 8007a9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a9e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	dacd      	bge.n	8007a42 <hagl_draw_line+0xcc>
            err += dx;
 8007aa6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007aa8:	8bfb      	ldrh	r3, [r7, #30]
 8007aaa:	4413      	add	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	84fb      	strh	r3, [r7, #38]	; 0x26
            y0 += sy;
 8007ab0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	8b3b      	ldrh	r3, [r7, #24]
 8007ab8:	4413      	add	r3, r2
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	b21b      	sxth	r3, r3
 8007abe:	813b      	strh	r3, [r7, #8]
        hagl_put_pixel(surface, x0, y0, color);
 8007ac0:	e7bf      	b.n	8007a42 <hagl_draw_line+0xcc>
        return;
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <hagl_draw_line+0x152>
            break;
 8007ac6:	bf00      	nop
        }
    }
}
 8007ac8:	372c      	adds	r7, #44	; 0x2c
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ace <hagl_put_pixel>:
#include "hagl/color.h"
#include "hagl/surface.h"

void
hagl_put_pixel(void const *_surface, int16_t x0, int16_t y0, hagl_color_t color)
{
 8007ace:	b590      	push	{r4, r7, lr}
 8007ad0:	b087      	sub	sp, #28
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	817b      	strh	r3, [r7, #10]
 8007adc:	4613      	mov	r3, r2
 8007ade:	813b      	strh	r3, [r7, #8]
    const hagl_surface_t *surface = _surface;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	617b      	str	r3, [r7, #20]

    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < surface->clip.x0) || (y0 < surface->clip.y0))  {
 8007ae4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	88d2      	ldrh	r2, [r2, #6]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	db1c      	blt.n	8007b2a <hagl_put_pixel+0x5c>
 8007af0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	8912      	ldrh	r2, [r2, #8]
 8007af8:	4293      	cmp	r3, r2
 8007afa:	db16      	blt.n	8007b2a <hagl_put_pixel+0x5c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > surface->clip.x1) || (y0 > surface->clip.y1)) {
 8007afc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	8952      	ldrh	r2, [r2, #10]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	dc12      	bgt.n	8007b2e <hagl_put_pixel+0x60>
 8007b08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	8992      	ldrh	r2, [r2, #12]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	dc0c      	bgt.n	8007b2e <hagl_put_pixel+0x60>
        return;
    }

    /* If still in bounds set the pixel. */
    surface->put_pixel(&surface, x0, y0, color);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	691c      	ldr	r4, [r3, #16]
 8007b18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007b1c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007b20:	f107 0014 	add.w	r0, r7, #20
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	47a0      	blx	r4
 8007b28:	e002      	b.n	8007b30 <hagl_put_pixel+0x62>
        return;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <hagl_put_pixel+0x62>
        return;
 8007b2e:	bf00      	nop
}
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd90      	pop	{r4, r7, pc}
	...

08007b38 <__errno>:
 8007b38:	4b01      	ldr	r3, [pc, #4]	; (8007b40 <__errno+0x8>)
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000010 	.word	0x20000010

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4d0d      	ldr	r5, [pc, #52]	; (8007b7c <__libc_init_array+0x38>)
 8007b48:	4c0d      	ldr	r4, [pc, #52]	; (8007b80 <__libc_init_array+0x3c>)
 8007b4a:	1b64      	subs	r4, r4, r5
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	2600      	movs	r6, #0
 8007b50:	42a6      	cmp	r6, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	4d0b      	ldr	r5, [pc, #44]	; (8007b84 <__libc_init_array+0x40>)
 8007b56:	4c0c      	ldr	r4, [pc, #48]	; (8007b88 <__libc_init_array+0x44>)
 8007b58:	f001 ff28 	bl	80099ac <_init>
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	2600      	movs	r6, #0
 8007b62:	42a6      	cmp	r6, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6c:	4798      	blx	r3
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b76:	4798      	blx	r3
 8007b78:	3601      	adds	r6, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	08009d18 	.word	0x08009d18
 8007b80:	08009d18 	.word	0x08009d18
 8007b84:	08009d18 	.word	0x08009d18
 8007b88:	08009d1c 	.word	0x08009d1c

08007b8c <memset>:
 8007b8c:	4402      	add	r2, r0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d100      	bne.n	8007b96 <memset+0xa>
 8007b94:	4770      	bx	lr
 8007b96:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9a:	e7f9      	b.n	8007b90 <memset+0x4>
 8007b9c:	0000      	movs	r0, r0
	...

08007ba0 <sin>:
 8007ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ba2:	ec53 2b10 	vmov	r2, r3, d0
 8007ba6:	4828      	ldr	r0, [pc, #160]	; (8007c48 <sin+0xa8>)
 8007ba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bac:	4281      	cmp	r1, r0
 8007bae:	dc07      	bgt.n	8007bc0 <sin+0x20>
 8007bb0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007c40 <sin+0xa0>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	b005      	add	sp, #20
 8007bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bbc:	f001 bcec 	b.w	8009598 <__kernel_sin>
 8007bc0:	4822      	ldr	r0, [pc, #136]	; (8007c4c <sin+0xac>)
 8007bc2:	4281      	cmp	r1, r0
 8007bc4:	dd09      	ble.n	8007bda <sin+0x3a>
 8007bc6:	ee10 0a10 	vmov	r0, s0
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f7f8 fb00 	bl	80001d0 <__aeabi_dsub>
 8007bd0:	ec41 0b10 	vmov	d0, r0, r1
 8007bd4:	b005      	add	sp, #20
 8007bd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bda:	4668      	mov	r0, sp
 8007bdc:	f000 fe04 	bl	80087e8 <__ieee754_rem_pio2>
 8007be0:	f000 0003 	and.w	r0, r0, #3
 8007be4:	2801      	cmp	r0, #1
 8007be6:	d00c      	beq.n	8007c02 <sin+0x62>
 8007be8:	2802      	cmp	r0, #2
 8007bea:	d011      	beq.n	8007c10 <sin+0x70>
 8007bec:	b9f0      	cbnz	r0, 8007c2c <sin+0x8c>
 8007bee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bf2:	ed9d 0b00 	vldr	d0, [sp]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f001 fcce 	bl	8009598 <__kernel_sin>
 8007bfc:	ec51 0b10 	vmov	r0, r1, d0
 8007c00:	e7e6      	b.n	8007bd0 <sin+0x30>
 8007c02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c06:	ed9d 0b00 	vldr	d0, [sp]
 8007c0a:	f001 f8ad 	bl	8008d68 <__kernel_cos>
 8007c0e:	e7f5      	b.n	8007bfc <sin+0x5c>
 8007c10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c14:	ed9d 0b00 	vldr	d0, [sp]
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f001 fcbd 	bl	8009598 <__kernel_sin>
 8007c1e:	ec53 2b10 	vmov	r2, r3, d0
 8007c22:	ee10 0a10 	vmov	r0, s0
 8007c26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c2a:	e7d1      	b.n	8007bd0 <sin+0x30>
 8007c2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c30:	ed9d 0b00 	vldr	d0, [sp]
 8007c34:	f001 f898 	bl	8008d68 <__kernel_cos>
 8007c38:	e7f1      	b.n	8007c1e <sin+0x7e>
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w
	...
 8007c48:	3fe921fb 	.word	0x3fe921fb
 8007c4c:	7fefffff 	.word	0x7fefffff

08007c50 <pow>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	ed2d 8b02 	vpush	{d8}
 8007c56:	eeb0 8a40 	vmov.f32	s16, s0
 8007c5a:	eef0 8a60 	vmov.f32	s17, s1
 8007c5e:	ec55 4b11 	vmov	r4, r5, d1
 8007c62:	f000 f891 	bl	8007d88 <__ieee754_pow>
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	ec57 6b10 	vmov	r6, r7, d0
 8007c72:	f7f8 feff 	bl	8000a74 <__aeabi_dcmpun>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d13b      	bne.n	8007cf2 <pow+0xa2>
 8007c7a:	ec51 0b18 	vmov	r0, r1, d8
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2300      	movs	r3, #0
 8007c82:	f7f8 fec5 	bl	8000a10 <__aeabi_dcmpeq>
 8007c86:	b1b8      	cbz	r0, 8007cb8 <pow+0x68>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	4629      	mov	r1, r5
 8007c90:	f7f8 febe 	bl	8000a10 <__aeabi_dcmpeq>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d146      	bne.n	8007d26 <pow+0xd6>
 8007c98:	ec45 4b10 	vmov	d0, r4, r5
 8007c9c:	f001 fd73 	bl	8009786 <finite>
 8007ca0:	b338      	cbz	r0, 8007cf2 <pow+0xa2>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 febb 	bl	8000a24 <__aeabi_dcmplt>
 8007cae:	b300      	cbz	r0, 8007cf2 <pow+0xa2>
 8007cb0:	f7ff ff42 	bl	8007b38 <__errno>
 8007cb4:	2322      	movs	r3, #34	; 0x22
 8007cb6:	e01b      	b.n	8007cf0 <pow+0xa0>
 8007cb8:	ec47 6b10 	vmov	d0, r6, r7
 8007cbc:	f001 fd63 	bl	8009786 <finite>
 8007cc0:	b9e0      	cbnz	r0, 8007cfc <pow+0xac>
 8007cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8007cc6:	eef0 0a68 	vmov.f32	s1, s17
 8007cca:	f001 fd5c 	bl	8009786 <finite>
 8007cce:	b1a8      	cbz	r0, 8007cfc <pow+0xac>
 8007cd0:	ec45 4b10 	vmov	d0, r4, r5
 8007cd4:	f001 fd57 	bl	8009786 <finite>
 8007cd8:	b180      	cbz	r0, 8007cfc <pow+0xac>
 8007cda:	4632      	mov	r2, r6
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	f7f8 fec7 	bl	8000a74 <__aeabi_dcmpun>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0e2      	beq.n	8007cb0 <pow+0x60>
 8007cea:	f7ff ff25 	bl	8007b38 <__errno>
 8007cee:	2321      	movs	r3, #33	; 0x21
 8007cf0:	6003      	str	r3, [r0, #0]
 8007cf2:	ecbd 8b02 	vpop	{d8}
 8007cf6:	ec47 6b10 	vmov	d0, r6, r7
 8007cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4630      	mov	r0, r6
 8007d02:	4639      	mov	r1, r7
 8007d04:	f7f8 fe84 	bl	8000a10 <__aeabi_dcmpeq>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d0f2      	beq.n	8007cf2 <pow+0xa2>
 8007d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d10:	eef0 0a68 	vmov.f32	s1, s17
 8007d14:	f001 fd37 	bl	8009786 <finite>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d0ea      	beq.n	8007cf2 <pow+0xa2>
 8007d1c:	ec45 4b10 	vmov	d0, r4, r5
 8007d20:	f001 fd31 	bl	8009786 <finite>
 8007d24:	e7c3      	b.n	8007cae <pow+0x5e>
 8007d26:	4f01      	ldr	r7, [pc, #4]	; (8007d2c <pow+0xdc>)
 8007d28:	2600      	movs	r6, #0
 8007d2a:	e7e2      	b.n	8007cf2 <pow+0xa2>
 8007d2c:	3ff00000 	.word	0x3ff00000

08007d30 <sqrt>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	ed2d 8b02 	vpush	{d8}
 8007d36:	ec55 4b10 	vmov	r4, r5, d0
 8007d3a:	f000 ff61 	bl	8008c00 <__ieee754_sqrt>
 8007d3e:	4622      	mov	r2, r4
 8007d40:	462b      	mov	r3, r5
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	eeb0 8a40 	vmov.f32	s16, s0
 8007d4a:	eef0 8a60 	vmov.f32	s17, s1
 8007d4e:	f7f8 fe91 	bl	8000a74 <__aeabi_dcmpun>
 8007d52:	b990      	cbnz	r0, 8007d7a <sqrt+0x4a>
 8007d54:	2200      	movs	r2, #0
 8007d56:	2300      	movs	r3, #0
 8007d58:	4620      	mov	r0, r4
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	f7f8 fe62 	bl	8000a24 <__aeabi_dcmplt>
 8007d60:	b158      	cbz	r0, 8007d7a <sqrt+0x4a>
 8007d62:	f7ff fee9 	bl	8007b38 <__errno>
 8007d66:	2321      	movs	r3, #33	; 0x21
 8007d68:	6003      	str	r3, [r0, #0]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	f7f8 fd0f 	bl	8000794 <__aeabi_ddiv>
 8007d76:	ec41 0b18 	vmov	d8, r0, r1
 8007d7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007d7e:	eef0 0a68 	vmov.f32	s1, s17
 8007d82:	ecbd 8b02 	vpop	{d8}
 8007d86:	bd38      	pop	{r3, r4, r5, pc}

08007d88 <__ieee754_pow>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	ed2d 8b06 	vpush	{d8-d10}
 8007d90:	b089      	sub	sp, #36	; 0x24
 8007d92:	ed8d 1b00 	vstr	d1, [sp]
 8007d96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007d9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007d9e:	ea58 0102 	orrs.w	r1, r8, r2
 8007da2:	ec57 6b10 	vmov	r6, r7, d0
 8007da6:	d115      	bne.n	8007dd4 <__ieee754_pow+0x4c>
 8007da8:	19b3      	adds	r3, r6, r6
 8007daa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007dae:	4152      	adcs	r2, r2
 8007db0:	4299      	cmp	r1, r3
 8007db2:	4b89      	ldr	r3, [pc, #548]	; (8007fd8 <__ieee754_pow+0x250>)
 8007db4:	4193      	sbcs	r3, r2
 8007db6:	f080 84d2 	bcs.w	800875e <__ieee754_pow+0x9d6>
 8007dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 fa07 	bl	80001d4 <__adddf3>
 8007dc6:	ec41 0b10 	vmov	d0, r0, r1
 8007dca:	b009      	add	sp, #36	; 0x24
 8007dcc:	ecbd 8b06 	vpop	{d8-d10}
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	4b81      	ldr	r3, [pc, #516]	; (8007fdc <__ieee754_pow+0x254>)
 8007dd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	ee10 aa10 	vmov	sl, s0
 8007de0:	463d      	mov	r5, r7
 8007de2:	dc06      	bgt.n	8007df2 <__ieee754_pow+0x6a>
 8007de4:	d101      	bne.n	8007dea <__ieee754_pow+0x62>
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	d1e7      	bne.n	8007dba <__ieee754_pow+0x32>
 8007dea:	4598      	cmp	r8, r3
 8007dec:	dc01      	bgt.n	8007df2 <__ieee754_pow+0x6a>
 8007dee:	d10f      	bne.n	8007e10 <__ieee754_pow+0x88>
 8007df0:	b172      	cbz	r2, 8007e10 <__ieee754_pow+0x88>
 8007df2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007df6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007dfa:	ea55 050a 	orrs.w	r5, r5, sl
 8007dfe:	d1dc      	bne.n	8007dba <__ieee754_pow+0x32>
 8007e00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e04:	18db      	adds	r3, r3, r3
 8007e06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007e0a:	4152      	adcs	r2, r2
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	e7d0      	b.n	8007db2 <__ieee754_pow+0x2a>
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	da3b      	bge.n	8007e8c <__ieee754_pow+0x104>
 8007e14:	4b72      	ldr	r3, [pc, #456]	; (8007fe0 <__ieee754_pow+0x258>)
 8007e16:	4598      	cmp	r8, r3
 8007e18:	dc51      	bgt.n	8007ebe <__ieee754_pow+0x136>
 8007e1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e1e:	4598      	cmp	r8, r3
 8007e20:	f340 84ac 	ble.w	800877c <__ieee754_pow+0x9f4>
 8007e24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e2c:	2b14      	cmp	r3, #20
 8007e2e:	dd0f      	ble.n	8007e50 <__ieee754_pow+0xc8>
 8007e30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e34:	fa22 f103 	lsr.w	r1, r2, r3
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f040 849d 	bne.w	800877c <__ieee754_pow+0x9f4>
 8007e42:	f001 0101 	and.w	r1, r1, #1
 8007e46:	f1c1 0302 	rsb	r3, r1, #2
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	b182      	cbz	r2, 8007e70 <__ieee754_pow+0xe8>
 8007e4e:	e05f      	b.n	8007f10 <__ieee754_pow+0x188>
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	d15b      	bne.n	8007f0c <__ieee754_pow+0x184>
 8007e54:	f1c3 0314 	rsb	r3, r3, #20
 8007e58:	fa48 f103 	asr.w	r1, r8, r3
 8007e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e60:	4543      	cmp	r3, r8
 8007e62:	f040 8488 	bne.w	8008776 <__ieee754_pow+0x9ee>
 8007e66:	f001 0101 	and.w	r1, r1, #1
 8007e6a:	f1c1 0302 	rsb	r3, r1, #2
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	4b5c      	ldr	r3, [pc, #368]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007e72:	4598      	cmp	r8, r3
 8007e74:	d132      	bne.n	8007edc <__ieee754_pow+0x154>
 8007e76:	f1b9 0f00 	cmp.w	r9, #0
 8007e7a:	f280 8478 	bge.w	800876e <__ieee754_pow+0x9e6>
 8007e7e:	4959      	ldr	r1, [pc, #356]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	2000      	movs	r0, #0
 8007e86:	f7f8 fc85 	bl	8000794 <__aeabi_ddiv>
 8007e8a:	e79c      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9304      	str	r3, [sp, #16]
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d13d      	bne.n	8007f10 <__ieee754_pow+0x188>
 8007e94:	4b51      	ldr	r3, [pc, #324]	; (8007fdc <__ieee754_pow+0x254>)
 8007e96:	4598      	cmp	r8, r3
 8007e98:	d1ea      	bne.n	8007e70 <__ieee754_pow+0xe8>
 8007e9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ea2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea6:	f000 845a 	beq.w	800875e <__ieee754_pow+0x9d6>
 8007eaa:	4b4f      	ldr	r3, [pc, #316]	; (8007fe8 <__ieee754_pow+0x260>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	dd08      	ble.n	8007ec2 <__ieee754_pow+0x13a>
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	f2c0 8457 	blt.w	8008766 <__ieee754_pow+0x9de>
 8007eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ebc:	e783      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e7e5      	b.n	8007e8e <__ieee754_pow+0x106>
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f04f 0000 	mov.w	r0, #0
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	f6bf af7a 	bge.w	8007dc6 <__ieee754_pow+0x3e>
 8007ed2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007ed6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007eda:	e774      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007edc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007ee0:	d106      	bne.n	8007ef0 <__ieee754_pow+0x168>
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 fb29 	bl	8000540 <__aeabi_dmul>
 8007eee:	e76a      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007ef0:	4b3e      	ldr	r3, [pc, #248]	; (8007fec <__ieee754_pow+0x264>)
 8007ef2:	4599      	cmp	r9, r3
 8007ef4:	d10c      	bne.n	8007f10 <__ieee754_pow+0x188>
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	db0a      	blt.n	8007f10 <__ieee754_pow+0x188>
 8007efa:	ec47 6b10 	vmov	d0, r6, r7
 8007efe:	b009      	add	sp, #36	; 0x24
 8007f00:	ecbd 8b06 	vpop	{d8-d10}
 8007f04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	f000 be7a 	b.w	8008c00 <__ieee754_sqrt>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9304      	str	r3, [sp, #16]
 8007f10:	ec47 6b10 	vmov	d0, r6, r7
 8007f14:	f001 fc2e 	bl	8009774 <fabs>
 8007f18:	ec51 0b10 	vmov	r0, r1, d0
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	d129      	bne.n	8007f76 <__ieee754_pow+0x1ee>
 8007f22:	b124      	cbz	r4, 8007f2e <__ieee754_pow+0x1a6>
 8007f24:	4b2f      	ldr	r3, [pc, #188]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007f26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d123      	bne.n	8007f76 <__ieee754_pow+0x1ee>
 8007f2e:	f1b9 0f00 	cmp.w	r9, #0
 8007f32:	da05      	bge.n	8007f40 <__ieee754_pow+0x1b8>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	2000      	movs	r0, #0
 8007f3a:	492a      	ldr	r1, [pc, #168]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007f3c:	f7f8 fc2a 	bl	8000794 <__aeabi_ddiv>
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	f6bf af40 	bge.w	8007dc6 <__ieee754_pow+0x3e>
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f50:	4323      	orrs	r3, r4
 8007f52:	d108      	bne.n	8007f66 <__ieee754_pow+0x1de>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f7f8 f938 	bl	80001d0 <__aeabi_dsub>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	e78f      	b.n	8007e86 <__ieee754_pow+0xfe>
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	f47f af2c 	bne.w	8007dc6 <__ieee754_pow+0x3e>
 8007f6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f72:	4619      	mov	r1, r3
 8007f74:	e727      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007f76:	0feb      	lsrs	r3, r5, #31
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	9306      	str	r3, [sp, #24]
 8007f7c:	9a06      	ldr	r2, [sp, #24]
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	d102      	bne.n	8007f8a <__ieee754_pow+0x202>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	e7e6      	b.n	8007f58 <__ieee754_pow+0x1d0>
 8007f8a:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <__ieee754_pow+0x268>)
 8007f8c:	4598      	cmp	r8, r3
 8007f8e:	f340 80fb 	ble.w	8008188 <__ieee754_pow+0x400>
 8007f92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f96:	4598      	cmp	r8, r3
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <__ieee754_pow+0x260>)
 8007f9a:	dd0c      	ble.n	8007fb6 <__ieee754_pow+0x22e>
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	dc0f      	bgt.n	8007fc0 <__ieee754_pow+0x238>
 8007fa0:	f1b9 0f00 	cmp.w	r9, #0
 8007fa4:	da0f      	bge.n	8007fc6 <__ieee754_pow+0x23e>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	b009      	add	sp, #36	; 0x24
 8007faa:	ecbd 8b06 	vpop	{d8-d10}
 8007fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb2:	f001 bbd6 	b.w	8009762 <__math_oflow>
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	dbf2      	blt.n	8007fa0 <__ieee754_pow+0x218>
 8007fba:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	dd19      	ble.n	8007ff4 <__ieee754_pow+0x26c>
 8007fc0:	f1b9 0f00 	cmp.w	r9, #0
 8007fc4:	dcef      	bgt.n	8007fa6 <__ieee754_pow+0x21e>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	b009      	add	sp, #36	; 0x24
 8007fca:	ecbd 8b06 	vpop	{d8-d10}
 8007fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd2:	f001 bbbd 	b.w	8009750 <__math_uflow>
 8007fd6:	bf00      	nop
 8007fd8:	fff00000 	.word	0xfff00000
 8007fdc:	7ff00000 	.word	0x7ff00000
 8007fe0:	433fffff 	.word	0x433fffff
 8007fe4:	3ff00000 	.word	0x3ff00000
 8007fe8:	3fefffff 	.word	0x3fefffff
 8007fec:	3fe00000 	.word	0x3fe00000
 8007ff0:	41e00000 	.word	0x41e00000
 8007ff4:	4b60      	ldr	r3, [pc, #384]	; (8008178 <__ieee754_pow+0x3f0>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f7f8 f8ea 	bl	80001d0 <__aeabi_dsub>
 8007ffc:	a354      	add	r3, pc, #336	; (adr r3, 8008150 <__ieee754_pow+0x3c8>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	4604      	mov	r4, r0
 8008004:	460d      	mov	r5, r1
 8008006:	f7f8 fa9b 	bl	8000540 <__aeabi_dmul>
 800800a:	a353      	add	r3, pc, #332	; (adr r3, 8008158 <__ieee754_pow+0x3d0>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	4606      	mov	r6, r0
 8008012:	460f      	mov	r7, r1
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 fa92 	bl	8000540 <__aeabi_dmul>
 800801c:	4b57      	ldr	r3, [pc, #348]	; (800817c <__ieee754_pow+0x3f4>)
 800801e:	4682      	mov	sl, r0
 8008020:	468b      	mov	fp, r1
 8008022:	2200      	movs	r2, #0
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 fa8a 	bl	8000540 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	a14b      	add	r1, pc, #300	; (adr r1, 8008160 <__ieee754_pow+0x3d8>)
 8008032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008036:	f7f8 f8cb 	bl	80001d0 <__aeabi_dsub>
 800803a:	4622      	mov	r2, r4
 800803c:	462b      	mov	r3, r5
 800803e:	f7f8 fa7f 	bl	8000540 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	2000      	movs	r0, #0
 8008048:	494d      	ldr	r1, [pc, #308]	; (8008180 <__ieee754_pow+0x3f8>)
 800804a:	f7f8 f8c1 	bl	80001d0 <__aeabi_dsub>
 800804e:	4622      	mov	r2, r4
 8008050:	4680      	mov	r8, r0
 8008052:	4689      	mov	r9, r1
 8008054:	462b      	mov	r3, r5
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fa71 	bl	8000540 <__aeabi_dmul>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 fa6b 	bl	8000540 <__aeabi_dmul>
 800806a:	a33f      	add	r3, pc, #252	; (adr r3, 8008168 <__ieee754_pow+0x3e0>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f7f8 fa66 	bl	8000540 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4650      	mov	r0, sl
 800807a:	4659      	mov	r1, fp
 800807c:	f7f8 f8a8 	bl	80001d0 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f8a2 	bl	80001d4 <__adddf3>
 8008090:	2000      	movs	r0, #0
 8008092:	4632      	mov	r2, r6
 8008094:	463b      	mov	r3, r7
 8008096:	4604      	mov	r4, r0
 8008098:	460d      	mov	r5, r1
 800809a:	f7f8 f899 	bl	80001d0 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 f893 	bl	80001d0 <__aeabi_dsub>
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	9a06      	ldr	r2, [sp, #24]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4313      	orrs	r3, r2
 80080b2:	4682      	mov	sl, r0
 80080b4:	468b      	mov	fp, r1
 80080b6:	f040 81e7 	bne.w	8008488 <__ieee754_pow+0x700>
 80080ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008170 <__ieee754_pow+0x3e8>
 80080be:	eeb0 8a47 	vmov.f32	s16, s14
 80080c2:	eef0 8a67 	vmov.f32	s17, s15
 80080c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080ca:	2600      	movs	r6, #0
 80080cc:	4632      	mov	r2, r6
 80080ce:	463b      	mov	r3, r7
 80080d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080d4:	f7f8 f87c 	bl	80001d0 <__aeabi_dsub>
 80080d8:	4622      	mov	r2, r4
 80080da:	462b      	mov	r3, r5
 80080dc:	f7f8 fa30 	bl	8000540 <__aeabi_dmul>
 80080e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 fa28 	bl	8000540 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 f86c 	bl	80001d4 <__adddf3>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	4680      	mov	r8, r0
 8008102:	4689      	mov	r9, r1
 8008104:	4620      	mov	r0, r4
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 fa1a 	bl	8000540 <__aeabi_dmul>
 800810c:	460b      	mov	r3, r1
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	4602      	mov	r2, r0
 8008114:	4649      	mov	r1, r9
 8008116:	4640      	mov	r0, r8
 8008118:	f7f8 f85c 	bl	80001d4 <__adddf3>
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <__ieee754_pow+0x3fc>)
 800811e:	4299      	cmp	r1, r3
 8008120:	ec45 4b19 	vmov	d9, r4, r5
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	468b      	mov	fp, r1
 800812a:	f340 82f1 	ble.w	8008710 <__ieee754_pow+0x988>
 800812e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008132:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008136:	4303      	orrs	r3, r0
 8008138:	f000 81e4 	beq.w	8008504 <__ieee754_pow+0x77c>
 800813c:	ec51 0b18 	vmov	r0, r1, d8
 8008140:	2200      	movs	r2, #0
 8008142:	2300      	movs	r3, #0
 8008144:	f7f8 fc6e 	bl	8000a24 <__aeabi_dcmplt>
 8008148:	3800      	subs	r0, #0
 800814a:	bf18      	it	ne
 800814c:	2001      	movne	r0, #1
 800814e:	e72b      	b.n	8007fa8 <__ieee754_pow+0x220>
 8008150:	60000000 	.word	0x60000000
 8008154:	3ff71547 	.word	0x3ff71547
 8008158:	f85ddf44 	.word	0xf85ddf44
 800815c:	3e54ae0b 	.word	0x3e54ae0b
 8008160:	55555555 	.word	0x55555555
 8008164:	3fd55555 	.word	0x3fd55555
 8008168:	652b82fe 	.word	0x652b82fe
 800816c:	3ff71547 	.word	0x3ff71547
 8008170:	00000000 	.word	0x00000000
 8008174:	bff00000 	.word	0xbff00000
 8008178:	3ff00000 	.word	0x3ff00000
 800817c:	3fd00000 	.word	0x3fd00000
 8008180:	3fe00000 	.word	0x3fe00000
 8008184:	408fffff 	.word	0x408fffff
 8008188:	4bd5      	ldr	r3, [pc, #852]	; (80084e0 <__ieee754_pow+0x758>)
 800818a:	402b      	ands	r3, r5
 800818c:	2200      	movs	r2, #0
 800818e:	b92b      	cbnz	r3, 800819c <__ieee754_pow+0x414>
 8008190:	4bd4      	ldr	r3, [pc, #848]	; (80084e4 <__ieee754_pow+0x75c>)
 8008192:	f7f8 f9d5 	bl	8000540 <__aeabi_dmul>
 8008196:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800819a:	460c      	mov	r4, r1
 800819c:	1523      	asrs	r3, r4, #20
 800819e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80081a2:	4413      	add	r3, r2
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	4bd0      	ldr	r3, [pc, #832]	; (80084e8 <__ieee754_pow+0x760>)
 80081a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80081b0:	429c      	cmp	r4, r3
 80081b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80081b6:	dd08      	ble.n	80081ca <__ieee754_pow+0x442>
 80081b8:	4bcc      	ldr	r3, [pc, #816]	; (80084ec <__ieee754_pow+0x764>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	f340 8162 	ble.w	8008484 <__ieee754_pow+0x6fc>
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081ca:	2400      	movs	r4, #0
 80081cc:	00e3      	lsls	r3, r4, #3
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	4bc7      	ldr	r3, [pc, #796]	; (80084f0 <__ieee754_pow+0x768>)
 80081d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d6:	ed93 7b00 	vldr	d7, [r3]
 80081da:	4629      	mov	r1, r5
 80081dc:	ec53 2b17 	vmov	r2, r3, d7
 80081e0:	eeb0 9a47 	vmov.f32	s18, s14
 80081e4:	eef0 9a67 	vmov.f32	s19, s15
 80081e8:	4682      	mov	sl, r0
 80081ea:	f7f7 fff1 	bl	80001d0 <__aeabi_dsub>
 80081ee:	4652      	mov	r2, sl
 80081f0:	4606      	mov	r6, r0
 80081f2:	460f      	mov	r7, r1
 80081f4:	462b      	mov	r3, r5
 80081f6:	ec51 0b19 	vmov	r0, r1, d9
 80081fa:	f7f7 ffeb 	bl	80001d4 <__adddf3>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	2000      	movs	r0, #0
 8008204:	49bb      	ldr	r1, [pc, #748]	; (80084f4 <__ieee754_pow+0x76c>)
 8008206:	f7f8 fac5 	bl	8000794 <__aeabi_ddiv>
 800820a:	ec41 0b1a 	vmov	d10, r0, r1
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 f993 	bl	8000540 <__aeabi_dmul>
 800821a:	2300      	movs	r3, #0
 800821c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008226:	46ab      	mov	fp, r5
 8008228:	106d      	asrs	r5, r5, #1
 800822a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800822e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008232:	ec41 0b18 	vmov	d8, r0, r1
 8008236:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800823a:	2200      	movs	r2, #0
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	4614      	mov	r4, r2
 8008242:	461d      	mov	r5, r3
 8008244:	f7f8 f97c 	bl	8000540 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f7 ffbe 	bl	80001d0 <__aeabi_dsub>
 8008254:	ec53 2b19 	vmov	r2, r3, d9
 8008258:	4606      	mov	r6, r0
 800825a:	460f      	mov	r7, r1
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f7 ffb6 	bl	80001d0 <__aeabi_dsub>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4650      	mov	r0, sl
 800826a:	4659      	mov	r1, fp
 800826c:	f7f7 ffb0 	bl	80001d0 <__aeabi_dsub>
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	f7f8 f964 	bl	8000540 <__aeabi_dmul>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f7 ffa6 	bl	80001d0 <__aeabi_dsub>
 8008284:	ec53 2b1a 	vmov	r2, r3, d10
 8008288:	f7f8 f95a 	bl	8000540 <__aeabi_dmul>
 800828c:	ec53 2b18 	vmov	r2, r3, d8
 8008290:	ec41 0b19 	vmov	d9, r0, r1
 8008294:	ec51 0b18 	vmov	r0, r1, d8
 8008298:	f7f8 f952 	bl	8000540 <__aeabi_dmul>
 800829c:	a37c      	add	r3, pc, #496	; (adr r3, 8008490 <__ieee754_pow+0x708>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	f7f8 f94b 	bl	8000540 <__aeabi_dmul>
 80082aa:	a37b      	add	r3, pc, #492	; (adr r3, 8008498 <__ieee754_pow+0x710>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f7 ff90 	bl	80001d4 <__adddf3>
 80082b4:	4622      	mov	r2, r4
 80082b6:	462b      	mov	r3, r5
 80082b8:	f7f8 f942 	bl	8000540 <__aeabi_dmul>
 80082bc:	a378      	add	r3, pc, #480	; (adr r3, 80084a0 <__ieee754_pow+0x718>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ff87 	bl	80001d4 <__adddf3>
 80082c6:	4622      	mov	r2, r4
 80082c8:	462b      	mov	r3, r5
 80082ca:	f7f8 f939 	bl	8000540 <__aeabi_dmul>
 80082ce:	a376      	add	r3, pc, #472	; (adr r3, 80084a8 <__ieee754_pow+0x720>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f7 ff7e 	bl	80001d4 <__adddf3>
 80082d8:	4622      	mov	r2, r4
 80082da:	462b      	mov	r3, r5
 80082dc:	f7f8 f930 	bl	8000540 <__aeabi_dmul>
 80082e0:	a373      	add	r3, pc, #460	; (adr r3, 80084b0 <__ieee754_pow+0x728>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ff75 	bl	80001d4 <__adddf3>
 80082ea:	4622      	mov	r2, r4
 80082ec:	462b      	mov	r3, r5
 80082ee:	f7f8 f927 	bl	8000540 <__aeabi_dmul>
 80082f2:	a371      	add	r3, pc, #452	; (adr r3, 80084b8 <__ieee754_pow+0x730>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ff6c 	bl	80001d4 <__adddf3>
 80082fc:	4622      	mov	r2, r4
 80082fe:	4606      	mov	r6, r0
 8008300:	460f      	mov	r7, r1
 8008302:	462b      	mov	r3, r5
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 f91a 	bl	8000540 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f8 f914 	bl	8000540 <__aeabi_dmul>
 8008318:	4642      	mov	r2, r8
 800831a:	4604      	mov	r4, r0
 800831c:	460d      	mov	r5, r1
 800831e:	464b      	mov	r3, r9
 8008320:	ec51 0b18 	vmov	r0, r1, d8
 8008324:	f7f7 ff56 	bl	80001d4 <__adddf3>
 8008328:	ec53 2b19 	vmov	r2, r3, d9
 800832c:	f7f8 f908 	bl	8000540 <__aeabi_dmul>
 8008330:	4622      	mov	r2, r4
 8008332:	462b      	mov	r3, r5
 8008334:	f7f7 ff4e 	bl	80001d4 <__adddf3>
 8008338:	4642      	mov	r2, r8
 800833a:	4682      	mov	sl, r0
 800833c:	468b      	mov	fp, r1
 800833e:	464b      	mov	r3, r9
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7f8 f8fc 	bl	8000540 <__aeabi_dmul>
 8008348:	4b6b      	ldr	r3, [pc, #428]	; (80084f8 <__ieee754_pow+0x770>)
 800834a:	2200      	movs	r2, #0
 800834c:	4606      	mov	r6, r0
 800834e:	460f      	mov	r7, r1
 8008350:	f7f7 ff40 	bl	80001d4 <__adddf3>
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	f7f7 ff3c 	bl	80001d4 <__adddf3>
 800835c:	2000      	movs	r0, #0
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f8 f8e9 	bl	8000540 <__aeabi_dmul>
 800836e:	4b62      	ldr	r3, [pc, #392]	; (80084f8 <__ieee754_pow+0x770>)
 8008370:	4680      	mov	r8, r0
 8008372:	4689      	mov	r9, r1
 8008374:	2200      	movs	r2, #0
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f7 ff29 	bl	80001d0 <__aeabi_dsub>
 800837e:	4632      	mov	r2, r6
 8008380:	463b      	mov	r3, r7
 8008382:	f7f7 ff25 	bl	80001d0 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f7 ff1f 	bl	80001d0 <__aeabi_dsub>
 8008392:	ec53 2b18 	vmov	r2, r3, d8
 8008396:	f7f8 f8d3 	bl	8000540 <__aeabi_dmul>
 800839a:	4622      	mov	r2, r4
 800839c:	4606      	mov	r6, r0
 800839e:	460f      	mov	r7, r1
 80083a0:	462b      	mov	r3, r5
 80083a2:	ec51 0b19 	vmov	r0, r1, d9
 80083a6:	f7f8 f8cb 	bl	8000540 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f7 ff0f 	bl	80001d4 <__adddf3>
 80083b6:	4606      	mov	r6, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f7 ff07 	bl	80001d4 <__adddf3>
 80083c6:	a33e      	add	r3, pc, #248	; (adr r3, 80084c0 <__ieee754_pow+0x738>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	2000      	movs	r0, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	f7f8 f8b5 	bl	8000540 <__aeabi_dmul>
 80083d6:	4642      	mov	r2, r8
 80083d8:	ec41 0b18 	vmov	d8, r0, r1
 80083dc:	464b      	mov	r3, r9
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7f7 fef5 	bl	80001d0 <__aeabi_dsub>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f7 feef 	bl	80001d0 <__aeabi_dsub>
 80083f2:	a335      	add	r3, pc, #212	; (adr r3, 80084c8 <__ieee754_pow+0x740>)
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f7f8 f8a2 	bl	8000540 <__aeabi_dmul>
 80083fc:	a334      	add	r3, pc, #208	; (adr r3, 80084d0 <__ieee754_pow+0x748>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 f899 	bl	8000540 <__aeabi_dmul>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7f7 fedd 	bl	80001d4 <__adddf3>
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	4b37      	ldr	r3, [pc, #220]	; (80084fc <__ieee754_pow+0x774>)
 800841e:	4413      	add	r3, r2
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f7 fed6 	bl	80001d4 <__adddf3>
 8008428:	4682      	mov	sl, r0
 800842a:	9805      	ldr	r0, [sp, #20]
 800842c:	468b      	mov	fp, r1
 800842e:	f7f8 f81d 	bl	800046c <__aeabi_i2d>
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	4b32      	ldr	r3, [pc, #200]	; (8008500 <__ieee754_pow+0x778>)
 8008436:	4413      	add	r3, r2
 8008438:	e9d3 8900 	ldrd	r8, r9, [r3]
 800843c:	4606      	mov	r6, r0
 800843e:	460f      	mov	r7, r1
 8008440:	4652      	mov	r2, sl
 8008442:	465b      	mov	r3, fp
 8008444:	ec51 0b18 	vmov	r0, r1, d8
 8008448:	f7f7 fec4 	bl	80001d4 <__adddf3>
 800844c:	4642      	mov	r2, r8
 800844e:	464b      	mov	r3, r9
 8008450:	f7f7 fec0 	bl	80001d4 <__adddf3>
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	f7f7 febc 	bl	80001d4 <__adddf3>
 800845c:	2000      	movs	r0, #0
 800845e:	4632      	mov	r2, r6
 8008460:	463b      	mov	r3, r7
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	f7f7 feb3 	bl	80001d0 <__aeabi_dsub>
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	f7f7 feaf 	bl	80001d0 <__aeabi_dsub>
 8008472:	ec53 2b18 	vmov	r2, r3, d8
 8008476:	f7f7 feab 	bl	80001d0 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4650      	mov	r0, sl
 8008480:	4659      	mov	r1, fp
 8008482:	e610      	b.n	80080a6 <__ieee754_pow+0x31e>
 8008484:	2401      	movs	r4, #1
 8008486:	e6a1      	b.n	80081cc <__ieee754_pow+0x444>
 8008488:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80084d8 <__ieee754_pow+0x750>
 800848c:	e617      	b.n	80080be <__ieee754_pow+0x336>
 800848e:	bf00      	nop
 8008490:	4a454eef 	.word	0x4a454eef
 8008494:	3fca7e28 	.word	0x3fca7e28
 8008498:	93c9db65 	.word	0x93c9db65
 800849c:	3fcd864a 	.word	0x3fcd864a
 80084a0:	a91d4101 	.word	0xa91d4101
 80084a4:	3fd17460 	.word	0x3fd17460
 80084a8:	518f264d 	.word	0x518f264d
 80084ac:	3fd55555 	.word	0x3fd55555
 80084b0:	db6fabff 	.word	0xdb6fabff
 80084b4:	3fdb6db6 	.word	0x3fdb6db6
 80084b8:	33333303 	.word	0x33333303
 80084bc:	3fe33333 	.word	0x3fe33333
 80084c0:	e0000000 	.word	0xe0000000
 80084c4:	3feec709 	.word	0x3feec709
 80084c8:	dc3a03fd 	.word	0xdc3a03fd
 80084cc:	3feec709 	.word	0x3feec709
 80084d0:	145b01f5 	.word	0x145b01f5
 80084d4:	be3e2fe0 	.word	0xbe3e2fe0
 80084d8:	00000000 	.word	0x00000000
 80084dc:	3ff00000 	.word	0x3ff00000
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	43400000 	.word	0x43400000
 80084e8:	0003988e 	.word	0x0003988e
 80084ec:	000bb679 	.word	0x000bb679
 80084f0:	08009b08 	.word	0x08009b08
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	40080000 	.word	0x40080000
 80084fc:	08009b28 	.word	0x08009b28
 8008500:	08009b18 	.word	0x08009b18
 8008504:	a3b5      	add	r3, pc, #724	; (adr r3, 80087dc <__ieee754_pow+0xa54>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 fe61 	bl	80001d4 <__adddf3>
 8008512:	4622      	mov	r2, r4
 8008514:	ec41 0b1a 	vmov	d10, r0, r1
 8008518:	462b      	mov	r3, r5
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	f7f7 fe57 	bl	80001d0 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	ec51 0b1a 	vmov	r0, r1, d10
 800852a:	f7f8 fa99 	bl	8000a60 <__aeabi_dcmpgt>
 800852e:	2800      	cmp	r0, #0
 8008530:	f47f ae04 	bne.w	800813c <__ieee754_pow+0x3b4>
 8008534:	4aa4      	ldr	r2, [pc, #656]	; (80087c8 <__ieee754_pow+0xa40>)
 8008536:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800853a:	4293      	cmp	r3, r2
 800853c:	f340 8108 	ble.w	8008750 <__ieee754_pow+0x9c8>
 8008540:	151b      	asrs	r3, r3, #20
 8008542:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008546:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800854a:	fa4a f303 	asr.w	r3, sl, r3
 800854e:	445b      	add	r3, fp
 8008550:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008554:	4e9d      	ldr	r6, [pc, #628]	; (80087cc <__ieee754_pow+0xa44>)
 8008556:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800855a:	4116      	asrs	r6, r2
 800855c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008560:	2000      	movs	r0, #0
 8008562:	ea23 0106 	bic.w	r1, r3, r6
 8008566:	f1c2 0214 	rsb	r2, r2, #20
 800856a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800856e:	fa4a fa02 	asr.w	sl, sl, r2
 8008572:	f1bb 0f00 	cmp.w	fp, #0
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	bfb8      	it	lt
 8008580:	f1ca 0a00 	rsblt	sl, sl, #0
 8008584:	f7f7 fe24 	bl	80001d0 <__aeabi_dsub>
 8008588:	ec41 0b19 	vmov	d9, r0, r1
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	ec51 0b19 	vmov	r0, r1, d9
 8008594:	f7f7 fe1e 	bl	80001d4 <__adddf3>
 8008598:	a37b      	add	r3, pc, #492	; (adr r3, 8008788 <__ieee754_pow+0xa00>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	2000      	movs	r0, #0
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	f7f7 ffcc 	bl	8000540 <__aeabi_dmul>
 80085a8:	ec53 2b19 	vmov	r2, r3, d9
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 fe0c 	bl	80001d0 <__aeabi_dsub>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f7 fe06 	bl	80001d0 <__aeabi_dsub>
 80085c4:	a372      	add	r3, pc, #456	; (adr r3, 8008790 <__ieee754_pow+0xa08>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 ffb9 	bl	8000540 <__aeabi_dmul>
 80085ce:	a372      	add	r3, pc, #456	; (adr r3, 8008798 <__ieee754_pow+0xa10>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	4620      	mov	r0, r4
 80085da:	4629      	mov	r1, r5
 80085dc:	f7f7 ffb0 	bl	8000540 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f7 fdf4 	bl	80001d4 <__adddf3>
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7f7 fdec 	bl	80001d4 <__adddf3>
 80085fc:	4632      	mov	r2, r6
 80085fe:	463b      	mov	r3, r7
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	f7f7 fde4 	bl	80001d0 <__aeabi_dsub>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f7 fdde 	bl	80001d0 <__aeabi_dsub>
 8008614:	4642      	mov	r2, r8
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	464b      	mov	r3, r9
 800861c:	4640      	mov	r0, r8
 800861e:	4649      	mov	r1, r9
 8008620:	f7f7 ff8e 	bl	8000540 <__aeabi_dmul>
 8008624:	a35e      	add	r3, pc, #376	; (adr r3, 80087a0 <__ieee754_pow+0xa18>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	4604      	mov	r4, r0
 800862c:	460d      	mov	r5, r1
 800862e:	f7f7 ff87 	bl	8000540 <__aeabi_dmul>
 8008632:	a35d      	add	r3, pc, #372	; (adr r3, 80087a8 <__ieee754_pow+0xa20>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fdca 	bl	80001d0 <__aeabi_dsub>
 800863c:	4622      	mov	r2, r4
 800863e:	462b      	mov	r3, r5
 8008640:	f7f7 ff7e 	bl	8000540 <__aeabi_dmul>
 8008644:	a35a      	add	r3, pc, #360	; (adr r3, 80087b0 <__ieee754_pow+0xa28>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fdc3 	bl	80001d4 <__adddf3>
 800864e:	4622      	mov	r2, r4
 8008650:	462b      	mov	r3, r5
 8008652:	f7f7 ff75 	bl	8000540 <__aeabi_dmul>
 8008656:	a358      	add	r3, pc, #352	; (adr r3, 80087b8 <__ieee754_pow+0xa30>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 fdb8 	bl	80001d0 <__aeabi_dsub>
 8008660:	4622      	mov	r2, r4
 8008662:	462b      	mov	r3, r5
 8008664:	f7f7 ff6c 	bl	8000540 <__aeabi_dmul>
 8008668:	a355      	add	r3, pc, #340	; (adr r3, 80087c0 <__ieee754_pow+0xa38>)
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f7f7 fdb1 	bl	80001d4 <__adddf3>
 8008672:	4622      	mov	r2, r4
 8008674:	462b      	mov	r3, r5
 8008676:	f7f7 ff63 	bl	8000540 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	f7f7 fda5 	bl	80001d0 <__aeabi_dsub>
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f7f7 ff55 	bl	8000540 <__aeabi_dmul>
 8008696:	2200      	movs	r2, #0
 8008698:	ec41 0b19 	vmov	d9, r0, r1
 800869c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086a0:	4620      	mov	r0, r4
 80086a2:	4629      	mov	r1, r5
 80086a4:	f7f7 fd94 	bl	80001d0 <__aeabi_dsub>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	ec51 0b19 	vmov	r0, r1, d9
 80086b0:	f7f8 f870 	bl	8000794 <__aeabi_ddiv>
 80086b4:	4632      	mov	r2, r6
 80086b6:	4604      	mov	r4, r0
 80086b8:	460d      	mov	r5, r1
 80086ba:	463b      	mov	r3, r7
 80086bc:	4640      	mov	r0, r8
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f7 ff3e 	bl	8000540 <__aeabi_dmul>
 80086c4:	4632      	mov	r2, r6
 80086c6:	463b      	mov	r3, r7
 80086c8:	f7f7 fd84 	bl	80001d4 <__adddf3>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f7 fd7c 	bl	80001d0 <__aeabi_dsub>
 80086d8:	4642      	mov	r2, r8
 80086da:	464b      	mov	r3, r9
 80086dc:	f7f7 fd78 	bl	80001d0 <__aeabi_dsub>
 80086e0:	460b      	mov	r3, r1
 80086e2:	4602      	mov	r2, r0
 80086e4:	493a      	ldr	r1, [pc, #232]	; (80087d0 <__ieee754_pow+0xa48>)
 80086e6:	2000      	movs	r0, #0
 80086e8:	f7f7 fd72 	bl	80001d0 <__aeabi_dsub>
 80086ec:	ec41 0b10 	vmov	d0, r0, r1
 80086f0:	ee10 3a90 	vmov	r3, s1
 80086f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80086f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fc:	da2b      	bge.n	8008756 <__ieee754_pow+0x9ce>
 80086fe:	4650      	mov	r0, sl
 8008700:	f001 f8ce 	bl	80098a0 <scalbn>
 8008704:	ec51 0b10 	vmov	r0, r1, d0
 8008708:	ec53 2b18 	vmov	r2, r3, d8
 800870c:	f7ff bbed 	b.w	8007eea <__ieee754_pow+0x162>
 8008710:	4b30      	ldr	r3, [pc, #192]	; (80087d4 <__ieee754_pow+0xa4c>)
 8008712:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008716:	429e      	cmp	r6, r3
 8008718:	f77f af0c 	ble.w	8008534 <__ieee754_pow+0x7ac>
 800871c:	4b2e      	ldr	r3, [pc, #184]	; (80087d8 <__ieee754_pow+0xa50>)
 800871e:	440b      	add	r3, r1
 8008720:	4303      	orrs	r3, r0
 8008722:	d009      	beq.n	8008738 <__ieee754_pow+0x9b0>
 8008724:	ec51 0b18 	vmov	r0, r1, d8
 8008728:	2200      	movs	r2, #0
 800872a:	2300      	movs	r3, #0
 800872c:	f7f8 f97a 	bl	8000a24 <__aeabi_dcmplt>
 8008730:	3800      	subs	r0, #0
 8008732:	bf18      	it	ne
 8008734:	2001      	movne	r0, #1
 8008736:	e447      	b.n	8007fc8 <__ieee754_pow+0x240>
 8008738:	4622      	mov	r2, r4
 800873a:	462b      	mov	r3, r5
 800873c:	f7f7 fd48 	bl	80001d0 <__aeabi_dsub>
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	f7f8 f982 	bl	8000a4c <__aeabi_dcmpge>
 8008748:	2800      	cmp	r0, #0
 800874a:	f43f aef3 	beq.w	8008534 <__ieee754_pow+0x7ac>
 800874e:	e7e9      	b.n	8008724 <__ieee754_pow+0x99c>
 8008750:	f04f 0a00 	mov.w	sl, #0
 8008754:	e71a      	b.n	800858c <__ieee754_pow+0x804>
 8008756:	ec51 0b10 	vmov	r0, r1, d0
 800875a:	4619      	mov	r1, r3
 800875c:	e7d4      	b.n	8008708 <__ieee754_pow+0x980>
 800875e:	491c      	ldr	r1, [pc, #112]	; (80087d0 <__ieee754_pow+0xa48>)
 8008760:	2000      	movs	r0, #0
 8008762:	f7ff bb30 	b.w	8007dc6 <__ieee754_pow+0x3e>
 8008766:	2000      	movs	r0, #0
 8008768:	2100      	movs	r1, #0
 800876a:	f7ff bb2c 	b.w	8007dc6 <__ieee754_pow+0x3e>
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7ff bb28 	b.w	8007dc6 <__ieee754_pow+0x3e>
 8008776:	9204      	str	r2, [sp, #16]
 8008778:	f7ff bb7a 	b.w	8007e70 <__ieee754_pow+0xe8>
 800877c:	2300      	movs	r3, #0
 800877e:	f7ff bb64 	b.w	8007e4a <__ieee754_pow+0xc2>
 8008782:	bf00      	nop
 8008784:	f3af 8000 	nop.w
 8008788:	00000000 	.word	0x00000000
 800878c:	3fe62e43 	.word	0x3fe62e43
 8008790:	fefa39ef 	.word	0xfefa39ef
 8008794:	3fe62e42 	.word	0x3fe62e42
 8008798:	0ca86c39 	.word	0x0ca86c39
 800879c:	be205c61 	.word	0xbe205c61
 80087a0:	72bea4d0 	.word	0x72bea4d0
 80087a4:	3e663769 	.word	0x3e663769
 80087a8:	c5d26bf1 	.word	0xc5d26bf1
 80087ac:	3ebbbd41 	.word	0x3ebbbd41
 80087b0:	af25de2c 	.word	0xaf25de2c
 80087b4:	3f11566a 	.word	0x3f11566a
 80087b8:	16bebd93 	.word	0x16bebd93
 80087bc:	3f66c16c 	.word	0x3f66c16c
 80087c0:	5555553e 	.word	0x5555553e
 80087c4:	3fc55555 	.word	0x3fc55555
 80087c8:	3fe00000 	.word	0x3fe00000
 80087cc:	000fffff 	.word	0x000fffff
 80087d0:	3ff00000 	.word	0x3ff00000
 80087d4:	4090cbff 	.word	0x4090cbff
 80087d8:	3f6f3400 	.word	0x3f6f3400
 80087dc:	652b82fe 	.word	0x652b82fe
 80087e0:	3c971547 	.word	0x3c971547
 80087e4:	00000000 	.word	0x00000000

080087e8 <__ieee754_rem_pio2>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	ed2d 8b02 	vpush	{d8}
 80087f0:	ec55 4b10 	vmov	r4, r5, d0
 80087f4:	4bca      	ldr	r3, [pc, #808]	; (8008b20 <__ieee754_rem_pio2+0x338>)
 80087f6:	b08b      	sub	sp, #44	; 0x2c
 80087f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80087fc:	4598      	cmp	r8, r3
 80087fe:	4682      	mov	sl, r0
 8008800:	9502      	str	r5, [sp, #8]
 8008802:	dc08      	bgt.n	8008816 <__ieee754_rem_pio2+0x2e>
 8008804:	2200      	movs	r2, #0
 8008806:	2300      	movs	r3, #0
 8008808:	ed80 0b00 	vstr	d0, [r0]
 800880c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008810:	f04f 0b00 	mov.w	fp, #0
 8008814:	e028      	b.n	8008868 <__ieee754_rem_pio2+0x80>
 8008816:	4bc3      	ldr	r3, [pc, #780]	; (8008b24 <__ieee754_rem_pio2+0x33c>)
 8008818:	4598      	cmp	r8, r3
 800881a:	dc78      	bgt.n	800890e <__ieee754_rem_pio2+0x126>
 800881c:	9b02      	ldr	r3, [sp, #8]
 800881e:	4ec2      	ldr	r6, [pc, #776]	; (8008b28 <__ieee754_rem_pio2+0x340>)
 8008820:	2b00      	cmp	r3, #0
 8008822:	ee10 0a10 	vmov	r0, s0
 8008826:	a3b0      	add	r3, pc, #704	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x300>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	4629      	mov	r1, r5
 800882e:	dd39      	ble.n	80088a4 <__ieee754_rem_pio2+0xbc>
 8008830:	f7f7 fcce 	bl	80001d0 <__aeabi_dsub>
 8008834:	45b0      	cmp	r8, r6
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	d01b      	beq.n	8008874 <__ieee754_rem_pio2+0x8c>
 800883c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x308>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fcc5 	bl	80001d0 <__aeabi_dsub>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	e9ca 2300 	strd	r2, r3, [sl]
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f7 fcbd 	bl	80001d0 <__aeabi_dsub>
 8008856:	a3a6      	add	r3, pc, #664	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x308>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	f7f7 fcb8 	bl	80001d0 <__aeabi_dsub>
 8008860:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008864:	f04f 0b01 	mov.w	fp, #1
 8008868:	4658      	mov	r0, fp
 800886a:	b00b      	add	sp, #44	; 0x2c
 800886c:	ecbd 8b02 	vpop	{d8}
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008874:	a3a0      	add	r3, pc, #640	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x310>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f7f7 fca9 	bl	80001d0 <__aeabi_dsub>
 800887e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x318>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	f7f7 fca2 	bl	80001d0 <__aeabi_dsub>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	e9ca 2300 	strd	r2, r3, [sl]
 8008894:	4620      	mov	r0, r4
 8008896:	4629      	mov	r1, r5
 8008898:	f7f7 fc9a 	bl	80001d0 <__aeabi_dsub>
 800889c:	a398      	add	r3, pc, #608	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x318>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	e7db      	b.n	800885c <__ieee754_rem_pio2+0x74>
 80088a4:	f7f7 fc96 	bl	80001d4 <__adddf3>
 80088a8:	45b0      	cmp	r8, r6
 80088aa:	4604      	mov	r4, r0
 80088ac:	460d      	mov	r5, r1
 80088ae:	d016      	beq.n	80088de <__ieee754_rem_pio2+0xf6>
 80088b0:	a38f      	add	r3, pc, #572	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x308>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fc8d 	bl	80001d4 <__adddf3>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	e9ca 2300 	strd	r2, r3, [sl]
 80088c2:	4620      	mov	r0, r4
 80088c4:	4629      	mov	r1, r5
 80088c6:	f7f7 fc83 	bl	80001d0 <__aeabi_dsub>
 80088ca:	a389      	add	r3, pc, #548	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x308>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fc80 	bl	80001d4 <__adddf3>
 80088d4:	f04f 3bff 	mov.w	fp, #4294967295
 80088d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088dc:	e7c4      	b.n	8008868 <__ieee754_rem_pio2+0x80>
 80088de:	a386      	add	r3, pc, #536	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x310>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fc76 	bl	80001d4 <__adddf3>
 80088e8:	a385      	add	r3, pc, #532	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x318>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	f7f7 fc6f 	bl	80001d4 <__adddf3>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9ca 2300 	strd	r2, r3, [sl]
 80088fe:	4620      	mov	r0, r4
 8008900:	4629      	mov	r1, r5
 8008902:	f7f7 fc65 	bl	80001d0 <__aeabi_dsub>
 8008906:	a37e      	add	r3, pc, #504	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x318>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	e7e0      	b.n	80088d0 <__ieee754_rem_pio2+0xe8>
 800890e:	4b87      	ldr	r3, [pc, #540]	; (8008b2c <__ieee754_rem_pio2+0x344>)
 8008910:	4598      	cmp	r8, r3
 8008912:	f300 80d9 	bgt.w	8008ac8 <__ieee754_rem_pio2+0x2e0>
 8008916:	f000 ff2d 	bl	8009774 <fabs>
 800891a:	ec55 4b10 	vmov	r4, r5, d0
 800891e:	ee10 0a10 	vmov	r0, s0
 8008922:	a379      	add	r3, pc, #484	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x320>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 fe09 	bl	8000540 <__aeabi_dmul>
 800892e:	4b80      	ldr	r3, [pc, #512]	; (8008b30 <__ieee754_rem_pio2+0x348>)
 8008930:	2200      	movs	r2, #0
 8008932:	f7f7 fc4f 	bl	80001d4 <__adddf3>
 8008936:	f7f8 f8b3 	bl	8000aa0 <__aeabi_d2iz>
 800893a:	4683      	mov	fp, r0
 800893c:	f7f7 fd96 	bl	800046c <__aeabi_i2d>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	ec43 2b18 	vmov	d8, r2, r3
 8008948:	a367      	add	r3, pc, #412	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x300>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fdf7 	bl	8000540 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f7 fc39 	bl	80001d0 <__aeabi_dsub>
 800895e:	a364      	add	r3, pc, #400	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x308>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	4606      	mov	r6, r0
 8008966:	460f      	mov	r7, r1
 8008968:	ec51 0b18 	vmov	r0, r1, d8
 800896c:	f7f7 fde8 	bl	8000540 <__aeabi_dmul>
 8008970:	f1bb 0f1f 	cmp.w	fp, #31
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
 8008978:	dc0d      	bgt.n	8008996 <__ieee754_rem_pio2+0x1ae>
 800897a:	4b6e      	ldr	r3, [pc, #440]	; (8008b34 <__ieee754_rem_pio2+0x34c>)
 800897c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008984:	4543      	cmp	r3, r8
 8008986:	d006      	beq.n	8008996 <__ieee754_rem_pio2+0x1ae>
 8008988:	4622      	mov	r2, r4
 800898a:	462b      	mov	r3, r5
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fc1e 	bl	80001d0 <__aeabi_dsub>
 8008994:	e00f      	b.n	80089b6 <__ieee754_rem_pio2+0x1ce>
 8008996:	462b      	mov	r3, r5
 8008998:	4622      	mov	r2, r4
 800899a:	4630      	mov	r0, r6
 800899c:	4639      	mov	r1, r7
 800899e:	f7f7 fc17 	bl	80001d0 <__aeabi_dsub>
 80089a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80089b0:	f1b8 0f10 	cmp.w	r8, #16
 80089b4:	dc02      	bgt.n	80089bc <__ieee754_rem_pio2+0x1d4>
 80089b6:	e9ca 0100 	strd	r0, r1, [sl]
 80089ba:	e039      	b.n	8008a30 <__ieee754_rem_pio2+0x248>
 80089bc:	a34e      	add	r3, pc, #312	; (adr r3, 8008af8 <__ieee754_rem_pio2+0x310>)
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	ec51 0b18 	vmov	r0, r1, d8
 80089c6:	f7f7 fdbb 	bl	8000540 <__aeabi_dmul>
 80089ca:	4604      	mov	r4, r0
 80089cc:	460d      	mov	r5, r1
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f7 fbfb 	bl	80001d0 <__aeabi_dsub>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4680      	mov	r8, r0
 80089e0:	4689      	mov	r9, r1
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 fbf3 	bl	80001d0 <__aeabi_dsub>
 80089ea:	4622      	mov	r2, r4
 80089ec:	462b      	mov	r3, r5
 80089ee:	f7f7 fbef 	bl	80001d0 <__aeabi_dsub>
 80089f2:	a343      	add	r3, pc, #268	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x318>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	4604      	mov	r4, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	ec51 0b18 	vmov	r0, r1, d8
 8008a00:	f7f7 fd9e 	bl	8000540 <__aeabi_dmul>
 8008a04:	4622      	mov	r2, r4
 8008a06:	462b      	mov	r3, r5
 8008a08:	f7f7 fbe2 	bl	80001d0 <__aeabi_dsub>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4604      	mov	r4, r0
 8008a12:	460d      	mov	r5, r1
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	f7f7 fbda 	bl	80001d0 <__aeabi_dsub>
 8008a1c:	9a03      	ldr	r2, [sp, #12]
 8008a1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b31      	cmp	r3, #49	; 0x31
 8008a26:	dc24      	bgt.n	8008a72 <__ieee754_rem_pio2+0x28a>
 8008a28:	e9ca 0100 	strd	r0, r1, [sl]
 8008a2c:	4646      	mov	r6, r8
 8008a2e:	464f      	mov	r7, r9
 8008a30:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a34:	4630      	mov	r0, r6
 8008a36:	4642      	mov	r2, r8
 8008a38:	464b      	mov	r3, r9
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fbc8 	bl	80001d0 <__aeabi_dsub>
 8008a40:	462b      	mov	r3, r5
 8008a42:	4622      	mov	r2, r4
 8008a44:	f7f7 fbc4 	bl	80001d0 <__aeabi_dsub>
 8008a48:	9b02      	ldr	r3, [sp, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a50:	f6bf af0a 	bge.w	8008868 <__ieee754_rem_pio2+0x80>
 8008a54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a58:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a60:	f8ca 8000 	str.w	r8, [sl]
 8008a64:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a68:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a6c:	f1cb 0b00 	rsb	fp, fp, #0
 8008a70:	e6fa      	b.n	8008868 <__ieee754_rem_pio2+0x80>
 8008a72:	a327      	add	r3, pc, #156	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x328>)
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	ec51 0b18 	vmov	r0, r1, d8
 8008a7c:	f7f7 fd60 	bl	8000540 <__aeabi_dmul>
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f7 fba0 	bl	80001d0 <__aeabi_dsub>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	f7f7 fb98 	bl	80001d0 <__aeabi_dsub>
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	f7f7 fb94 	bl	80001d0 <__aeabi_dsub>
 8008aa8:	a31b      	add	r3, pc, #108	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x330>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	4604      	mov	r4, r0
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	ec51 0b18 	vmov	r0, r1, d8
 8008ab6:	f7f7 fd43 	bl	8000540 <__aeabi_dmul>
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	f7f7 fb87 	bl	80001d0 <__aeabi_dsub>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	460d      	mov	r5, r1
 8008ac6:	e75f      	b.n	8008988 <__ieee754_rem_pio2+0x1a0>
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <__ieee754_rem_pio2+0x350>)
 8008aca:	4598      	cmp	r8, r3
 8008acc:	dd36      	ble.n	8008b3c <__ieee754_rem_pio2+0x354>
 8008ace:	ee10 2a10 	vmov	r2, s0
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fb7a 	bl	80001d0 <__aeabi_dsub>
 8008adc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ae0:	e9ca 0100 	strd	r0, r1, [sl]
 8008ae4:	e694      	b.n	8008810 <__ieee754_rem_pio2+0x28>
 8008ae6:	bf00      	nop
 8008ae8:	54400000 	.word	0x54400000
 8008aec:	3ff921fb 	.word	0x3ff921fb
 8008af0:	1a626331 	.word	0x1a626331
 8008af4:	3dd0b461 	.word	0x3dd0b461
 8008af8:	1a600000 	.word	0x1a600000
 8008afc:	3dd0b461 	.word	0x3dd0b461
 8008b00:	2e037073 	.word	0x2e037073
 8008b04:	3ba3198a 	.word	0x3ba3198a
 8008b08:	6dc9c883 	.word	0x6dc9c883
 8008b0c:	3fe45f30 	.word	0x3fe45f30
 8008b10:	2e000000 	.word	0x2e000000
 8008b14:	3ba3198a 	.word	0x3ba3198a
 8008b18:	252049c1 	.word	0x252049c1
 8008b1c:	397b839a 	.word	0x397b839a
 8008b20:	3fe921fb 	.word	0x3fe921fb
 8008b24:	4002d97b 	.word	0x4002d97b
 8008b28:	3ff921fb 	.word	0x3ff921fb
 8008b2c:	413921fb 	.word	0x413921fb
 8008b30:	3fe00000 	.word	0x3fe00000
 8008b34:	08009b38 	.word	0x08009b38
 8008b38:	7fefffff 	.word	0x7fefffff
 8008b3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008b40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008b44:	ee10 0a10 	vmov	r0, s0
 8008b48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008b4c:	ee10 6a10 	vmov	r6, s0
 8008b50:	460f      	mov	r7, r1
 8008b52:	f7f7 ffa5 	bl	8000aa0 <__aeabi_d2iz>
 8008b56:	f7f7 fc89 	bl	800046c <__aeabi_i2d>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b66:	f7f7 fb33 	bl	80001d0 <__aeabi_dsub>
 8008b6a:	4b23      	ldr	r3, [pc, #140]	; (8008bf8 <__ieee754_rem_pio2+0x410>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f7f7 fce7 	bl	8000540 <__aeabi_dmul>
 8008b72:	460f      	mov	r7, r1
 8008b74:	4606      	mov	r6, r0
 8008b76:	f7f7 ff93 	bl	8000aa0 <__aeabi_d2iz>
 8008b7a:	f7f7 fc77 	bl	800046c <__aeabi_i2d>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4630      	mov	r0, r6
 8008b84:	4639      	mov	r1, r7
 8008b86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b8a:	f7f7 fb21 	bl	80001d0 <__aeabi_dsub>
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	; (8008bf8 <__ieee754_rem_pio2+0x410>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7f7 fcd5 	bl	8000540 <__aeabi_dmul>
 8008b96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b9a:	ad04      	add	r5, sp, #16
 8008b9c:	f04f 0803 	mov.w	r8, #3
 8008ba0:	46a9      	mov	r9, r5
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	2700      	movs	r7, #0
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	463b      	mov	r3, r7
 8008baa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008bae:	46c3      	mov	fp, r8
 8008bb0:	3d08      	subs	r5, #8
 8008bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bb6:	f7f7 ff2b 	bl	8000a10 <__aeabi_dcmpeq>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d1f3      	bne.n	8008ba6 <__ieee754_rem_pio2+0x3be>
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <__ieee754_rem_pio2+0x414>)
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	465b      	mov	r3, fp
 8008bca:	4651      	mov	r1, sl
 8008bcc:	4648      	mov	r0, r9
 8008bce:	f000 f993 	bl	8008ef8 <__kernel_rem_pio2>
 8008bd2:	9b02      	ldr	r3, [sp, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	4683      	mov	fp, r0
 8008bd8:	f6bf ae46 	bge.w	8008868 <__ieee754_rem_pio2+0x80>
 8008bdc:	e9da 2100 	ldrd	r2, r1, [sl]
 8008be0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008be4:	e9ca 2300 	strd	r2, r3, [sl]
 8008be8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008bf4:	e73a      	b.n	8008a6c <__ieee754_rem_pio2+0x284>
 8008bf6:	bf00      	nop
 8008bf8:	41700000 	.word	0x41700000
 8008bfc:	08009bb8 	.word	0x08009bb8

08008c00 <__ieee754_sqrt>:
 8008c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	ec55 4b10 	vmov	r4, r5, d0
 8008c08:	4e55      	ldr	r6, [pc, #340]	; (8008d60 <__ieee754_sqrt+0x160>)
 8008c0a:	43ae      	bics	r6, r5
 8008c0c:	ee10 0a10 	vmov	r0, s0
 8008c10:	ee10 3a10 	vmov	r3, s0
 8008c14:	462a      	mov	r2, r5
 8008c16:	4629      	mov	r1, r5
 8008c18:	d110      	bne.n	8008c3c <__ieee754_sqrt+0x3c>
 8008c1a:	ee10 2a10 	vmov	r2, s0
 8008c1e:	462b      	mov	r3, r5
 8008c20:	f7f7 fc8e 	bl	8000540 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4620      	mov	r0, r4
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fad2 	bl	80001d4 <__adddf3>
 8008c30:	4604      	mov	r4, r0
 8008c32:	460d      	mov	r5, r1
 8008c34:	ec45 4b10 	vmov	d0, r4, r5
 8008c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	dc10      	bgt.n	8008c62 <__ieee754_sqrt+0x62>
 8008c40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c44:	4330      	orrs	r0, r6
 8008c46:	d0f5      	beq.n	8008c34 <__ieee754_sqrt+0x34>
 8008c48:	b15d      	cbz	r5, 8008c62 <__ieee754_sqrt+0x62>
 8008c4a:	ee10 2a10 	vmov	r2, s0
 8008c4e:	462b      	mov	r3, r5
 8008c50:	ee10 0a10 	vmov	r0, s0
 8008c54:	f7f7 fabc 	bl	80001d0 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	f7f7 fd9a 	bl	8000794 <__aeabi_ddiv>
 8008c60:	e7e6      	b.n	8008c30 <__ieee754_sqrt+0x30>
 8008c62:	1512      	asrs	r2, r2, #20
 8008c64:	d074      	beq.n	8008d50 <__ieee754_sqrt+0x150>
 8008c66:	07d4      	lsls	r4, r2, #31
 8008c68:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008c6c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c74:	bf5e      	ittt	pl
 8008c76:	0fda      	lsrpl	r2, r3, #31
 8008c78:	005b      	lslpl	r3, r3, #1
 8008c7a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008c7e:	2400      	movs	r4, #0
 8008c80:	0fda      	lsrs	r2, r3, #31
 8008c82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008c86:	107f      	asrs	r7, r7, #1
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	2516      	movs	r5, #22
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008c92:	1886      	adds	r6, r0, r2
 8008c94:	428e      	cmp	r6, r1
 8008c96:	bfde      	ittt	le
 8008c98:	1b89      	suble	r1, r1, r6
 8008c9a:	18b0      	addle	r0, r6, r2
 8008c9c:	18a4      	addle	r4, r4, r2
 8008c9e:	0049      	lsls	r1, r1, #1
 8008ca0:	3d01      	subs	r5, #1
 8008ca2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008ca6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008caa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cae:	d1f0      	bne.n	8008c92 <__ieee754_sqrt+0x92>
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	f04f 0e20 	mov.w	lr, #32
 8008cb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008cba:	4281      	cmp	r1, r0
 8008cbc:	eb06 0c05 	add.w	ip, r6, r5
 8008cc0:	dc02      	bgt.n	8008cc8 <__ieee754_sqrt+0xc8>
 8008cc2:	d113      	bne.n	8008cec <__ieee754_sqrt+0xec>
 8008cc4:	459c      	cmp	ip, r3
 8008cc6:	d811      	bhi.n	8008cec <__ieee754_sqrt+0xec>
 8008cc8:	f1bc 0f00 	cmp.w	ip, #0
 8008ccc:	eb0c 0506 	add.w	r5, ip, r6
 8008cd0:	da43      	bge.n	8008d5a <__ieee754_sqrt+0x15a>
 8008cd2:	2d00      	cmp	r5, #0
 8008cd4:	db41      	blt.n	8008d5a <__ieee754_sqrt+0x15a>
 8008cd6:	f100 0801 	add.w	r8, r0, #1
 8008cda:	1a09      	subs	r1, r1, r0
 8008cdc:	459c      	cmp	ip, r3
 8008cde:	bf88      	it	hi
 8008ce0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008ce4:	eba3 030c 	sub.w	r3, r3, ip
 8008ce8:	4432      	add	r2, r6
 8008cea:	4640      	mov	r0, r8
 8008cec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008cf0:	f1be 0e01 	subs.w	lr, lr, #1
 8008cf4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008cf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cfc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d00:	d1db      	bne.n	8008cba <__ieee754_sqrt+0xba>
 8008d02:	430b      	orrs	r3, r1
 8008d04:	d006      	beq.n	8008d14 <__ieee754_sqrt+0x114>
 8008d06:	1c50      	adds	r0, r2, #1
 8008d08:	bf13      	iteet	ne
 8008d0a:	3201      	addne	r2, #1
 8008d0c:	3401      	addeq	r4, #1
 8008d0e:	4672      	moveq	r2, lr
 8008d10:	f022 0201 	bicne.w	r2, r2, #1
 8008d14:	1063      	asrs	r3, r4, #1
 8008d16:	0852      	lsrs	r2, r2, #1
 8008d18:	07e1      	lsls	r1, r4, #31
 8008d1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d22:	bf48      	it	mi
 8008d24:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008d28:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	e781      	b.n	8008c34 <__ieee754_sqrt+0x34>
 8008d30:	0ad9      	lsrs	r1, r3, #11
 8008d32:	3815      	subs	r0, #21
 8008d34:	055b      	lsls	r3, r3, #21
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d0fa      	beq.n	8008d30 <__ieee754_sqrt+0x130>
 8008d3a:	02cd      	lsls	r5, r1, #11
 8008d3c:	d50a      	bpl.n	8008d54 <__ieee754_sqrt+0x154>
 8008d3e:	f1c2 0420 	rsb	r4, r2, #32
 8008d42:	fa23 f404 	lsr.w	r4, r3, r4
 8008d46:	1e55      	subs	r5, r2, #1
 8008d48:	4093      	lsls	r3, r2
 8008d4a:	4321      	orrs	r1, r4
 8008d4c:	1b42      	subs	r2, r0, r5
 8008d4e:	e78a      	b.n	8008c66 <__ieee754_sqrt+0x66>
 8008d50:	4610      	mov	r0, r2
 8008d52:	e7f0      	b.n	8008d36 <__ieee754_sqrt+0x136>
 8008d54:	0049      	lsls	r1, r1, #1
 8008d56:	3201      	adds	r2, #1
 8008d58:	e7ef      	b.n	8008d3a <__ieee754_sqrt+0x13a>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	e7bd      	b.n	8008cda <__ieee754_sqrt+0xda>
 8008d5e:	bf00      	nop
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	00000000 	.word	0x00000000

08008d68 <__kernel_cos>:
 8008d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	ec57 6b10 	vmov	r6, r7, d0
 8008d70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008d74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008d78:	ed8d 1b00 	vstr	d1, [sp]
 8008d7c:	da07      	bge.n	8008d8e <__kernel_cos+0x26>
 8008d7e:	ee10 0a10 	vmov	r0, s0
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fe8c 	bl	8000aa0 <__aeabi_d2iz>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f000 8088 	beq.w	8008e9e <__kernel_cos+0x136>
 8008d8e:	4632      	mov	r2, r6
 8008d90:	463b      	mov	r3, r7
 8008d92:	4630      	mov	r0, r6
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f7 fbd3 	bl	8000540 <__aeabi_dmul>
 8008d9a:	4b51      	ldr	r3, [pc, #324]	; (8008ee0 <__kernel_cos+0x178>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	460d      	mov	r5, r1
 8008da2:	f7f7 fbcd 	bl	8000540 <__aeabi_dmul>
 8008da6:	a340      	add	r3, pc, #256	; (adr r3, 8008ea8 <__kernel_cos+0x140>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	4682      	mov	sl, r0
 8008dae:	468b      	mov	fp, r1
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fbc4 	bl	8000540 <__aeabi_dmul>
 8008db8:	a33d      	add	r3, pc, #244	; (adr r3, 8008eb0 <__kernel_cos+0x148>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fa09 	bl	80001d4 <__adddf3>
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	f7f7 fbbb 	bl	8000540 <__aeabi_dmul>
 8008dca:	a33b      	add	r3, pc, #236	; (adr r3, 8008eb8 <__kernel_cos+0x150>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 f9fe 	bl	80001d0 <__aeabi_dsub>
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	f7f7 fbb2 	bl	8000540 <__aeabi_dmul>
 8008ddc:	a338      	add	r3, pc, #224	; (adr r3, 8008ec0 <__kernel_cos+0x158>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 f9f7 	bl	80001d4 <__adddf3>
 8008de6:	4622      	mov	r2, r4
 8008de8:	462b      	mov	r3, r5
 8008dea:	f7f7 fba9 	bl	8000540 <__aeabi_dmul>
 8008dee:	a336      	add	r3, pc, #216	; (adr r3, 8008ec8 <__kernel_cos+0x160>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 f9ec 	bl	80001d0 <__aeabi_dsub>
 8008df8:	4622      	mov	r2, r4
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	f7f7 fba0 	bl	8000540 <__aeabi_dmul>
 8008e00:	a333      	add	r3, pc, #204	; (adr r3, 8008ed0 <__kernel_cos+0x168>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 f9e5 	bl	80001d4 <__adddf3>
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	f7f7 fb97 	bl	8000540 <__aeabi_dmul>
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	f7f7 fb93 	bl	8000540 <__aeabi_dmul>
 8008e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e1e:	4604      	mov	r4, r0
 8008e20:	460d      	mov	r5, r1
 8008e22:	4630      	mov	r0, r6
 8008e24:	4639      	mov	r1, r7
 8008e26:	f7f7 fb8b 	bl	8000540 <__aeabi_dmul>
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4620      	mov	r0, r4
 8008e32:	f7f7 f9cd 	bl	80001d0 <__aeabi_dsub>
 8008e36:	4b2b      	ldr	r3, [pc, #172]	; (8008ee4 <__kernel_cos+0x17c>)
 8008e38:	4598      	cmp	r8, r3
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	dc10      	bgt.n	8008e62 <__kernel_cos+0xfa>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4650      	mov	r0, sl
 8008e46:	4659      	mov	r1, fp
 8008e48:	f7f7 f9c2 	bl	80001d0 <__aeabi_dsub>
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4926      	ldr	r1, [pc, #152]	; (8008ee8 <__kernel_cos+0x180>)
 8008e50:	4602      	mov	r2, r0
 8008e52:	2000      	movs	r0, #0
 8008e54:	f7f7 f9bc 	bl	80001d0 <__aeabi_dsub>
 8008e58:	ec41 0b10 	vmov	d0, r0, r1
 8008e5c:	b003      	add	sp, #12
 8008e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e62:	4b22      	ldr	r3, [pc, #136]	; (8008eec <__kernel_cos+0x184>)
 8008e64:	4920      	ldr	r1, [pc, #128]	; (8008ee8 <__kernel_cos+0x180>)
 8008e66:	4598      	cmp	r8, r3
 8008e68:	bfcc      	ite	gt
 8008e6a:	4d21      	ldrgt	r5, [pc, #132]	; (8008ef0 <__kernel_cos+0x188>)
 8008e6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008e70:	2400      	movs	r4, #0
 8008e72:	4622      	mov	r2, r4
 8008e74:	462b      	mov	r3, r5
 8008e76:	2000      	movs	r0, #0
 8008e78:	f7f7 f9aa 	bl	80001d0 <__aeabi_dsub>
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4689      	mov	r9, r1
 8008e82:	462b      	mov	r3, r5
 8008e84:	4650      	mov	r0, sl
 8008e86:	4659      	mov	r1, fp
 8008e88:	f7f7 f9a2 	bl	80001d0 <__aeabi_dsub>
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	463b      	mov	r3, r7
 8008e90:	f7f7 f99e 	bl	80001d0 <__aeabi_dsub>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	e7da      	b.n	8008e54 <__kernel_cos+0xec>
 8008e9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008ed8 <__kernel_cos+0x170>
 8008ea2:	e7db      	b.n	8008e5c <__kernel_cos+0xf4>
 8008ea4:	f3af 8000 	nop.w
 8008ea8:	be8838d4 	.word	0xbe8838d4
 8008eac:	bda8fae9 	.word	0xbda8fae9
 8008eb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008eb4:	3e21ee9e 	.word	0x3e21ee9e
 8008eb8:	809c52ad 	.word	0x809c52ad
 8008ebc:	3e927e4f 	.word	0x3e927e4f
 8008ec0:	19cb1590 	.word	0x19cb1590
 8008ec4:	3efa01a0 	.word	0x3efa01a0
 8008ec8:	16c15177 	.word	0x16c15177
 8008ecc:	3f56c16c 	.word	0x3f56c16c
 8008ed0:	5555554c 	.word	0x5555554c
 8008ed4:	3fa55555 	.word	0x3fa55555
 8008ed8:	00000000 	.word	0x00000000
 8008edc:	3ff00000 	.word	0x3ff00000
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	3fd33332 	.word	0x3fd33332
 8008ee8:	3ff00000 	.word	0x3ff00000
 8008eec:	3fe90000 	.word	0x3fe90000
 8008ef0:	3fd20000 	.word	0x3fd20000
 8008ef4:	00000000 	.word	0x00000000

08008ef8 <__kernel_rem_pio2>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	ed2d 8b02 	vpush	{d8}
 8008f00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008f04:	f112 0f14 	cmn.w	r2, #20
 8008f08:	9308      	str	r3, [sp, #32]
 8008f0a:	9101      	str	r1, [sp, #4]
 8008f0c:	4bc4      	ldr	r3, [pc, #784]	; (8009220 <__kernel_rem_pio2+0x328>)
 8008f0e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008f10:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f16:	9302      	str	r3, [sp, #8]
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f1e:	bfa8      	it	ge
 8008f20:	1ed4      	subge	r4, r2, #3
 8008f22:	9306      	str	r3, [sp, #24]
 8008f24:	bfb2      	itee	lt
 8008f26:	2400      	movlt	r4, #0
 8008f28:	2318      	movge	r3, #24
 8008f2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f2e:	f06f 0317 	mvn.w	r3, #23
 8008f32:	fb04 3303 	mla	r3, r4, r3, r3
 8008f36:	eb03 0a02 	add.w	sl, r3, r2
 8008f3a:	9b02      	ldr	r3, [sp, #8]
 8008f3c:	9a06      	ldr	r2, [sp, #24]
 8008f3e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009210 <__kernel_rem_pio2+0x318>
 8008f42:	eb03 0802 	add.w	r8, r3, r2
 8008f46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008f48:	1aa7      	subs	r7, r4, r2
 8008f4a:	ae22      	add	r6, sp, #136	; 0x88
 8008f4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f50:	2500      	movs	r5, #0
 8008f52:	4545      	cmp	r5, r8
 8008f54:	dd13      	ble.n	8008f7e <__kernel_rem_pio2+0x86>
 8008f56:	9b08      	ldr	r3, [sp, #32]
 8008f58:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009210 <__kernel_rem_pio2+0x318>
 8008f5c:	aa22      	add	r2, sp, #136	; 0x88
 8008f5e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	9b02      	ldr	r3, [sp, #8]
 8008f6c:	4598      	cmp	r8, r3
 8008f6e:	dc2f      	bgt.n	8008fd0 <__kernel_rem_pio2+0xd8>
 8008f70:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008f74:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008f78:	462f      	mov	r7, r5
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	e01b      	b.n	8008fb6 <__kernel_rem_pio2+0xbe>
 8008f7e:	42ef      	cmn	r7, r5
 8008f80:	d407      	bmi.n	8008f92 <__kernel_rem_pio2+0x9a>
 8008f82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f86:	f7f7 fa71 	bl	800046c <__aeabi_i2d>
 8008f8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f8e:	3501      	adds	r5, #1
 8008f90:	e7df      	b.n	8008f52 <__kernel_rem_pio2+0x5a>
 8008f92:	ec51 0b18 	vmov	r0, r1, d8
 8008f96:	e7f8      	b.n	8008f8a <__kernel_rem_pio2+0x92>
 8008f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008fa0:	f7f7 face 	bl	8000540 <__aeabi_dmul>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fac:	f7f7 f912 	bl	80001d4 <__adddf3>
 8008fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fb4:	3601      	adds	r6, #1
 8008fb6:	9b06      	ldr	r3, [sp, #24]
 8008fb8:	429e      	cmp	r6, r3
 8008fba:	f1a7 0708 	sub.w	r7, r7, #8
 8008fbe:	ddeb      	ble.n	8008f98 <__kernel_rem_pio2+0xa0>
 8008fc0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008fc4:	f108 0801 	add.w	r8, r8, #1
 8008fc8:	ecab 7b02 	vstmia	fp!, {d7}
 8008fcc:	3508      	adds	r5, #8
 8008fce:	e7cc      	b.n	8008f6a <__kernel_rem_pio2+0x72>
 8008fd0:	9b02      	ldr	r3, [sp, #8]
 8008fd2:	aa0e      	add	r2, sp, #56	; 0x38
 8008fd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fd8:	930d      	str	r3, [sp, #52]	; 0x34
 8008fda:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008fdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008fe0:	9c02      	ldr	r4, [sp, #8]
 8008fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe4:	00e3      	lsls	r3, r4, #3
 8008fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fe8:	ab9a      	add	r3, sp, #616	; 0x268
 8008fea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008ff2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008ff6:	ab72      	add	r3, sp, #456	; 0x1c8
 8008ff8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008ffc:	46c3      	mov	fp, r8
 8008ffe:	46a1      	mov	r9, r4
 8009000:	f1b9 0f00 	cmp.w	r9, #0
 8009004:	f1a5 0508 	sub.w	r5, r5, #8
 8009008:	dc77      	bgt.n	80090fa <__kernel_rem_pio2+0x202>
 800900a:	ec47 6b10 	vmov	d0, r6, r7
 800900e:	4650      	mov	r0, sl
 8009010:	f000 fc46 	bl	80098a0 <scalbn>
 8009014:	ec57 6b10 	vmov	r6, r7, d0
 8009018:	2200      	movs	r2, #0
 800901a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800901e:	ee10 0a10 	vmov	r0, s0
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 fa8c 	bl	8000540 <__aeabi_dmul>
 8009028:	ec41 0b10 	vmov	d0, r0, r1
 800902c:	f000 fbb8 	bl	80097a0 <floor>
 8009030:	4b7c      	ldr	r3, [pc, #496]	; (8009224 <__kernel_rem_pio2+0x32c>)
 8009032:	ec51 0b10 	vmov	r0, r1, d0
 8009036:	2200      	movs	r2, #0
 8009038:	f7f7 fa82 	bl	8000540 <__aeabi_dmul>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 f8c4 	bl	80001d0 <__aeabi_dsub>
 8009048:	460f      	mov	r7, r1
 800904a:	4606      	mov	r6, r0
 800904c:	f7f7 fd28 	bl	8000aa0 <__aeabi_d2iz>
 8009050:	9004      	str	r0, [sp, #16]
 8009052:	f7f7 fa0b 	bl	800046c <__aeabi_i2d>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	f7f7 f8b7 	bl	80001d0 <__aeabi_dsub>
 8009062:	f1ba 0f00 	cmp.w	sl, #0
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	dd6d      	ble.n	8009148 <__kernel_rem_pio2+0x250>
 800906c:	1e62      	subs	r2, r4, #1
 800906e:	ab0e      	add	r3, sp, #56	; 0x38
 8009070:	9d04      	ldr	r5, [sp, #16]
 8009072:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009076:	f1ca 0118 	rsb	r1, sl, #24
 800907a:	fa40 f301 	asr.w	r3, r0, r1
 800907e:	441d      	add	r5, r3
 8009080:	408b      	lsls	r3, r1
 8009082:	1ac0      	subs	r0, r0, r3
 8009084:	ab0e      	add	r3, sp, #56	; 0x38
 8009086:	9504      	str	r5, [sp, #16]
 8009088:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800908c:	f1ca 0317 	rsb	r3, sl, #23
 8009090:	fa40 fb03 	asr.w	fp, r0, r3
 8009094:	f1bb 0f00 	cmp.w	fp, #0
 8009098:	dd65      	ble.n	8009166 <__kernel_rem_pio2+0x26e>
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	2200      	movs	r2, #0
 800909e:	3301      	adds	r3, #1
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	4615      	mov	r5, r2
 80090a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090a8:	4294      	cmp	r4, r2
 80090aa:	f300 809c 	bgt.w	80091e6 <__kernel_rem_pio2+0x2ee>
 80090ae:	f1ba 0f00 	cmp.w	sl, #0
 80090b2:	dd07      	ble.n	80090c4 <__kernel_rem_pio2+0x1cc>
 80090b4:	f1ba 0f01 	cmp.w	sl, #1
 80090b8:	f000 80c0 	beq.w	800923c <__kernel_rem_pio2+0x344>
 80090bc:	f1ba 0f02 	cmp.w	sl, #2
 80090c0:	f000 80c6 	beq.w	8009250 <__kernel_rem_pio2+0x358>
 80090c4:	f1bb 0f02 	cmp.w	fp, #2
 80090c8:	d14d      	bne.n	8009166 <__kernel_rem_pio2+0x26e>
 80090ca:	4632      	mov	r2, r6
 80090cc:	463b      	mov	r3, r7
 80090ce:	4956      	ldr	r1, [pc, #344]	; (8009228 <__kernel_rem_pio2+0x330>)
 80090d0:	2000      	movs	r0, #0
 80090d2:	f7f7 f87d 	bl	80001d0 <__aeabi_dsub>
 80090d6:	4606      	mov	r6, r0
 80090d8:	460f      	mov	r7, r1
 80090da:	2d00      	cmp	r5, #0
 80090dc:	d043      	beq.n	8009166 <__kernel_rem_pio2+0x26e>
 80090de:	4650      	mov	r0, sl
 80090e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009218 <__kernel_rem_pio2+0x320>
 80090e4:	f000 fbdc 	bl	80098a0 <scalbn>
 80090e8:	4630      	mov	r0, r6
 80090ea:	4639      	mov	r1, r7
 80090ec:	ec53 2b10 	vmov	r2, r3, d0
 80090f0:	f7f7 f86e 	bl	80001d0 <__aeabi_dsub>
 80090f4:	4606      	mov	r6, r0
 80090f6:	460f      	mov	r7, r1
 80090f8:	e035      	b.n	8009166 <__kernel_rem_pio2+0x26e>
 80090fa:	4b4c      	ldr	r3, [pc, #304]	; (800922c <__kernel_rem_pio2+0x334>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 fa1d 	bl	8000540 <__aeabi_dmul>
 8009106:	f7f7 fccb 	bl	8000aa0 <__aeabi_d2iz>
 800910a:	f7f7 f9af 	bl	800046c <__aeabi_i2d>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	ec43 2b18 	vmov	d8, r2, r3
 8009116:	4b46      	ldr	r3, [pc, #280]	; (8009230 <__kernel_rem_pio2+0x338>)
 8009118:	2200      	movs	r2, #0
 800911a:	f7f7 fa11 	bl	8000540 <__aeabi_dmul>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4630      	mov	r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	f7f7 f853 	bl	80001d0 <__aeabi_dsub>
 800912a:	f7f7 fcb9 	bl	8000aa0 <__aeabi_d2iz>
 800912e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009132:	f84b 0b04 	str.w	r0, [fp], #4
 8009136:	ec51 0b18 	vmov	r0, r1, d8
 800913a:	f7f7 f84b 	bl	80001d4 <__adddf3>
 800913e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009142:	4606      	mov	r6, r0
 8009144:	460f      	mov	r7, r1
 8009146:	e75b      	b.n	8009000 <__kernel_rem_pio2+0x108>
 8009148:	d106      	bne.n	8009158 <__kernel_rem_pio2+0x260>
 800914a:	1e63      	subs	r3, r4, #1
 800914c:	aa0e      	add	r2, sp, #56	; 0x38
 800914e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009152:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009156:	e79d      	b.n	8009094 <__kernel_rem_pio2+0x19c>
 8009158:	4b36      	ldr	r3, [pc, #216]	; (8009234 <__kernel_rem_pio2+0x33c>)
 800915a:	2200      	movs	r2, #0
 800915c:	f7f7 fc76 	bl	8000a4c <__aeabi_dcmpge>
 8009160:	2800      	cmp	r0, #0
 8009162:	d13d      	bne.n	80091e0 <__kernel_rem_pio2+0x2e8>
 8009164:	4683      	mov	fp, r0
 8009166:	2200      	movs	r2, #0
 8009168:	2300      	movs	r3, #0
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	f7f7 fc4f 	bl	8000a10 <__aeabi_dcmpeq>
 8009172:	2800      	cmp	r0, #0
 8009174:	f000 80c0 	beq.w	80092f8 <__kernel_rem_pio2+0x400>
 8009178:	1e65      	subs	r5, r4, #1
 800917a:	462b      	mov	r3, r5
 800917c:	2200      	movs	r2, #0
 800917e:	9902      	ldr	r1, [sp, #8]
 8009180:	428b      	cmp	r3, r1
 8009182:	da6c      	bge.n	800925e <__kernel_rem_pio2+0x366>
 8009184:	2a00      	cmp	r2, #0
 8009186:	f000 8089 	beq.w	800929c <__kernel_rem_pio2+0x3a4>
 800918a:	ab0e      	add	r3, sp, #56	; 0x38
 800918c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009190:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80ad 	beq.w	80092f4 <__kernel_rem_pio2+0x3fc>
 800919a:	4650      	mov	r0, sl
 800919c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009218 <__kernel_rem_pio2+0x320>
 80091a0:	f000 fb7e 	bl	80098a0 <scalbn>
 80091a4:	ab9a      	add	r3, sp, #616	; 0x268
 80091a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80091aa:	ec57 6b10 	vmov	r6, r7, d0
 80091ae:	00ec      	lsls	r4, r5, #3
 80091b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80091b4:	46aa      	mov	sl, r5
 80091b6:	f1ba 0f00 	cmp.w	sl, #0
 80091ba:	f280 80d6 	bge.w	800936a <__kernel_rem_pio2+0x472>
 80091be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009210 <__kernel_rem_pio2+0x318>
 80091c2:	462e      	mov	r6, r5
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	f2c0 8104 	blt.w	80093d2 <__kernel_rem_pio2+0x4da>
 80091ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80091cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80091d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009238 <__kernel_rem_pio2+0x340>
 80091d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80091d8:	f04f 0800 	mov.w	r8, #0
 80091dc:	1baf      	subs	r7, r5, r6
 80091de:	e0ea      	b.n	80093b6 <__kernel_rem_pio2+0x4be>
 80091e0:	f04f 0b02 	mov.w	fp, #2
 80091e4:	e759      	b.n	800909a <__kernel_rem_pio2+0x1a2>
 80091e6:	f8d8 3000 	ldr.w	r3, [r8]
 80091ea:	b955      	cbnz	r5, 8009202 <__kernel_rem_pio2+0x30a>
 80091ec:	b123      	cbz	r3, 80091f8 <__kernel_rem_pio2+0x300>
 80091ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80091f2:	f8c8 3000 	str.w	r3, [r8]
 80091f6:	2301      	movs	r3, #1
 80091f8:	3201      	adds	r2, #1
 80091fa:	f108 0804 	add.w	r8, r8, #4
 80091fe:	461d      	mov	r5, r3
 8009200:	e752      	b.n	80090a8 <__kernel_rem_pio2+0x1b0>
 8009202:	1acb      	subs	r3, r1, r3
 8009204:	f8c8 3000 	str.w	r3, [r8]
 8009208:	462b      	mov	r3, r5
 800920a:	e7f5      	b.n	80091f8 <__kernel_rem_pio2+0x300>
 800920c:	f3af 8000 	nop.w
	...
 800921c:	3ff00000 	.word	0x3ff00000
 8009220:	08009d00 	.word	0x08009d00
 8009224:	40200000 	.word	0x40200000
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	3e700000 	.word	0x3e700000
 8009230:	41700000 	.word	0x41700000
 8009234:	3fe00000 	.word	0x3fe00000
 8009238:	08009cc0 	.word	0x08009cc0
 800923c:	1e62      	subs	r2, r4, #1
 800923e:	ab0e      	add	r3, sp, #56	; 0x38
 8009240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009244:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009248:	a90e      	add	r1, sp, #56	; 0x38
 800924a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800924e:	e739      	b.n	80090c4 <__kernel_rem_pio2+0x1cc>
 8009250:	1e62      	subs	r2, r4, #1
 8009252:	ab0e      	add	r3, sp, #56	; 0x38
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800925c:	e7f4      	b.n	8009248 <__kernel_rem_pio2+0x350>
 800925e:	a90e      	add	r1, sp, #56	; 0x38
 8009260:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009264:	3b01      	subs	r3, #1
 8009266:	430a      	orrs	r2, r1
 8009268:	e789      	b.n	800917e <__kernel_rem_pio2+0x286>
 800926a:	3301      	adds	r3, #1
 800926c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009270:	2900      	cmp	r1, #0
 8009272:	d0fa      	beq.n	800926a <__kernel_rem_pio2+0x372>
 8009274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009276:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800927a:	446a      	add	r2, sp
 800927c:	3a98      	subs	r2, #152	; 0x98
 800927e:	920a      	str	r2, [sp, #40]	; 0x28
 8009280:	9a08      	ldr	r2, [sp, #32]
 8009282:	18e3      	adds	r3, r4, r3
 8009284:	18a5      	adds	r5, r4, r2
 8009286:	aa22      	add	r2, sp, #136	; 0x88
 8009288:	f104 0801 	add.w	r8, r4, #1
 800928c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	4543      	cmp	r3, r8
 8009296:	da04      	bge.n	80092a2 <__kernel_rem_pio2+0x3aa>
 8009298:	461c      	mov	r4, r3
 800929a:	e6a3      	b.n	8008fe4 <__kernel_rem_pio2+0xec>
 800929c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800929e:	2301      	movs	r3, #1
 80092a0:	e7e4      	b.n	800926c <__kernel_rem_pio2+0x374>
 80092a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80092a8:	f7f7 f8e0 	bl	800046c <__aeabi_i2d>
 80092ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 80092b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b2:	46ab      	mov	fp, r5
 80092b4:	461c      	mov	r4, r3
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	2600      	movs	r6, #0
 80092bc:	2700      	movs	r7, #0
 80092be:	9b06      	ldr	r3, [sp, #24]
 80092c0:	4599      	cmp	r9, r3
 80092c2:	dd06      	ble.n	80092d2 <__kernel_rem_pio2+0x3da>
 80092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80092ca:	f108 0801 	add.w	r8, r8, #1
 80092ce:	930a      	str	r3, [sp, #40]	; 0x28
 80092d0:	e7df      	b.n	8009292 <__kernel_rem_pio2+0x39a>
 80092d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80092d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80092da:	f7f7 f931 	bl	8000540 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f6 ff75 	bl	80001d4 <__adddf3>
 80092ea:	f109 0901 	add.w	r9, r9, #1
 80092ee:	4606      	mov	r6, r0
 80092f0:	460f      	mov	r7, r1
 80092f2:	e7e4      	b.n	80092be <__kernel_rem_pio2+0x3c6>
 80092f4:	3d01      	subs	r5, #1
 80092f6:	e748      	b.n	800918a <__kernel_rem_pio2+0x292>
 80092f8:	ec47 6b10 	vmov	d0, r6, r7
 80092fc:	f1ca 0000 	rsb	r0, sl, #0
 8009300:	f000 face 	bl	80098a0 <scalbn>
 8009304:	ec57 6b10 	vmov	r6, r7, d0
 8009308:	4ba0      	ldr	r3, [pc, #640]	; (800958c <__kernel_rem_pio2+0x694>)
 800930a:	ee10 0a10 	vmov	r0, s0
 800930e:	2200      	movs	r2, #0
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 fb9b 	bl	8000a4c <__aeabi_dcmpge>
 8009316:	b1f8      	cbz	r0, 8009358 <__kernel_rem_pio2+0x460>
 8009318:	4b9d      	ldr	r3, [pc, #628]	; (8009590 <__kernel_rem_pio2+0x698>)
 800931a:	2200      	movs	r2, #0
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 f90e 	bl	8000540 <__aeabi_dmul>
 8009324:	f7f7 fbbc 	bl	8000aa0 <__aeabi_d2iz>
 8009328:	4680      	mov	r8, r0
 800932a:	f7f7 f89f 	bl	800046c <__aeabi_i2d>
 800932e:	4b97      	ldr	r3, [pc, #604]	; (800958c <__kernel_rem_pio2+0x694>)
 8009330:	2200      	movs	r2, #0
 8009332:	f7f7 f905 	bl	8000540 <__aeabi_dmul>
 8009336:	460b      	mov	r3, r1
 8009338:	4602      	mov	r2, r0
 800933a:	4639      	mov	r1, r7
 800933c:	4630      	mov	r0, r6
 800933e:	f7f6 ff47 	bl	80001d0 <__aeabi_dsub>
 8009342:	f7f7 fbad 	bl	8000aa0 <__aeabi_d2iz>
 8009346:	1c65      	adds	r5, r4, #1
 8009348:	ab0e      	add	r3, sp, #56	; 0x38
 800934a:	f10a 0a18 	add.w	sl, sl, #24
 800934e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009352:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009356:	e720      	b.n	800919a <__kernel_rem_pio2+0x2a2>
 8009358:	4630      	mov	r0, r6
 800935a:	4639      	mov	r1, r7
 800935c:	f7f7 fba0 	bl	8000aa0 <__aeabi_d2iz>
 8009360:	ab0e      	add	r3, sp, #56	; 0x38
 8009362:	4625      	mov	r5, r4
 8009364:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009368:	e717      	b.n	800919a <__kernel_rem_pio2+0x2a2>
 800936a:	ab0e      	add	r3, sp, #56	; 0x38
 800936c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009370:	f7f7 f87c 	bl	800046c <__aeabi_i2d>
 8009374:	4632      	mov	r2, r6
 8009376:	463b      	mov	r3, r7
 8009378:	f7f7 f8e2 	bl	8000540 <__aeabi_dmul>
 800937c:	4b84      	ldr	r3, [pc, #528]	; (8009590 <__kernel_rem_pio2+0x698>)
 800937e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009382:	2200      	movs	r2, #0
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f7 f8da 	bl	8000540 <__aeabi_dmul>
 800938c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009390:	4606      	mov	r6, r0
 8009392:	460f      	mov	r7, r1
 8009394:	e70f      	b.n	80091b6 <__kernel_rem_pio2+0x2be>
 8009396:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800939a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800939e:	f7f7 f8cf 	bl	8000540 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093aa:	f7f6 ff13 	bl	80001d4 <__adddf3>
 80093ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093b2:	f108 0801 	add.w	r8, r8, #1
 80093b6:	9b02      	ldr	r3, [sp, #8]
 80093b8:	4598      	cmp	r8, r3
 80093ba:	dc01      	bgt.n	80093c0 <__kernel_rem_pio2+0x4c8>
 80093bc:	45b8      	cmp	r8, r7
 80093be:	ddea      	ble.n	8009396 <__kernel_rem_pio2+0x49e>
 80093c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80093c4:	ab4a      	add	r3, sp, #296	; 0x128
 80093c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80093ca:	ed87 7b00 	vstr	d7, [r7]
 80093ce:	3e01      	subs	r6, #1
 80093d0:	e6f8      	b.n	80091c4 <__kernel_rem_pio2+0x2cc>
 80093d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	dc0b      	bgt.n	80093f0 <__kernel_rem_pio2+0x4f8>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dc35      	bgt.n	8009448 <__kernel_rem_pio2+0x550>
 80093dc:	d059      	beq.n	8009492 <__kernel_rem_pio2+0x59a>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	f003 0007 	and.w	r0, r3, #7
 80093e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80093e8:	ecbd 8b02 	vpop	{d8}
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d1f3      	bne.n	80093de <__kernel_rem_pio2+0x4e6>
 80093f6:	ab4a      	add	r3, sp, #296	; 0x128
 80093f8:	4423      	add	r3, r4
 80093fa:	9306      	str	r3, [sp, #24]
 80093fc:	461c      	mov	r4, r3
 80093fe:	469a      	mov	sl, r3
 8009400:	9502      	str	r5, [sp, #8]
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f1aa 0a08 	sub.w	sl, sl, #8
 800940a:	dc6b      	bgt.n	80094e4 <__kernel_rem_pio2+0x5ec>
 800940c:	46aa      	mov	sl, r5
 800940e:	f1ba 0f01 	cmp.w	sl, #1
 8009412:	f1a4 0408 	sub.w	r4, r4, #8
 8009416:	f300 8085 	bgt.w	8009524 <__kernel_rem_pio2+0x62c>
 800941a:	9c06      	ldr	r4, [sp, #24]
 800941c:	2000      	movs	r0, #0
 800941e:	3408      	adds	r4, #8
 8009420:	2100      	movs	r1, #0
 8009422:	2d01      	cmp	r5, #1
 8009424:	f300 809d 	bgt.w	8009562 <__kernel_rem_pio2+0x66a>
 8009428:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800942c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009430:	f1bb 0f00 	cmp.w	fp, #0
 8009434:	f040 809b 	bne.w	800956e <__kernel_rem_pio2+0x676>
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	e9c3 5600 	strd	r5, r6, [r3]
 800943e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009442:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009446:	e7ca      	b.n	80093de <__kernel_rem_pio2+0x4e6>
 8009448:	3408      	adds	r4, #8
 800944a:	ab4a      	add	r3, sp, #296	; 0x128
 800944c:	441c      	add	r4, r3
 800944e:	462e      	mov	r6, r5
 8009450:	2000      	movs	r0, #0
 8009452:	2100      	movs	r1, #0
 8009454:	2e00      	cmp	r6, #0
 8009456:	da36      	bge.n	80094c6 <__kernel_rem_pio2+0x5ce>
 8009458:	f1bb 0f00 	cmp.w	fp, #0
 800945c:	d039      	beq.n	80094d2 <__kernel_rem_pio2+0x5da>
 800945e:	4602      	mov	r2, r0
 8009460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009464:	9c01      	ldr	r4, [sp, #4]
 8009466:	e9c4 2300 	strd	r2, r3, [r4]
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009472:	f7f6 fead 	bl	80001d0 <__aeabi_dsub>
 8009476:	ae4c      	add	r6, sp, #304	; 0x130
 8009478:	2401      	movs	r4, #1
 800947a:	42a5      	cmp	r5, r4
 800947c:	da2c      	bge.n	80094d8 <__kernel_rem_pio2+0x5e0>
 800947e:	f1bb 0f00 	cmp.w	fp, #0
 8009482:	d002      	beq.n	800948a <__kernel_rem_pio2+0x592>
 8009484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009488:	4619      	mov	r1, r3
 800948a:	9b01      	ldr	r3, [sp, #4]
 800948c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009490:	e7a5      	b.n	80093de <__kernel_rem_pio2+0x4e6>
 8009492:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009496:	eb0d 0403 	add.w	r4, sp, r3
 800949a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800949e:	2000      	movs	r0, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	2d00      	cmp	r5, #0
 80094a4:	da09      	bge.n	80094ba <__kernel_rem_pio2+0x5c2>
 80094a6:	f1bb 0f00 	cmp.w	fp, #0
 80094aa:	d002      	beq.n	80094b2 <__kernel_rem_pio2+0x5ba>
 80094ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094b0:	4619      	mov	r1, r3
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	e9c3 0100 	strd	r0, r1, [r3]
 80094b8:	e791      	b.n	80093de <__kernel_rem_pio2+0x4e6>
 80094ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094be:	f7f6 fe89 	bl	80001d4 <__adddf3>
 80094c2:	3d01      	subs	r5, #1
 80094c4:	e7ed      	b.n	80094a2 <__kernel_rem_pio2+0x5aa>
 80094c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094ca:	f7f6 fe83 	bl	80001d4 <__adddf3>
 80094ce:	3e01      	subs	r6, #1
 80094d0:	e7c0      	b.n	8009454 <__kernel_rem_pio2+0x55c>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	e7c5      	b.n	8009464 <__kernel_rem_pio2+0x56c>
 80094d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80094dc:	f7f6 fe7a 	bl	80001d4 <__adddf3>
 80094e0:	3401      	adds	r4, #1
 80094e2:	e7ca      	b.n	800947a <__kernel_rem_pio2+0x582>
 80094e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80094e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	9302      	str	r3, [sp, #8]
 80094f2:	4632      	mov	r2, r6
 80094f4:	463b      	mov	r3, r7
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f6 fe6b 	bl	80001d4 <__adddf3>
 80094fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 fe61 	bl	80001d0 <__aeabi_dsub>
 800950e:	4632      	mov	r2, r6
 8009510:	463b      	mov	r3, r7
 8009512:	f7f6 fe5f 	bl	80001d4 <__adddf3>
 8009516:	ed9d 7b08 	vldr	d7, [sp, #32]
 800951a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800951e:	ed8a 7b00 	vstr	d7, [sl]
 8009522:	e76e      	b.n	8009402 <__kernel_rem_pio2+0x50a>
 8009524:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009528:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800952c:	4640      	mov	r0, r8
 800952e:	4632      	mov	r2, r6
 8009530:	463b      	mov	r3, r7
 8009532:	4649      	mov	r1, r9
 8009534:	f7f6 fe4e 	bl	80001d4 <__adddf3>
 8009538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f6 fe44 	bl	80001d0 <__aeabi_dsub>
 8009548:	4632      	mov	r2, r6
 800954a:	463b      	mov	r3, r7
 800954c:	f7f6 fe42 	bl	80001d4 <__adddf3>
 8009550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009554:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009558:	ed84 7b00 	vstr	d7, [r4]
 800955c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009560:	e755      	b.n	800940e <__kernel_rem_pio2+0x516>
 8009562:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009566:	f7f6 fe35 	bl	80001d4 <__adddf3>
 800956a:	3d01      	subs	r5, #1
 800956c:	e759      	b.n	8009422 <__kernel_rem_pio2+0x52a>
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	9a01      	ldr	r2, [sp, #4]
 8009572:	601d      	str	r5, [r3, #0]
 8009574:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009578:	605c      	str	r4, [r3, #4]
 800957a:	609f      	str	r7, [r3, #8]
 800957c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009580:	60d3      	str	r3, [r2, #12]
 8009582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009586:	6110      	str	r0, [r2, #16]
 8009588:	6153      	str	r3, [r2, #20]
 800958a:	e728      	b.n	80093de <__kernel_rem_pio2+0x4e6>
 800958c:	41700000 	.word	0x41700000
 8009590:	3e700000 	.word	0x3e700000
 8009594:	00000000 	.word	0x00000000

08009598 <__kernel_sin>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	ed2d 8b04 	vpush	{d8-d9}
 80095a0:	eeb0 8a41 	vmov.f32	s16, s2
 80095a4:	eef0 8a61 	vmov.f32	s17, s3
 80095a8:	ec55 4b10 	vmov	r4, r5, d0
 80095ac:	b083      	sub	sp, #12
 80095ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095b6:	9001      	str	r0, [sp, #4]
 80095b8:	da06      	bge.n	80095c8 <__kernel_sin+0x30>
 80095ba:	ee10 0a10 	vmov	r0, s0
 80095be:	4629      	mov	r1, r5
 80095c0:	f7f7 fa6e 	bl	8000aa0 <__aeabi_d2iz>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d051      	beq.n	800966c <__kernel_sin+0xd4>
 80095c8:	4622      	mov	r2, r4
 80095ca:	462b      	mov	r3, r5
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f6 ffb6 	bl	8000540 <__aeabi_dmul>
 80095d4:	4682      	mov	sl, r0
 80095d6:	468b      	mov	fp, r1
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 ffae 	bl	8000540 <__aeabi_dmul>
 80095e4:	a341      	add	r3, pc, #260	; (adr r3, 80096ec <__kernel_sin+0x154>)
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	4680      	mov	r8, r0
 80095ec:	4689      	mov	r9, r1
 80095ee:	4650      	mov	r0, sl
 80095f0:	4659      	mov	r1, fp
 80095f2:	f7f6 ffa5 	bl	8000540 <__aeabi_dmul>
 80095f6:	a33f      	add	r3, pc, #252	; (adr r3, 80096f4 <__kernel_sin+0x15c>)
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f7f6 fde8 	bl	80001d0 <__aeabi_dsub>
 8009600:	4652      	mov	r2, sl
 8009602:	465b      	mov	r3, fp
 8009604:	f7f6 ff9c 	bl	8000540 <__aeabi_dmul>
 8009608:	a33c      	add	r3, pc, #240	; (adr r3, 80096fc <__kernel_sin+0x164>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f7f6 fde1 	bl	80001d4 <__adddf3>
 8009612:	4652      	mov	r2, sl
 8009614:	465b      	mov	r3, fp
 8009616:	f7f6 ff93 	bl	8000540 <__aeabi_dmul>
 800961a:	a33a      	add	r3, pc, #232	; (adr r3, 8009704 <__kernel_sin+0x16c>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 fdd6 	bl	80001d0 <__aeabi_dsub>
 8009624:	4652      	mov	r2, sl
 8009626:	465b      	mov	r3, fp
 8009628:	f7f6 ff8a 	bl	8000540 <__aeabi_dmul>
 800962c:	a337      	add	r3, pc, #220	; (adr r3, 800970c <__kernel_sin+0x174>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fdcf 	bl	80001d4 <__adddf3>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	4606      	mov	r6, r0
 800963a:	460f      	mov	r7, r1
 800963c:	b9eb      	cbnz	r3, 800967a <__kernel_sin+0xe2>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4650      	mov	r0, sl
 8009644:	4659      	mov	r1, fp
 8009646:	f7f6 ff7b 	bl	8000540 <__aeabi_dmul>
 800964a:	a325      	add	r3, pc, #148	; (adr r3, 80096e0 <__kernel_sin+0x148>)
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f7f6 fdbe 	bl	80001d0 <__aeabi_dsub>
 8009654:	4642      	mov	r2, r8
 8009656:	464b      	mov	r3, r9
 8009658:	f7f6 ff72 	bl	8000540 <__aeabi_dmul>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4620      	mov	r0, r4
 8009662:	4629      	mov	r1, r5
 8009664:	f7f6 fdb6 	bl	80001d4 <__adddf3>
 8009668:	4604      	mov	r4, r0
 800966a:	460d      	mov	r5, r1
 800966c:	ec45 4b10 	vmov	d0, r4, r5
 8009670:	b003      	add	sp, #12
 8009672:	ecbd 8b04 	vpop	{d8-d9}
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <__kernel_sin+0x150>)
 800967c:	ec51 0b18 	vmov	r0, r1, d8
 8009680:	2200      	movs	r2, #0
 8009682:	f7f6 ff5d 	bl	8000540 <__aeabi_dmul>
 8009686:	4632      	mov	r2, r6
 8009688:	ec41 0b19 	vmov	d9, r0, r1
 800968c:	463b      	mov	r3, r7
 800968e:	4640      	mov	r0, r8
 8009690:	4649      	mov	r1, r9
 8009692:	f7f6 ff55 	bl	8000540 <__aeabi_dmul>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	ec51 0b19 	vmov	r0, r1, d9
 800969e:	f7f6 fd97 	bl	80001d0 <__aeabi_dsub>
 80096a2:	4652      	mov	r2, sl
 80096a4:	465b      	mov	r3, fp
 80096a6:	f7f6 ff4b 	bl	8000540 <__aeabi_dmul>
 80096aa:	ec53 2b18 	vmov	r2, r3, d8
 80096ae:	f7f6 fd8f 	bl	80001d0 <__aeabi_dsub>
 80096b2:	a30b      	add	r3, pc, #44	; (adr r3, 80096e0 <__kernel_sin+0x148>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	4606      	mov	r6, r0
 80096ba:	460f      	mov	r7, r1
 80096bc:	4640      	mov	r0, r8
 80096be:	4649      	mov	r1, r9
 80096c0:	f7f6 ff3e 	bl	8000540 <__aeabi_dmul>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f6 fd82 	bl	80001d4 <__adddf3>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 fd7a 	bl	80001d0 <__aeabi_dsub>
 80096dc:	e7c4      	b.n	8009668 <__kernel_sin+0xd0>
 80096de:	bf00      	nop
 80096e0:	55555549 	.word	0x55555549
 80096e4:	3fc55555 	.word	0x3fc55555
 80096e8:	3fe00000 	.word	0x3fe00000
 80096ec:	5acfd57c 	.word	0x5acfd57c
 80096f0:	3de5d93a 	.word	0x3de5d93a
 80096f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80096f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80096fc:	57b1fe7d 	.word	0x57b1fe7d
 8009700:	3ec71de3 	.word	0x3ec71de3
 8009704:	19c161d5 	.word	0x19c161d5
 8009708:	3f2a01a0 	.word	0x3f2a01a0
 800970c:	1110f8a6 	.word	0x1110f8a6
 8009710:	3f811111 	.word	0x3f811111

08009714 <with_errno>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4604      	mov	r4, r0
 8009718:	460d      	mov	r5, r1
 800971a:	4616      	mov	r6, r2
 800971c:	f7fe fa0c 	bl	8007b38 <__errno>
 8009720:	4629      	mov	r1, r5
 8009722:	6006      	str	r6, [r0, #0]
 8009724:	4620      	mov	r0, r4
 8009726:	bd70      	pop	{r4, r5, r6, pc}

08009728 <xflow>:
 8009728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800972a:	4614      	mov	r4, r2
 800972c:	461d      	mov	r5, r3
 800972e:	b108      	cbz	r0, 8009734 <xflow+0xc>
 8009730:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009734:	e9cd 2300 	strd	r2, r3, [sp]
 8009738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800973c:	4620      	mov	r0, r4
 800973e:	4629      	mov	r1, r5
 8009740:	f7f6 fefe 	bl	8000540 <__aeabi_dmul>
 8009744:	2222      	movs	r2, #34	; 0x22
 8009746:	b003      	add	sp, #12
 8009748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800974c:	f7ff bfe2 	b.w	8009714 <with_errno>

08009750 <__math_uflow>:
 8009750:	b508      	push	{r3, lr}
 8009752:	2200      	movs	r2, #0
 8009754:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009758:	f7ff ffe6 	bl	8009728 <xflow>
 800975c:	ec41 0b10 	vmov	d0, r0, r1
 8009760:	bd08      	pop	{r3, pc}

08009762 <__math_oflow>:
 8009762:	b508      	push	{r3, lr}
 8009764:	2200      	movs	r2, #0
 8009766:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800976a:	f7ff ffdd 	bl	8009728 <xflow>
 800976e:	ec41 0b10 	vmov	d0, r0, r1
 8009772:	bd08      	pop	{r3, pc}

08009774 <fabs>:
 8009774:	ec51 0b10 	vmov	r0, r1, d0
 8009778:	ee10 2a10 	vmov	r2, s0
 800977c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009780:	ec43 2b10 	vmov	d0, r2, r3
 8009784:	4770      	bx	lr

08009786 <finite>:
 8009786:	b082      	sub	sp, #8
 8009788:	ed8d 0b00 	vstr	d0, [sp]
 800978c:	9801      	ldr	r0, [sp, #4]
 800978e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009792:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009796:	0fc0      	lsrs	r0, r0, #31
 8009798:	b002      	add	sp, #8
 800979a:	4770      	bx	lr
 800979c:	0000      	movs	r0, r0
	...

080097a0 <floor>:
 80097a0:	ec51 0b10 	vmov	r0, r1, d0
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80097ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80097b0:	2e13      	cmp	r6, #19
 80097b2:	ee10 5a10 	vmov	r5, s0
 80097b6:	ee10 8a10 	vmov	r8, s0
 80097ba:	460c      	mov	r4, r1
 80097bc:	dc32      	bgt.n	8009824 <floor+0x84>
 80097be:	2e00      	cmp	r6, #0
 80097c0:	da14      	bge.n	80097ec <floor+0x4c>
 80097c2:	a333      	add	r3, pc, #204	; (adr r3, 8009890 <floor+0xf0>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 fd04 	bl	80001d4 <__adddf3>
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	f7f7 f946 	bl	8000a60 <__aeabi_dcmpgt>
 80097d4:	b138      	cbz	r0, 80097e6 <floor+0x46>
 80097d6:	2c00      	cmp	r4, #0
 80097d8:	da57      	bge.n	800988a <floor+0xea>
 80097da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80097de:	431d      	orrs	r5, r3
 80097e0:	d001      	beq.n	80097e6 <floor+0x46>
 80097e2:	4c2d      	ldr	r4, [pc, #180]	; (8009898 <floor+0xf8>)
 80097e4:	2500      	movs	r5, #0
 80097e6:	4621      	mov	r1, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	e025      	b.n	8009838 <floor+0x98>
 80097ec:	4f2b      	ldr	r7, [pc, #172]	; (800989c <floor+0xfc>)
 80097ee:	4137      	asrs	r7, r6
 80097f0:	ea01 0307 	and.w	r3, r1, r7
 80097f4:	4303      	orrs	r3, r0
 80097f6:	d01f      	beq.n	8009838 <floor+0x98>
 80097f8:	a325      	add	r3, pc, #148	; (adr r3, 8009890 <floor+0xf0>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f6 fce9 	bl	80001d4 <__adddf3>
 8009802:	2200      	movs	r2, #0
 8009804:	2300      	movs	r3, #0
 8009806:	f7f7 f92b 	bl	8000a60 <__aeabi_dcmpgt>
 800980a:	2800      	cmp	r0, #0
 800980c:	d0eb      	beq.n	80097e6 <floor+0x46>
 800980e:	2c00      	cmp	r4, #0
 8009810:	bfbe      	ittt	lt
 8009812:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009816:	fa43 f606 	asrlt.w	r6, r3, r6
 800981a:	19a4      	addlt	r4, r4, r6
 800981c:	ea24 0407 	bic.w	r4, r4, r7
 8009820:	2500      	movs	r5, #0
 8009822:	e7e0      	b.n	80097e6 <floor+0x46>
 8009824:	2e33      	cmp	r6, #51	; 0x33
 8009826:	dd0b      	ble.n	8009840 <floor+0xa0>
 8009828:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800982c:	d104      	bne.n	8009838 <floor+0x98>
 800982e:	ee10 2a10 	vmov	r2, s0
 8009832:	460b      	mov	r3, r1
 8009834:	f7f6 fcce 	bl	80001d4 <__adddf3>
 8009838:	ec41 0b10 	vmov	d0, r0, r1
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	fa23 f707 	lsr.w	r7, r3, r7
 800984c:	4207      	tst	r7, r0
 800984e:	d0f3      	beq.n	8009838 <floor+0x98>
 8009850:	a30f      	add	r3, pc, #60	; (adr r3, 8009890 <floor+0xf0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f7f6 fcbd 	bl	80001d4 <__adddf3>
 800985a:	2200      	movs	r2, #0
 800985c:	2300      	movs	r3, #0
 800985e:	f7f7 f8ff 	bl	8000a60 <__aeabi_dcmpgt>
 8009862:	2800      	cmp	r0, #0
 8009864:	d0bf      	beq.n	80097e6 <floor+0x46>
 8009866:	2c00      	cmp	r4, #0
 8009868:	da02      	bge.n	8009870 <floor+0xd0>
 800986a:	2e14      	cmp	r6, #20
 800986c:	d103      	bne.n	8009876 <floor+0xd6>
 800986e:	3401      	adds	r4, #1
 8009870:	ea25 0507 	bic.w	r5, r5, r7
 8009874:	e7b7      	b.n	80097e6 <floor+0x46>
 8009876:	2301      	movs	r3, #1
 8009878:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800987c:	fa03 f606 	lsl.w	r6, r3, r6
 8009880:	4435      	add	r5, r6
 8009882:	4545      	cmp	r5, r8
 8009884:	bf38      	it	cc
 8009886:	18e4      	addcc	r4, r4, r3
 8009888:	e7f2      	b.n	8009870 <floor+0xd0>
 800988a:	2500      	movs	r5, #0
 800988c:	462c      	mov	r4, r5
 800988e:	e7aa      	b.n	80097e6 <floor+0x46>
 8009890:	8800759c 	.word	0x8800759c
 8009894:	7e37e43c 	.word	0x7e37e43c
 8009898:	bff00000 	.word	0xbff00000
 800989c:	000fffff 	.word	0x000fffff

080098a0 <scalbn>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	ec55 4b10 	vmov	r4, r5, d0
 80098a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80098aa:	4606      	mov	r6, r0
 80098ac:	462b      	mov	r3, r5
 80098ae:	b99a      	cbnz	r2, 80098d8 <scalbn+0x38>
 80098b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098b4:	4323      	orrs	r3, r4
 80098b6:	d036      	beq.n	8009926 <scalbn+0x86>
 80098b8:	4b39      	ldr	r3, [pc, #228]	; (80099a0 <scalbn+0x100>)
 80098ba:	4629      	mov	r1, r5
 80098bc:	ee10 0a10 	vmov	r0, s0
 80098c0:	2200      	movs	r2, #0
 80098c2:	f7f6 fe3d 	bl	8000540 <__aeabi_dmul>
 80098c6:	4b37      	ldr	r3, [pc, #220]	; (80099a4 <scalbn+0x104>)
 80098c8:	429e      	cmp	r6, r3
 80098ca:	4604      	mov	r4, r0
 80098cc:	460d      	mov	r5, r1
 80098ce:	da10      	bge.n	80098f2 <scalbn+0x52>
 80098d0:	a32b      	add	r3, pc, #172	; (adr r3, 8009980 <scalbn+0xe0>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	e03a      	b.n	800994e <scalbn+0xae>
 80098d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80098dc:	428a      	cmp	r2, r1
 80098de:	d10c      	bne.n	80098fa <scalbn+0x5a>
 80098e0:	ee10 2a10 	vmov	r2, s0
 80098e4:	4620      	mov	r0, r4
 80098e6:	4629      	mov	r1, r5
 80098e8:	f7f6 fc74 	bl	80001d4 <__adddf3>
 80098ec:	4604      	mov	r4, r0
 80098ee:	460d      	mov	r5, r1
 80098f0:	e019      	b.n	8009926 <scalbn+0x86>
 80098f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098f6:	460b      	mov	r3, r1
 80098f8:	3a36      	subs	r2, #54	; 0x36
 80098fa:	4432      	add	r2, r6
 80098fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009900:	428a      	cmp	r2, r1
 8009902:	dd08      	ble.n	8009916 <scalbn+0x76>
 8009904:	2d00      	cmp	r5, #0
 8009906:	a120      	add	r1, pc, #128	; (adr r1, 8009988 <scalbn+0xe8>)
 8009908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800990c:	da1c      	bge.n	8009948 <scalbn+0xa8>
 800990e:	a120      	add	r1, pc, #128	; (adr r1, 8009990 <scalbn+0xf0>)
 8009910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009914:	e018      	b.n	8009948 <scalbn+0xa8>
 8009916:	2a00      	cmp	r2, #0
 8009918:	dd08      	ble.n	800992c <scalbn+0x8c>
 800991a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800991e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009922:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009926:	ec45 4b10 	vmov	d0, r4, r5
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009930:	da19      	bge.n	8009966 <scalbn+0xc6>
 8009932:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009936:	429e      	cmp	r6, r3
 8009938:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800993c:	dd0a      	ble.n	8009954 <scalbn+0xb4>
 800993e:	a112      	add	r1, pc, #72	; (adr r1, 8009988 <scalbn+0xe8>)
 8009940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e2      	bne.n	800990e <scalbn+0x6e>
 8009948:	a30f      	add	r3, pc, #60	; (adr r3, 8009988 <scalbn+0xe8>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f6 fdf7 	bl	8000540 <__aeabi_dmul>
 8009952:	e7cb      	b.n	80098ec <scalbn+0x4c>
 8009954:	a10a      	add	r1, pc, #40	; (adr r1, 8009980 <scalbn+0xe0>)
 8009956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0b8      	beq.n	80098d0 <scalbn+0x30>
 800995e:	a10e      	add	r1, pc, #56	; (adr r1, 8009998 <scalbn+0xf8>)
 8009960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009964:	e7b4      	b.n	80098d0 <scalbn+0x30>
 8009966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800996a:	3236      	adds	r2, #54	; 0x36
 800996c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009970:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009974:	4620      	mov	r0, r4
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <scalbn+0x108>)
 8009978:	2200      	movs	r2, #0
 800997a:	e7e8      	b.n	800994e <scalbn+0xae>
 800997c:	f3af 8000 	nop.w
 8009980:	c2f8f359 	.word	0xc2f8f359
 8009984:	01a56e1f 	.word	0x01a56e1f
 8009988:	8800759c 	.word	0x8800759c
 800998c:	7e37e43c 	.word	0x7e37e43c
 8009990:	8800759c 	.word	0x8800759c
 8009994:	fe37e43c 	.word	0xfe37e43c
 8009998:	c2f8f359 	.word	0xc2f8f359
 800999c:	81a56e1f 	.word	0x81a56e1f
 80099a0:	43500000 	.word	0x43500000
 80099a4:	ffff3cb0 	.word	0xffff3cb0
 80099a8:	3c900000 	.word	0x3c900000

080099ac <_init>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr

080099b8 <_fini>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	bf00      	nop
 80099bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099be:	bc08      	pop	{r3}
 80099c0:	469e      	mov	lr, r3
 80099c2:	4770      	bx	lr
